From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Softik Lord <dimap9986@gmail.com>
Date: Tue, 12 Jul 2022 00:40:07 +0500
Subject: [PATCH] MEGA-SPEED-PATCH-FAST-UTIL


diff --git a/src/main/java/com/destroystokyo/paper/util/RedstoneWireTurbo.java b/src/main/java/com/destroystokyo/paper/util/RedstoneWireTurbo.java
index 7ab6a8e8dabb30c1e764fbee14558f95c04ca829..676b21a935cf430ed208d67529f512cb00d1f97b 100644
--- a/src/main/java/com/destroystokyo/paper/util/RedstoneWireTurbo.java
+++ b/src/main/java/com/destroystokyo/paper/util/RedstoneWireTurbo.java
@@ -9,6 +9,7 @@ import org.bukkit.event.block.BlockRedstoneEvent;
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 /**
  * Used for the faster redstone algorithm.
@@ -108,9 +109,9 @@ public class RedstoneWireTurbo {
      * information flow.  This makes the implementation non-orientational.  Only when
      * this direction is ambiguous is randomness applied (intentionally).
      */
-    private List<UpdateNode> updateQueue0 = Lists.newArrayList();
-    private List<UpdateNode> updateQueue1 = Lists.newArrayList();
-    private List<UpdateNode> updateQueue2 = Lists.newArrayList();
+    private List<UpdateNode> updateQueue0 = new ObjectArrayList<>();
+    private List<UpdateNode> updateQueue1 = new ObjectArrayList<>();
+    private List<UpdateNode> updateQueue2 = new ObjectArrayList<>();
 
     public RedstoneWireTurbo(BlockRedstoneWire wire) {
         this.wire = wire;
diff --git a/src/main/java/net/minecraft/server/AdvancementDataPlayer.java b/src/main/java/net/minecraft/server/AdvancementDataPlayer.java
index 80063e376960b73e4eacd12a64d4be8eb790d04e..16d48f5f6aad6f96dcb9491e77cba0d5f5d10b9d 100644
--- a/src/main/java/net/minecraft/server/AdvancementDataPlayer.java
+++ b/src/main/java/net/minecraft/server/AdvancementDataPlayer.java
@@ -26,6 +26,7 @@ import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public class AdvancementDataPlayer {
 
@@ -89,7 +90,7 @@ public class AdvancementDataPlayer {
     }
 
     private void e() {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         Iterator iterator = this.data.entrySet().iterator();
 
         while (iterator.hasNext()) {
diff --git a/src/main/java/net/minecraft/server/BiomeBase.java b/src/main/java/net/minecraft/server/BiomeBase.java
index ab6db74689023e386457366de164cd3d2697bb1c..41a7a2b23e8a54e4e2bd90b845d381c25e0facd8 100644
--- a/src/main/java/net/minecraft/server/BiomeBase.java
+++ b/src/main/java/net/minecraft/server/BiomeBase.java
@@ -7,6 +7,7 @@ import java.util.Random;
 import javax.annotation.Nullable;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public abstract class BiomeBase {
 
@@ -62,10 +63,10 @@ public abstract class BiomeBase {
     protected BiomeBase(BiomeBase.a biomebase_a) {
         this.q = Blocks.GRASS.getBlockData();
         this.r = Blocks.DIRT.getBlockData();
-        this.t = Lists.newArrayList();
-        this.u = Lists.newArrayList();
-        this.v = Lists.newArrayList();
-        this.w = Lists.newArrayList();
+        this.t = new ObjectArrayList<>();
+        this.u = new ObjectArrayList<>();
+        this.v = new ObjectArrayList<>();
+        this.w = new ObjectArrayList<>();
         this.y = biomebase_a.a;
         this.z = biomebase_a.b;
         this.A = biomebase_a.c;
diff --git a/src/main/java/net/minecraft/server/BlockPiston.java b/src/main/java/net/minecraft/server/BlockPiston.java
index 8c8045f90839d55f37ddb8035087da855085607c..de7fd37e8741818c0e2da5d7988fe823ef7afa11 100644
--- a/src/main/java/net/minecraft/server/BlockPiston.java
+++ b/src/main/java/net/minecraft/server/BlockPiston.java
@@ -15,6 +15,7 @@ import com.google.common.collect.ImmutableList;
 import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.event.block.BlockPistonRetractEvent;
 import org.bukkit.event.block.BlockPistonExtendEvent;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 // CraftBukkit end
 
 public class BlockPiston extends BlockDirectional {
@@ -299,7 +300,7 @@ public class BlockPiston extends BlockDirectional {
             return false;
         } else {
             List list = pistonextendschecker.getMovedBlocks();
-            ArrayList arraylist = Lists.newArrayList();
+            ArrayList arraylist = new ObjectArrayList<>();
 
             for (int i = 0; i < list.size(); ++i) {
                 BlockPosition blockposition1 = (BlockPosition) list.get(i);
diff --git a/src/main/java/net/minecraft/server/BlockPosition.java b/src/main/java/net/minecraft/server/BlockPosition.java
index e80adc4f254a28cf9524eaf5a1c8be5132ae280b..2005dae47dd5ef4f5e665ac748bb0e42f32bd834 100644
--- a/src/main/java/net/minecraft/server/BlockPosition.java
+++ b/src/main/java/net/minecraft/server/BlockPosition.java
@@ -7,6 +7,7 @@ import java.util.List;
 import javax.annotation.concurrent.Immutable;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 @Immutable
 public class BlockPosition extends BaseBlockPosition {
@@ -284,7 +285,7 @@ public class BlockPosition extends BaseBlockPosition {
     public static final class PooledBlockPosition extends BlockPosition.MutableBlockPosition {
 
         private boolean f;
-        private static final List<BlockPosition.PooledBlockPosition> g = Lists.newArrayList();
+        private static final List<BlockPosition.PooledBlockPosition> g = new ObjectArrayList<>();
 
         private PooledBlockPosition(int i, int j, int k) {
             super(i, j, k);
diff --git a/src/main/java/net/minecraft/server/ChatBaseComponent.java b/src/main/java/net/minecraft/server/ChatBaseComponent.java
index 36989dffc798926823e2b1bdbaff369b621482c4..7ac552f224af5253dd633e6eb15c2b65fea62e1d 100644
--- a/src/main/java/net/minecraft/server/ChatBaseComponent.java
+++ b/src/main/java/net/minecraft/server/ChatBaseComponent.java
@@ -6,10 +6,11 @@ import com.google.common.collect.Lists;
 import java.util.Iterator;
 import java.util.List;
 import javax.annotation.Nullable;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public abstract class ChatBaseComponent implements IChatBaseComponent {
 
-    protected List<IChatBaseComponent> a = Lists.newArrayList();
+    protected List<IChatBaseComponent> a = new ObjectArrayList<>();
     private ChatModifier b;
 
     public ChatBaseComponent() {}
diff --git a/src/main/java/net/minecraft/server/CombatTracker.java b/src/main/java/net/minecraft/server/CombatTracker.java
index bddd66e798200d116163111e1bd790c03fca7bb9..7d242002474a42d2d17f04e7d70a25779330a82a 100644
--- a/src/main/java/net/minecraft/server/CombatTracker.java
+++ b/src/main/java/net/minecraft/server/CombatTracker.java
@@ -4,10 +4,11 @@ import com.google.common.collect.Lists;
 import java.util.Iterator;
 import java.util.List;
 import javax.annotation.Nullable;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public class CombatTracker {
 
-    private final List<CombatEntry> a = Lists.newArrayList();
+    private final List<CombatEntry> a = new ObjectArrayList<>();
     private final EntityLiving b;
     private int c;
     private int d;
diff --git a/src/main/java/net/minecraft/server/CommandAbstract.java b/src/main/java/net/minecraft/server/CommandAbstract.java
index a99d0f87044492855fe2393e2a26a5bed3df1035..16eef6bae1e60de75fd4de6bee15ac36c86b3045 100644
--- a/src/main/java/net/minecraft/server/CommandAbstract.java
+++ b/src/main/java/net/minecraft/server/CommandAbstract.java
@@ -21,6 +21,7 @@ import java.util.UUID;
 import java.util.Map.Entry;
 import javax.annotation.Nullable;
 import org.apache.commons.lang3.exception.ExceptionUtils;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public abstract class CommandAbstract implements ICommand {
 
@@ -641,7 +642,7 @@ public abstract class CommandAbstract implements ICommand {
 
     public static List<String> a(String[] astring, Collection<?> collection) {
         String s = astring[astring.length - 1];
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
 
         if (!collection.isEmpty()) {
             Iterator iterator = Iterables.transform(collection, Functions.toStringFunction()).iterator();
diff --git a/src/main/java/net/minecraft/server/CommandScoreboard.java b/src/main/java/net/minecraft/server/CommandScoreboard.java
index 0607e55d3af0b9cc651cc811e50b38f1005d8c17..86f9f9fc20b74a9c74934e2b4db3f46c5089770f 100644
--- a/src/main/java/net/minecraft/server/CommandScoreboard.java
+++ b/src/main/java/net/minecraft/server/CommandScoreboard.java
@@ -13,6 +13,7 @@ import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 import javax.annotation.Nullable;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public class CommandScoreboard extends CommandAbstract {
 
@@ -216,7 +217,7 @@ public class CommandScoreboard extends CommandAbstract {
         } else {
             ArrayList arraylist = Lists.newArrayList(this.a(minecraftserver).getPlayers());
             String s = astring[i];
-            ArrayList arraylist1 = Lists.newArrayList();
+            ArrayList arraylist1 = new ObjectArrayList<>();
             Iterator iterator = arraylist.iterator();
 
             while (iterator.hasNext()) {
@@ -1062,7 +1063,7 @@ public class CommandScoreboard extends CommandAbstract {
 
     protected List<String> a(boolean flag, MinecraftServer minecraftserver) {
         Collection collection = this.a(minecraftserver).getObjectives();
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         Iterator iterator = collection.iterator();
 
         while (iterator.hasNext()) {
@@ -1078,7 +1079,7 @@ public class CommandScoreboard extends CommandAbstract {
 
     protected List<String> b(MinecraftServer minecraftserver) {
         Collection collection = this.a(minecraftserver).getObjectives();
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         Iterator iterator = collection.iterator();
 
         while (iterator.hasNext()) {
diff --git a/src/main/java/net/minecraft/server/CommandSpreadPlayers.java b/src/main/java/net/minecraft/server/CommandSpreadPlayers.java
index c79679e6450c8b61d40c7b65cd1506bafff7136a..29140153496dd84f20c4d03296ca6eea58173abf 100644
--- a/src/main/java/net/minecraft/server/CommandSpreadPlayers.java
+++ b/src/main/java/net/minecraft/server/CommandSpreadPlayers.java
@@ -11,6 +11,7 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
 import javax.annotation.Nullable;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public class CommandSpreadPlayers extends CommandAbstract {
 
@@ -41,7 +42,7 @@ public class CommandSpreadPlayers extends CommandAbstract {
             double d3 = a(astring[i++], 0.0D);
             double d4 = a(astring[i++], d3 + 1.0D);
             boolean flag = d(astring[i++]);
-            ArrayList arraylist = Lists.newArrayList();
+            ArrayList arraylist = new ObjectArrayList<>();
 
             while (i < astring.length) {
                 String s = astring[i++];
diff --git a/src/main/java/net/minecraft/server/Container.java b/src/main/java/net/minecraft/server/Container.java
index 3a488ce207a060d6c080c7d6d7ca641e23edb991..678c553d66dc2790d5cf7b21189047c924f6be7f 100644
--- a/src/main/java/net/minecraft/server/Container.java
+++ b/src/main/java/net/minecraft/server/Container.java
@@ -16,17 +16,18 @@ import org.bukkit.event.Event.Result;
 import org.bukkit.event.inventory.InventoryDragEvent;
 import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.inventory.InventoryView;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 // CraftBukkit end
 
 public abstract class Container {
 
     public NonNullList<ItemStack> items = NonNullList.a();
-    public List<Slot> slots = Lists.newArrayList();
+    public List<Slot> slots = new ObjectArrayList<>();
     public int windowId;
     private int dragType = -1;
     private int g;
     private final Set<Slot> h = Sets.newHashSet();
-    protected List<ICrafting> listeners = Lists.newArrayList();
+    protected List<ICrafting> listeners = new ObjectArrayList<>();
     private final Set<EntityHuman> i = Sets.newHashSet();
     private int tickCount; // Spigot
 
diff --git a/src/main/java/net/minecraft/server/CrashReport.java b/src/main/java/net/minecraft/server/CrashReport.java
index 436bbc0ff1e2f062ca1143973783f5c4d5064888..bb551834e21fe8ec88e951e870ffdc6ac3ed1bbc 100644
--- a/src/main/java/net/minecraft/server/CrashReport.java
+++ b/src/main/java/net/minecraft/server/CrashReport.java
@@ -17,6 +17,7 @@ import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang3.ArrayUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public class CrashReport {
 
@@ -24,7 +25,7 @@ public class CrashReport {
     private final String b;
     private final Throwable c;
     private final CrashReportSystemDetails d = new CrashReportSystemDetails(this, "System Details");
-    private final List<CrashReportSystemDetails> e = Lists.newArrayList();
+    private final List<CrashReportSystemDetails> e = new ObjectArrayList<>();
     private File f;
     private boolean g = true;
     private StackTraceElement[] h = new StackTraceElement[0];
diff --git a/src/main/java/net/minecraft/server/DataWatcher.java b/src/main/java/net/minecraft/server/DataWatcher.java
index fe84844531ab06d20de9ca4988ee12e69ab5f2f7..258ae69194a0d1763d1aa8e86fc9d19254203fd4 100644
--- a/src/main/java/net/minecraft/server/DataWatcher.java
+++ b/src/main/java/net/minecraft/server/DataWatcher.java
@@ -16,6 +16,7 @@ import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap; // Paper
 import org.apache.commons.lang3.ObjectUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public class DataWatcher {
 
@@ -166,7 +167,7 @@ public class DataWatcher {
                 if (datawatcher_item.c()) {
                     datawatcher_item.a(false);
                     if (arraylist == null) {
-                        arraylist = Lists.newArrayList();
+                        arraylist = new ObjectArrayList<>();
                     }
 
                     arraylist.add(datawatcher_item.d());
@@ -205,7 +206,7 @@ public class DataWatcher {
         for (Iterator iterator = this.d.values().iterator(); iterator.hasNext(); arraylist.add(datawatcher_item.d())) {
             datawatcher_item = (DataWatcher.Item) iterator.next();
             if (arraylist == null) {
-                arraylist = Lists.newArrayList();
+                arraylist = new ObjectArrayList<>();
             }
         }
 
@@ -234,7 +235,7 @@ public class DataWatcher {
 
         while ((short0 = packetdataserializer.readUnsignedByte()) != 255) {
             if (arraylist == null) {
-                arraylist = Lists.newArrayList();
+                arraylist = new ObjectArrayList<>();
             }
 
             int i = packetdataserializer.g();
diff --git a/src/main/java/net/minecraft/server/DefinedStructure.java b/src/main/java/net/minecraft/server/DefinedStructure.java
index 23da9467ebc82bd25f2c74ddf88ce415dea61775..cc9f02026f1d06e83da72a73a94df13494f7b417 100644
--- a/src/main/java/net/minecraft/server/DefinedStructure.java
+++ b/src/main/java/net/minecraft/server/DefinedStructure.java
@@ -10,11 +10,12 @@ import java.util.List;
 import java.util.Map;
 import java.util.UUID;
 import javax.annotation.Nullable;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public class DefinedStructure {
 
-    private final List<DefinedStructure.BlockInfo> a = Lists.newArrayList();
-    private final List<DefinedStructure.EntityInfo> b = Lists.newArrayList();
+    private final List<DefinedStructure.BlockInfo> a = new ObjectArrayList<>();
+    private final List<DefinedStructure.EntityInfo> b = new ObjectArrayList<>();
     private BlockPosition c;
     private String d;
 
@@ -38,9 +39,9 @@ public class DefinedStructure {
     public void a(World world, BlockPosition blockposition, BlockPosition blockposition1, boolean flag, @Nullable Block block) {
         if (blockposition1.getX() >= 1 && blockposition1.getY() >= 1 && blockposition1.getZ() >= 1) {
             BlockPosition blockposition2 = blockposition.a((BaseBlockPosition) blockposition1).a(-1, -1, -1);
-            ArrayList arraylist = Lists.newArrayList();
-            ArrayList arraylist1 = Lists.newArrayList();
-            ArrayList arraylist2 = Lists.newArrayList();
+            ArrayList arraylist = new ObjectArrayList<>();
+            ArrayList arraylist1 = new ObjectArrayList<>();
+            ArrayList arraylist2 = new ObjectArrayList<>();
             BlockPosition blockposition3 = new BlockPosition(Math.min(blockposition.getX(), blockposition2.getX()), Math.min(blockposition.getY(), blockposition2.getY()), Math.min(blockposition.getZ(), blockposition2.getZ()));
             BlockPosition blockposition4 = new BlockPosition(Math.max(blockposition.getX(), blockposition2.getX()), Math.max(blockposition.getY(), blockposition2.getY()), Math.max(blockposition.getZ(), blockposition2.getZ()));
 
diff --git a/src/main/java/net/minecraft/server/Enchantment.java b/src/main/java/net/minecraft/server/Enchantment.java
index 0a51c1a84fdfda1fc55b54d00f7f466345938c4f..2128a374482b63b336ff4cadf789826e218bb21c 100644
--- a/src/main/java/net/minecraft/server/Enchantment.java
+++ b/src/main/java/net/minecraft/server/Enchantment.java
@@ -4,6 +4,7 @@ import com.google.common.collect.Lists;
 import java.util.ArrayList;
 import java.util.List;
 import javax.annotation.Nullable;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public abstract class Enchantment {
 
@@ -35,7 +36,7 @@ public abstract class Enchantment {
     }
 
     public List<ItemStack> a(EntityLiving entityliving) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         EnumItemSlot[] aenumitemslot = this.a;
         int i = aenumitemslot.length;
 
diff --git a/src/main/java/net/minecraft/server/EnchantmentManager.java b/src/main/java/net/minecraft/server/EnchantmentManager.java
index c74d00b14b2362c82da3a3def9204dac75afbacf..ba1ecf3eae245170e60314bd248e6920f7feff71 100644
--- a/src/main/java/net/minecraft/server/EnchantmentManager.java
+++ b/src/main/java/net/minecraft/server/EnchantmentManager.java
@@ -9,6 +9,7 @@ import java.util.List;
 import java.util.Map;
 import java.util.Random;
 import java.util.Map.Entry;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public class EnchantmentManager {
 
@@ -242,7 +243,7 @@ public class EnchantmentManager {
         if (list.isEmpty()) {
             return ItemStack.a;
         } else {
-            ArrayList arraylist = Lists.newArrayList();
+            ArrayList arraylist = new ObjectArrayList<>();
             Iterator iterator = list.iterator();
 
             while (iterator.hasNext()) {
@@ -298,7 +299,7 @@ public class EnchantmentManager {
     }
 
     public static List<WeightedRandomEnchant> b(Random random, ItemStack itemstack, int i, boolean flag) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         Item item = itemstack.getItem();
         int j = item.c();
 
@@ -341,7 +342,7 @@ public class EnchantmentManager {
     }
 
     public static List<WeightedRandomEnchant> a(int i, ItemStack itemstack, boolean flag) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         Item item = itemstack.getItem();
         boolean flag1 = itemstack.getItem() == Items.BOOK;
         Iterator iterator = Enchantment.enchantments.iterator();
diff --git a/src/main/java/net/minecraft/server/EnderDragonBattle.java b/src/main/java/net/minecraft/server/EnderDragonBattle.java
index 286069746a8eab03ca6ed06c626ec40ffd12cdb7..1210d18930ca2ffa6a04fbe9b08dc23b1bafb827 100644
--- a/src/main/java/net/minecraft/server/EnderDragonBattle.java
+++ b/src/main/java/net/minecraft/server/EnderDragonBattle.java
@@ -17,6 +17,7 @@ import java.util.UUID;
 import javax.annotation.Nullable;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public class EnderDragonBattle {
 
@@ -44,7 +45,7 @@ public class EnderDragonBattle {
 
     public EnderDragonBattle(WorldServer worldserver, NBTTagCompound nbttagcompound) {
         this.c = (BossBattleServer) (new BossBattleServer(new ChatMessage("entity.EnderDragon.name", new Object[0]), BossBattle.BarColor.PINK, BossBattle.BarStyle.PROGRESS)).setPlayMusic(true).c(true);
-        this.e = Lists.newArrayList();
+        this.e = new ObjectArrayList<>();
         // Paper start
         setScanForLegacyFight(worldserver.paperConfig.scanForLegacyEnderDragon);
         if (!scanForLegacyFight()) setDragonKilled(true);
@@ -442,7 +443,7 @@ public class EnderDragonBattle {
                 blockposition = this.o;
             }
 
-            ArrayList arraylist = Lists.newArrayList();
+            ArrayList arraylist = new ObjectArrayList<>();
             BlockPosition blockposition1 = blockposition.up(1);
             Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
 
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index a307b8caf973c22344842ca4d260348f1ba67f97..fe0092ce5f2cff6ee3430af02cff98061749cae4 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -17,6 +17,7 @@ import javax.annotation.Nullable;
 import it.unimi.dsi.util.XoShiRo256PlusPlusRandom;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 // CraftBukkit start
 import org.bukkit.Bukkit;
@@ -214,7 +215,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
 
     public Entity(World world) {
         this.id = Entity.entityCount++;
-        this.passengers = Lists.newArrayList();
+        this.passengers = new ObjectArrayList<>();
         this.boundingBox = Entity.c;
         this.width = 0.6F;
         this.length = 1.8F;
diff --git a/src/main/java/net/minecraft/server/EntityAreaEffectCloud.java b/src/main/java/net/minecraft/server/EntityAreaEffectCloud.java
index 836d368b40440f1b129612675ed022dbf751909b..d02b159c30cea8c5158cb3d023d46108828907b5 100644
--- a/src/main/java/net/minecraft/server/EntityAreaEffectCloud.java
+++ b/src/main/java/net/minecraft/server/EntityAreaEffectCloud.java
@@ -8,6 +8,7 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.UUID;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 import org.bukkit.craftbukkit.entity.CraftLivingEntity; // CraftBukkit
 import org.bukkit.entity.LivingEntity; // CraftBukkit
@@ -39,7 +40,7 @@ public class EntityAreaEffectCloud extends Entity {
     public EntityAreaEffectCloud(World world) {
         super(world);
         this.potionRegistry = Potions.EMPTY;
-        this.effects = Lists.newArrayList();
+        this.effects = new ObjectArrayList<>();
         this.at = Maps.newHashMap();
         this.au = 600;
         this.waitTime = 20;
@@ -278,7 +279,7 @@ public class EntityAreaEffectCloud extends Entity {
                     }
                 }
 
-                ArrayList arraylist = Lists.newArrayList();
+                ArrayList arraylist = new ObjectArrayList<>();
                 Iterator iterator1 = this.potionRegistry.a().iterator();
 
                 while (iterator1.hasNext()) {
diff --git a/src/main/java/net/minecraft/server/EntityBoat.java b/src/main/java/net/minecraft/server/EntityBoat.java
index 164e21fe81b3fec3aa1b3c303ebe44d83869f951..49de8b8cc0146afe5169ad934e86f8e6c5398d18 100644
--- a/src/main/java/net/minecraft/server/EntityBoat.java
+++ b/src/main/java/net/minecraft/server/EntityBoat.java
@@ -12,6 +12,7 @@ import org.bukkit.event.vehicle.VehicleDamageEvent;
 import org.bukkit.event.vehicle.VehicleDestroyEvent;
 import org.bukkit.event.vehicle.VehicleEntityCollisionEvent;
 import org.bukkit.event.vehicle.VehicleMoveEvent;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 // CraftBukkit end
 
 public class EntityBoat extends Entity {
@@ -425,7 +426,7 @@ public class EntityBoat extends Entity {
         int l = MathHelper.f(axisalignedbb1.e) + 1;
         int i1 = MathHelper.floor(axisalignedbb1.c) - 1;
         int j1 = MathHelper.f(axisalignedbb1.f) + 1;
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         float f = 0.0F;
         int k1 = 0;
         BlockPosition.PooledBlockPosition blockposition_pooledblockposition = BlockPosition.PooledBlockPosition.s();
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index cabcba7042dfb90ae902fe5a079109eb1c436f3b..a1a079fc574b5cff5bb9d71e0e2d5ddd8a4b4350 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -14,6 +14,7 @@ import java.util.UUID;
 import javax.annotation.Nullable;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 // CraftBukkit start
 import java.util.ArrayList;
@@ -563,7 +564,7 @@ public abstract class EntityLiving extends Entity {
 
     // CraftBukkit start
     private boolean isTickingEffects = false;
-    private List<Object> effectsToProcess = Lists.newArrayList();
+    private List<Object> effectsToProcess = new ObjectArrayList<>();
     // CraftBukkit end
 
     protected void tickPotionEffects() {
diff --git a/src/main/java/net/minecraft/server/EntityPainting.java b/src/main/java/net/minecraft/server/EntityPainting.java
index 6b1c7bbdfd95fa095b2a4b0c320f4aa979dac730..14c708bd08ceb1c27afd725c35bc6eecf8a29772 100644
--- a/src/main/java/net/minecraft/server/EntityPainting.java
+++ b/src/main/java/net/minecraft/server/EntityPainting.java
@@ -4,6 +4,7 @@ import com.google.common.collect.Lists;
 import java.util.ArrayList;
 import java.util.Iterator;
 import javax.annotation.Nullable;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public class EntityPainting extends EntityHanging {
 
@@ -16,7 +17,7 @@ public class EntityPainting extends EntityHanging {
 
     public EntityPainting(World world, BlockPosition blockposition, EnumDirection enumdirection) {
         super(world, blockposition);
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         int i = 0;
         EntityPainting.EnumArt[] aentitypainting_enumart = EntityPainting.EnumArt.values();
         int j = aentitypainting_enumart.length;
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index a30322f50a8c2b8163fc7036f3a74d58bb3bd8fe..94df99c33eccb76816d9086a801ce97ef4048a2b 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -12,6 +12,7 @@ import java.util.List;
 import javax.annotation.Nullable;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 // CraftBukkit start
 import com.google.common.base.Preconditions;
@@ -616,7 +617,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
             }
         }
 
-        return Lists.newArrayList();
+        return new ObjectArrayList<>();
     }
 
     public boolean damageEntity(DamageSource damagesource, float f) {
@@ -1082,7 +1083,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     }
 
     public void a(MinecraftKey[] aminecraftkey) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         MinecraftKey[] aminecraftkey1 = aminecraftkey;
         int i = aminecraftkey.length;
 
diff --git a/src/main/java/net/minecraft/server/EntityShulkerBullet.java b/src/main/java/net/minecraft/server/EntityShulkerBullet.java
index f019729e91152f4f0befbc1ed1092330435697cf..e48a7b7ada61c5c38084b325d1a209c6f1df0e7e 100644
--- a/src/main/java/net/minecraft/server/EntityShulkerBullet.java
+++ b/src/main/java/net/minecraft/server/EntityShulkerBullet.java
@@ -6,6 +6,7 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.UUID;
 import javax.annotation.Nullable;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public class EntityShulkerBullet extends Entity {
 
@@ -150,7 +151,7 @@ public class EntityShulkerBullet extends Entity {
 
         if (blockposition.g(this.locX, this.locY, this.locZ) >= 4.0D) {
             BlockPosition blockposition1 = new BlockPosition(this);
-            ArrayList arraylist = Lists.newArrayList();
+            ArrayList arraylist = new ObjectArrayList<>();
 
             if (enumdirection_enumaxis != EnumDirection.EnumAxis.X) {
                 if (blockposition1.getX() < blockposition.getX() && this.world.isEmpty(blockposition1.east())) {
diff --git a/src/main/java/net/minecraft/server/EntitySlice.java b/src/main/java/net/minecraft/server/EntitySlice.java
index 4bf08c079016eaef7d376e6d813e86f5f94fe6ae..63be6caab757dabbef91b6096efb698bc71e362d 100644
--- a/src/main/java/net/minecraft/server/EntitySlice.java
+++ b/src/main/java/net/minecraft/server/EntitySlice.java
@@ -10,6 +10,7 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public class EntitySlice<T> extends AbstractSet<T> {
 
@@ -17,7 +18,7 @@ public class EntitySlice<T> extends AbstractSet<T> {
     private final Map<Class<?>, List<T>> b = Maps.newHashMap();
     private final Set<Class<?>> c = Sets.newIdentityHashSet();
     private final Class<T> d;
-    private final List<T> e = Lists.newArrayList();
+    private final List<T> e = new ObjectArrayList<>();
 
     public EntitySlice(Class<T> oclass) {
         this.d = oclass;
diff --git a/src/main/java/net/minecraft/server/EntityTracker.java b/src/main/java/net/minecraft/server/EntityTracker.java
index a60f9460855931755568ae41de104edf32a81762..3c2bb4902fb148ac91120977ea36cef99d0265a8 100644
--- a/src/main/java/net/minecraft/server/EntityTracker.java
+++ b/src/main/java/net/minecraft/server/EntityTracker.java
@@ -7,6 +7,7 @@ import java.util.Iterator;
 import java.util.Set;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public class EntityTracker {
 
@@ -173,7 +174,7 @@ public class EntityTracker {
     }
 
     public void updatePlayers() {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         Iterator iterator = this.c.iterator();
         world.timings.tracker1.startTiming(); // Spigot
         while (iterator.hasNext()) {
@@ -252,8 +253,8 @@ public class EntityTracker {
     }
 
     public void a(EntityPlayer entityplayer, Chunk chunk) {
-        ArrayList arraylist = Lists.newArrayList();
-        ArrayList arraylist1 = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
+        ArrayList arraylist1 = new ObjectArrayList<>();
         Iterator iterator = this.c.iterator();
 
         while (iterator.hasNext()) {
diff --git a/src/main/java/net/minecraft/server/EntityTypes.java b/src/main/java/net/minecraft/server/EntityTypes.java
index 2359b31f4d94498d8d01eedaef9ff8323d65248c..18d088ea4b5c19879ab6ecf873ede4e992bb69a9 100644
--- a/src/main/java/net/minecraft/server/EntityTypes.java
+++ b/src/main/java/net/minecraft/server/EntityTypes.java
@@ -10,6 +10,7 @@ import java.util.Set;
 import javax.annotation.Nullable;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public class EntityTypes {
 
@@ -24,7 +25,7 @@ public class EntityTypes {
     public static final RegistryMaterials<MinecraftKey, Class<? extends Entity>> b = new RegistryMaterials();
     public static final Map<MinecraftKey, EntityTypes.MonsterEggInfo> eggInfo = Maps.newLinkedHashMap();
     public static final Set<MinecraftKey> d = Sets.newHashSet();
-    private static final List<String> g = Lists.newArrayList();
+    private static final List<String> g = new ObjectArrayList<>();
 
     @Nullable public static MinecraftKey getKey(Entity entity) { return a(entity); } // Paper - OBFHELPER
     @Nullable
diff --git a/src/main/java/net/minecraft/server/Explosion.java b/src/main/java/net/minecraft/server/Explosion.java
index 171bd60f428976d1850900136e6ac0a41ec0b938..0af496d7441705da27320f8dc391476d317d7203 100644
--- a/src/main/java/net/minecraft/server/Explosion.java
+++ b/src/main/java/net/minecraft/server/Explosion.java
@@ -8,6 +8,7 @@ import org.bukkit.Location;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.event.block.BlockExplodeEvent;
 import org.bukkit.event.entity.EntityExplodeEvent;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 import javax.annotation.Nullable;
 import java.util.*;
@@ -23,7 +24,7 @@ public class Explosion {
     private final double posZ;
     public final Entity source;
     private final float size;
-    private final ArrayList<BlockPosition> blocks = Lists.newArrayList();
+    private final ArrayList<BlockPosition> blocks = new ObjectArrayList<>();
     private final Map<EntityHuman, Vec3D> k = Maps.newHashMap();
     public boolean wasCanceled = false; // CraftBukkit - add field
 
@@ -307,7 +308,7 @@ public class Explosion {
             org.bukkit.entity.Entity explode = this.source == null ? null : this.source.getBukkitEntity();
             Location location = new Location(bworld, this.posX, this.posY, this.posZ);
 
-            List<org.bukkit.block.Block> blockList = Lists.newArrayList();
+            List<org.bukkit.block.Block> blockList = new ObjectArrayList<>();
             for (int i1 = this.blocks.size() - 1; i1 >= 0; i1--) {
                 BlockPosition cpos = (BlockPosition) this.blocks.get(i1);
                 org.bukkit.block.Block bblock = bworld.getBlockAt(cpos.getX(), cpos.getY(), cpos.getZ());
diff --git a/src/main/java/net/minecraft/server/FileIOThread.java b/src/main/java/net/minecraft/server/FileIOThread.java
index 9ee4115bec6b256362a490f7ffb3e10642d99ba2..3e2ec6d580e1c2502e7561c9ac52f9d1b91306fd 100644
--- a/src/main/java/net/minecraft/server/FileIOThread.java
+++ b/src/main/java/net/minecraft/server/FileIOThread.java
@@ -3,11 +3,12 @@ package net.minecraft.server;
 import com.google.common.collect.Lists;
 import java.util.Collections;
 import java.util.List;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public class FileIOThread implements Runnable {
 
     private static final FileIOThread a = new FileIOThread();
-    private final List<IAsyncChunkSaver> b = Collections.synchronizedList(Lists.newArrayList());
+    private final List<IAsyncChunkSaver> b = Collections.synchronizedList(new ObjectArrayList<>());
     private volatile long c;
     private volatile long d;
     private volatile boolean e;
diff --git a/src/main/java/net/minecraft/server/InventorySubcontainer.java b/src/main/java/net/minecraft/server/InventorySubcontainer.java
index 1609e637c392c3d13336e71a0164e8d18f31ec99..29c7fcb8bb3acd17e0e7c3fde6c24a7023e17f38 100644
--- a/src/main/java/net/minecraft/server/InventorySubcontainer.java
+++ b/src/main/java/net/minecraft/server/InventorySubcontainer.java
@@ -3,6 +3,7 @@ package net.minecraft.server;
 import com.google.common.collect.Lists;
 import java.util.Iterator;
 import java.util.List;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 // CraftBukkit start
 import java.util.List;
@@ -68,7 +69,7 @@ public class InventorySubcontainer implements IInventory {
 
     public void a(IInventoryListener iinventorylistener) {
         if (this.d == null) {
-            this.d = Lists.newArrayList();
+            this.d = new ObjectArrayList<>();
         }
 
         this.d.add(iinventorylistener);
diff --git a/src/main/java/net/minecraft/server/JsonList.java b/src/main/java/net/minecraft/server/JsonList.java
index 7525aa4cd923a0d3eecdf133629181b0a7f58ab7..2224bd44271241133e391fbe2c484ab03eb37399 100644
--- a/src/main/java/net/minecraft/server/JsonList.java
+++ b/src/main/java/net/minecraft/server/JsonList.java
@@ -133,7 +133,7 @@ public class JsonList<K, V extends JsonListEntry<K>> {
     private void removeStaleEntries() { h(); } // Paper - OBFHELPER
     private void h() {
         // Paper start
-        /*ArrayList arraylist = Lists.newArrayList();
+        /*ArrayList arraylist = new ObjectArrayList<>();
         Iterator iterator = this.d.values().iterator();
 
         while (iterator.hasNext()) {
diff --git a/src/main/java/net/minecraft/server/MethodProfiler.java b/src/main/java/net/minecraft/server/MethodProfiler.java
index e0276b11cdfda75a3bd1ec75cfecbbe0bdd45cd7..1920d1e0994132a103c3e9fc7a796787e6ce51a2 100644
--- a/src/main/java/net/minecraft/server/MethodProfiler.java
+++ b/src/main/java/net/minecraft/server/MethodProfiler.java
@@ -15,6 +15,7 @@ import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public class MethodProfiler {
 
@@ -84,7 +85,7 @@ public class MethodProfiler {
         } else {
             long i = this.f.getOrDefault("root", 0L);
             long j = this.f.getOrDefault(s, -1L);
-            ArrayList<MethodProfiler.ProfilerInfo> arraylist = Lists.newArrayList();
+            ArrayList<MethodProfiler.ProfilerInfo> arraylist = new ObjectArrayList<>();
 
             if (!s.isEmpty()) {
                 s = s + ".";
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 4747d0f4272db066b5c24cfe96cf1d61734cbfe6..7d7575c29d631ec8702f289e238ef9ccbf16b583 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -45,6 +45,7 @@ import joptsimple.OptionSet;
 // CraftBukkit end
 import org.spigotmc.SlackActivityAccountant; // Spigot
 import co.aikar.timings.MinecraftTimings; // Paper
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public abstract class MinecraftServer implements ICommandListener, Runnable, IAsyncTaskHandler, IMojangStatistics {
 
@@ -54,7 +55,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
     public Convertable convertable;
     // private final MojangStatisticsGenerator m = new MojangStatisticsGenerator("server", this, aw()); // Reaper - Remove snooper
     public File universe;
-    private final List<ITickable> o = Lists.newArrayList();
+    private final List<ITickable> o = new ObjectArrayList<>();
     public final ICommandHandler b;
     public final MethodProfiler methodProfiler = new MethodProfiler();
     private ServerConnection p; // Spigot
@@ -1255,7 +1256,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
 
     public List<String> tabCompleteCommand(ICommandListener icommandlistener, String s, @Nullable BlockPosition blockposition, boolean flag) {
         /* CraftBukkit start - Allow tab-completion of Bukkit commands
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         boolean flag1 = s.startsWith("/");
 
         if (flag1) {
diff --git a/src/main/java/net/minecraft/server/MobSpawnerAbstract.java b/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
index 87beea39db72a7380232a705d7e67f8948ea592e..9c1596b422e872dbe97ba636488251ec34fcf9e2 100644
--- a/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
+++ b/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
@@ -6,11 +6,12 @@ import it.unimi.dsi.util.XoShiRo256PlusPlusRandom;
 import java.util.Iterator;
 import java.util.List;
 import javax.annotation.Nullable;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public abstract class MobSpawnerAbstract {
 
     public int spawnDelay = 20;
-    private final List<MobSpawnerData> mobs = Lists.newArrayList();
+    private final List<MobSpawnerData> mobs = new ObjectArrayList<>();
     private MobSpawnerData spawnData = new MobSpawnerData();
     private double d;
     private double e;
diff --git a/src/main/java/net/minecraft/server/NBTTagList.java b/src/main/java/net/minecraft/server/NBTTagList.java
index 576c3b7141f74168102c33b57258164c457fc04b..cf4392a6ee83c3d97661eb40662f2546713d0a89 100644
--- a/src/main/java/net/minecraft/server/NBTTagList.java
+++ b/src/main/java/net/minecraft/server/NBTTagList.java
@@ -9,11 +9,12 @@ import java.util.List;
 import java.util.Objects;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public class NBTTagList extends NBTBase {
 
     private static final Logger b = LogManager.getLogger();
-    public List<NBTBase> list = Lists.newArrayList(); // Paper
+    public List<NBTBase> list = new ObjectArrayList<>(); // Paper
     // Paper start
     public void sort(java.util.Comparator<? extends NBTBase> comparator) {
         //noinspection unchecked
diff --git a/src/main/java/net/minecraft/server/NameReferencingFileConverter.java b/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
index 874b74a8190cd3474ad6d469e20a1826cca8de8f..d6cab84d4263604e6c947aa162b9af40a6f3ffc6 100644
--- a/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
+++ b/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
@@ -29,6 +29,7 @@ import java.util.UUID;
 import javax.annotation.Nullable;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public class NameReferencingFileConverter {
 
@@ -283,7 +284,7 @@ public class NameReferencingFileConverter {
             if (gameprofile != null && gameprofile.getId() != null) {
                 return gameprofile.getId().toString();
             } else if (!minecraftserver.R() && minecraftserver.getOnlineMode()) {
-                final ArrayList arraylist = Lists.newArrayList();
+                final ArrayList arraylist = new ObjectArrayList<>();
                 ProfileLookupCallback profilelookupcallback = new ProfileLookupCallback() {
                     public void onProfileLookupSucceeded(GameProfile gameprofile) {
                         minecraftserver.getUserCache().a(gameprofile);
@@ -312,7 +313,7 @@ public class NameReferencingFileConverter {
 
         if (file.exists() && file.isDirectory()) {
             File[] afile = file.listFiles();
-            ArrayList arraylist = Lists.newArrayList();
+            ArrayList arraylist = new ObjectArrayList<>();
             File[] afile1 = afile;
             int i = afile.length;
 
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
index c797f103bf68dfe5e281ca4344a479262e9a3bb4..731d4e6594fd5533699749f281ba9a9a652d4b41 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
@@ -8,6 +8,7 @@ import java.io.IOException;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map.Entry;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
 
@@ -36,7 +37,7 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
 
         this.d = new byte[this.a(chunk, flag, i)];
         this.c = this.a(new PacketDataSerializer(this.g()), chunk, flag, i);
-        this.e = Lists.newArrayList();
+        this.e = new ObjectArrayList<>();
         Iterator iterator = chunk.getTileEntities().entrySet().iterator();
 
         // Dionysus start
@@ -104,7 +105,7 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
             packetdataserializer.readBytes(this.d);
             int j = packetdataserializer.g();
 
-            this.e = Lists.newArrayList();
+            this.e = new ObjectArrayList<>();
 
             for (int k = 0; k < j; ++k) {
                 this.e.add(packetdataserializer.j());
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutScoreboardTeam.java b/src/main/java/net/minecraft/server/PacketPlayOutScoreboardTeam.java
index df11764e04bd46fa7b58964869b5764091c2b74e..88d03b71933c2b21bb473b793be26ffb651e21fe 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutScoreboardTeam.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutScoreboardTeam.java
@@ -4,6 +4,7 @@ import com.google.common.collect.Lists;
 import java.io.IOException;
 import java.util.Collection;
 import java.util.Iterator;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public class PacketPlayOutScoreboardTeam implements Packet<PacketListenerPlayOut> {
 
@@ -22,14 +23,14 @@ public class PacketPlayOutScoreboardTeam implements Packet<PacketListenerPlayOut
         this.e = ScoreboardTeamBase.EnumNameTagVisibility.ALWAYS.e;
         this.f = ScoreboardTeamBase.EnumTeamPush.ALWAYS.e;
         this.g = -1;
-        this.h = Lists.newArrayList();
+        this.h = new ObjectArrayList<>();
     }
 
     public PacketPlayOutScoreboardTeam(ScoreboardTeam scoreboardteam, int i) {
         this.e = ScoreboardTeamBase.EnumNameTagVisibility.ALWAYS.e;
         this.f = ScoreboardTeamBase.EnumTeamPush.ALWAYS.e;
         this.g = -1;
-        this.h = Lists.newArrayList();
+        this.h = new ObjectArrayList<>();
         this.a = scoreboardteam.getName();
         this.i = i;
         if (i == 0 || i == 2) {
@@ -52,7 +53,7 @@ public class PacketPlayOutScoreboardTeam implements Packet<PacketListenerPlayOut
         this.e = ScoreboardTeamBase.EnumNameTagVisibility.ALWAYS.e;
         this.f = ScoreboardTeamBase.EnumTeamPush.ALWAYS.e;
         this.g = -1;
-        this.h = Lists.newArrayList();
+        this.h = new ObjectArrayList<>();
         if (i != 3 && i != 4) {
             throw new IllegalArgumentException("Method must be join or leave for player constructor");
         } else if (collection != null && !collection.isEmpty()) {
diff --git a/src/main/java/net/minecraft/server/PersistentCollection.java b/src/main/java/net/minecraft/server/PersistentCollection.java
index 50056f49a8eaea687d00175e41a877040934e9ae..4e655fbc8f659a90f82ca8c66e896dcb14ef5241 100644
--- a/src/main/java/net/minecraft/server/PersistentCollection.java
+++ b/src/main/java/net/minecraft/server/PersistentCollection.java
@@ -15,12 +15,13 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import javax.annotation.Nullable;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public class PersistentCollection {
 
     private final IDataManager b;
     protected Map<String, PersistentBase> a = Maps.newHashMap();
-    public final List<PersistentBase> c = Lists.newArrayList(); // Spigot
+    public final List<PersistentBase> c = new ObjectArrayList<>(); // Spigot
     private final Map<String, Short> d = Maps.newHashMap();
 
     public PersistentCollection(IDataManager idatamanager) {
diff --git a/src/main/java/net/minecraft/server/PersistentVillage.java b/src/main/java/net/minecraft/server/PersistentVillage.java
index a3aa9f82e60a4fc4e90c5a46e37b05e7e3a0b31f..23ec778e79cc4881f20972d542c82d381f00ee1d 100644
--- a/src/main/java/net/minecraft/server/PersistentVillage.java
+++ b/src/main/java/net/minecraft/server/PersistentVillage.java
@@ -4,13 +4,14 @@ import com.google.common.collect.Lists;
 import java.util.Iterator;
 import java.util.List;
 import javax.annotation.Nullable;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public class PersistentVillage extends PersistentBase {
 
     private World world;
-    private final List<BlockPosition> c = Lists.newArrayList();
-    private final List<VillageDoor> d = Lists.newArrayList();
-    private final List<Village> villages = Lists.newArrayList();
+    private final List<BlockPosition> c = new ObjectArrayList<>();
+    private final List<VillageDoor> d = new ObjectArrayList<>();
+    private final List<Village> villages = new ObjectArrayList<>();
     private int time;
 
     public PersistentVillage(String s) {
diff --git a/src/main/java/net/minecraft/server/PlayerChunk.java b/src/main/java/net/minecraft/server/PlayerChunk.java
index 963784cbbc512761f67b685f26e0e5fab48abd27..78c8af1d1d84e07dea613a2da3e23844c8bd8114 100644
--- a/src/main/java/net/minecraft/server/PlayerChunk.java
+++ b/src/main/java/net/minecraft/server/PlayerChunk.java
@@ -8,6 +8,7 @@ import java.util.List;
 import javax.annotation.Nullable;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 // CraftBukkit Start
 import org.bukkit.craftbukkit.chunkio.ChunkIOExecutor;
 // CraftBukkit end
@@ -16,7 +17,7 @@ public class PlayerChunk {
 
     private static final Logger a = LogManager.getLogger();
     private final PlayerChunkMap playerChunkMap;
-    public final List<EntityPlayer> c = Lists.newArrayList(); // CraftBukkit - public
+    public final List<EntityPlayer> c = new ObjectArrayList<>(); // CraftBukkit - public
     private final ChunkCoordIntPair location;
     private final short[] dirtyBlocks = new short[64];
     @Nullable
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index 9d836e7e12284c1c2bf72f4cc5b4c17802425835..554e3c2a63eb42f0a24f30f73cfba7b0741e20b0 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -15,6 +15,7 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
 import javax.annotation.Nullable;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
@@ -48,7 +49,7 @@ public class PlayerChunkMap {
     private final Set<PlayerChunk> f = Sets.newHashSet();
     private final List<PlayerChunk> g = Lists.newLinkedList();
     private final List<PlayerChunk> h = Lists.newLinkedList();
-    private final List<PlayerChunk> i = Lists.newArrayList();
+    private final List<PlayerChunk> i = new ObjectArrayList<>();
     private int j;public int getViewDistance() { return j; } // Paper OBFHELPER
     private long k;
     private boolean l = true;
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index 7b4adac6f21ea331c4c0c16b518fb9daa6500875..79b6790d42feac6f7b1b3464cb5e9b71706026b9 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -20,6 +20,7 @@ import java.util.UUID;
 import javax.annotation.Nullable;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 // CraftBukkit start
 import com.google.common.base.Predicate;
@@ -581,7 +582,7 @@ public abstract class PlayerList {
     public EntityPlayer attemptLogin(LoginListener loginlistener, GameProfile gameprofile, String hostname) {
         // Moved from processLogin
         UUID uuid = EntityHuman.a(gameprofile);
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
 
         EntityPlayer entityplayer;
 
@@ -659,7 +660,7 @@ public abstract class PlayerList {
     public EntityPlayer processLogin(GameProfile gameprofile, EntityPlayer player) { // CraftBukkit - added EntityPlayer
         /* CraftBukkit startMoved up
         UUID uuid = EntityHuman.a(gameprofile);
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
 
         for (int i = 0; i < this.players.size(); ++i) {
             EntityPlayer entityplayer = (EntityPlayer) this.players.get(i);
@@ -1460,7 +1461,7 @@ public abstract class PlayerList {
     }
 
     public List<EntityPlayer> b(String s) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         Iterator iterator = this.players.iterator();
 
         while (iterator.hasNext()) {
diff --git a/src/main/java/net/minecraft/server/RecipeArmorDye.java b/src/main/java/net/minecraft/server/RecipeArmorDye.java
index 123002ec75bc9605fccaee11ff33391abd7d698e..3e65b2349e34524f4eaf7a7ca7f01a2457fe56f0 100644
--- a/src/main/java/net/minecraft/server/RecipeArmorDye.java
+++ b/src/main/java/net/minecraft/server/RecipeArmorDye.java
@@ -2,6 +2,7 @@ package net.minecraft.server;
 
 import com.google.common.collect.Lists;
 import java.util.ArrayList;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public class RecipeArmorDye extends ShapelessRecipes implements IRecipe { // CraftBukkit - added extends
 
@@ -13,7 +14,7 @@ public class RecipeArmorDye extends ShapelessRecipes implements IRecipe { // Cra
 
     public boolean a(InventoryCrafting inventorycrafting, World world) {
         ItemStack itemstack = ItemStack.a;
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
 
         for (int i = 0; i < inventorycrafting.getSize(); ++i) {
             ItemStack itemstack1 = inventorycrafting.getItem(i);
diff --git a/src/main/java/net/minecraft/server/RecipeBookServer.java b/src/main/java/net/minecraft/server/RecipeBookServer.java
index f65e74ebd6998e8b6203240987984882e64403d9..f06b4948c7d16ab10021509284309a506b8f51ec 100644
--- a/src/main/java/net/minecraft/server/RecipeBookServer.java
+++ b/src/main/java/net/minecraft/server/RecipeBookServer.java
@@ -7,6 +7,7 @@ import java.util.Iterator;
 import java.util.List;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public class RecipeBookServer extends RecipeBook {
 
@@ -15,7 +16,7 @@ public class RecipeBookServer extends RecipeBook {
     public RecipeBookServer() {}
 
     public void a(List<IRecipe> list, EntityPlayer entityplayer) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         Iterator iterator = list.iterator();
 
         while (iterator.hasNext()) {
@@ -33,7 +34,7 @@ public class RecipeBookServer extends RecipeBook {
     }
 
     public void b(List<IRecipe> list, EntityPlayer entityplayer) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         Iterator iterator = list.iterator();
 
         while (iterator.hasNext()) {
@@ -120,7 +121,7 @@ public class RecipeBookServer extends RecipeBook {
     }
 
     private List<IRecipe> d() {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
 
         for (int i = this.a.nextSetBit(0); i >= 0; i = this.a.nextSetBit(i + 1)) {
             arraylist.add(CraftingManager.recipes.getId(i));
@@ -130,7 +131,7 @@ public class RecipeBookServer extends RecipeBook {
     }
 
     private List<IRecipe> e() {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
 
         for (int i = this.b.nextSetBit(0); i >= 0; i = this.b.nextSetBit(i + 1)) {
             arraylist.add(CraftingManager.recipes.getId(i));
diff --git a/src/main/java/net/minecraft/server/RecipeFireworks.java b/src/main/java/net/minecraft/server/RecipeFireworks.java
index 859900d5fc77236c8b53ac7315d35965210faf9b..3fdc501c944a4c81c38844fb77c0b82830ade3ec 100644
--- a/src/main/java/net/minecraft/server/RecipeFireworks.java
+++ b/src/main/java/net/minecraft/server/RecipeFireworks.java
@@ -2,6 +2,7 @@ package net.minecraft.server;
 
 import com.google.common.collect.Lists;
 import java.util.ArrayList;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public class RecipeFireworks extends ShapelessRecipes implements IRecipe { // CraftBukkit - added extends
 
@@ -88,7 +89,7 @@ public class RecipeFireworks extends ShapelessRecipes implements IRecipe { // Cr
                 nbttagcompound = new NBTTagCompound();
                 nbttagcompound1 = new NBTTagCompound();
                 byte b0 = 0;
-                ArrayList arraylist = Lists.newArrayList();
+                ArrayList arraylist = new ObjectArrayList<>();
 
                 for (int i2 = 0; i2 < inventorycrafting.getSize(); ++i2) {
                     ItemStack itemstack2 = inventorycrafting.getItem(i2);
@@ -124,7 +125,7 @@ public class RecipeFireworks extends ShapelessRecipes implements IRecipe { // Cr
                 this.a.setTag(nbttagcompound);
                 return true;
             } else if (j == 0 && i == 0 && l == 1 && k > 0 && k == i1) {
-                ArrayList arraylist1 = Lists.newArrayList();
+                ArrayList arraylist1 = new ObjectArrayList<>();
 
                 for (int k2 = 0; k2 < inventorycrafting.getSize(); ++k2) {
                     ItemStack itemstack3 = inventorycrafting.getItem(k2);
diff --git a/src/main/java/net/minecraft/server/RecipeRepair.java b/src/main/java/net/minecraft/server/RecipeRepair.java
index fb47f3e1a4d804c3e33e2bef5049ee0a2508899c..cbecc81e0ac0721159c0a0eb2a74be9ee1683aa3 100644
--- a/src/main/java/net/minecraft/server/RecipeRepair.java
+++ b/src/main/java/net/minecraft/server/RecipeRepair.java
@@ -2,6 +2,7 @@ package net.minecraft.server;
 
 import com.google.common.collect.Lists;
 import java.util.ArrayList;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public class RecipeRepair extends ShapelessRecipes implements IRecipe { // CraftBukkit - added extends
 
@@ -12,7 +13,7 @@ public class RecipeRepair extends ShapelessRecipes implements IRecipe { // Craft
     // CraftBukkit end
 
     public boolean a(InventoryCrafting inventorycrafting, World world) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
 
         for (int i = 0; i < inventorycrafting.getSize(); ++i) {
             ItemStack itemstack = inventorycrafting.getItem(i);
@@ -33,7 +34,7 @@ public class RecipeRepair extends ShapelessRecipes implements IRecipe { // Craft
     }
 
     public ItemStack craftItem(InventoryCrafting inventorycrafting) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
 
         ItemStack itemstack;
 
diff --git a/src/main/java/net/minecraft/server/ScoreboardServer.java b/src/main/java/net/minecraft/server/ScoreboardServer.java
index 9d13068f3efa8d2cd4adc0cb940f7b4c9ab82796..52d7062d9411928ea9d5f133ff7af810f991079c 100644
--- a/src/main/java/net/minecraft/server/ScoreboardServer.java
+++ b/src/main/java/net/minecraft/server/ScoreboardServer.java
@@ -7,6 +7,7 @@ import java.util.Arrays;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public class ScoreboardServer extends Scoreboard {
 
@@ -139,7 +140,7 @@ public class ScoreboardServer extends Scoreboard {
     }
 
     public List<Packet<?>> getScoreboardScorePacketsForObjective(ScoreboardObjective scoreboardobjective) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
 
         arraylist.add(new PacketPlayOutScoreboardObjective(scoreboardobjective, 0));
 
@@ -180,7 +181,7 @@ public class ScoreboardServer extends Scoreboard {
     }
 
     public List<Packet<?>> f(ScoreboardObjective scoreboardobjective) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
 
         arraylist.add(new PacketPlayOutScoreboardObjective(scoreboardobjective, 1));
 
diff --git a/src/main/java/net/minecraft/server/ServerConnection.java b/src/main/java/net/minecraft/server/ServerConnection.java
index e68112d39b6fc38bfdbe6e503a7c9d1bd1bdfb31..287330f383bcd6b282d55a08dc0177decc130991 100644
--- a/src/main/java/net/minecraft/server/ServerConnection.java
+++ b/src/main/java/net/minecraft/server/ServerConnection.java
@@ -27,6 +27,7 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Queue;
 import java.util.concurrent.ConcurrentLinkedQueue;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 import it.unimi.dsi.util.XoShiRo256PlusPlusRandom;
 import org.apache.logging.log4j.LogManager;
@@ -64,8 +65,8 @@ public class ServerConnection {
     };
     private final MinecraftServer f;
     public volatile boolean d;
-    private final List<ChannelFuture> g = Collections.synchronizedList(Lists.newArrayList());
-    private final List<NetworkManager> h = Collections.synchronizedList(Lists.newArrayList());
+    private final List<ChannelFuture> g = Collections.synchronizedList(new ObjectArrayList<>());
+    private final List<NetworkManager> h = Collections.synchronizedList(new ObjectArrayList<>());
     // Paper start - prevent blocking on adding a new network manager while the server is ticking
     private final Queue<NetworkManager> pending = new ConcurrentLinkedQueue<>();
     private static final boolean disableFlushConsolidation = Boolean.getBoolean("Paper.disableFlushConsolidate"); // Paper
diff --git a/src/main/java/net/minecraft/server/ServerStatisticManager.java b/src/main/java/net/minecraft/server/ServerStatisticManager.java
index e3d2c0ff737bce159fb3b81e466a76e2a929c009..19ce9422c8620cd815be6697f40edd24f12e4f28 100644
--- a/src/main/java/net/minecraft/server/ServerStatisticManager.java
+++ b/src/main/java/net/minecraft/server/ServerStatisticManager.java
@@ -18,6 +18,7 @@ import java.util.Map.Entry;
 import org.apache.commons.io.FileUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public class ServerStatisticManager extends StatisticManager {
 
@@ -86,7 +87,7 @@ public class ServerStatisticManager extends StatisticManager {
             JsonObject jsonobject = jsonelement.getAsJsonObject();
             HashMap hashmap = Maps.newHashMap();
             Iterator iterator = jsonobject.entrySet().iterator();
-            java.util.List<String> invalidStats = com.google.common.collect.Lists.newArrayList(); // Paper
+            java.util.List<String> invalidStats = com.google.common.collect.new ObjectArrayList<>(); // Paper
 
             while (iterator.hasNext()) {
                 Entry entry = (Entry) iterator.next();
diff --git a/src/main/java/net/minecraft/server/TileEntityBeacon.java b/src/main/java/net/minecraft/server/TileEntityBeacon.java
index a57b1717105839b6254ef92cc8975a690b7d02f7..0e9c7859709f514cb0c9aaae7170d16a589d6caf 100644
--- a/src/main/java/net/minecraft/server/TileEntityBeacon.java
+++ b/src/main/java/net/minecraft/server/TileEntityBeacon.java
@@ -8,6 +8,7 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
 import javax.annotation.Nullable;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 // CraftBukkit start
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
@@ -28,7 +29,7 @@ public class TileEntityBeacon extends TileEntityContainer implements ITickable,
 
     public static final MobEffectList[][] a = new MobEffectList[][] { { MobEffects.FASTER_MOVEMENT, MobEffects.FASTER_DIG}, { MobEffects.RESISTANCE, MobEffects.JUMP}, { MobEffects.INCREASE_DAMAGE}, { MobEffects.REGENERATION}};
     private static final Set<MobEffectList> f = Sets.newHashSet();
-    private final List<TileEntityBeacon.BeaconColorTracker> g = Lists.newArrayList();
+    private final List<TileEntityBeacon.BeaconColorTracker> g = new ObjectArrayList<>();
     private boolean j;
     public int levels = -1;
     @Nullable
diff --git a/src/main/java/net/minecraft/server/TileEntityStructure.java b/src/main/java/net/minecraft/server/TileEntityStructure.java
index cda58ee244abceba5301c03c1a2ce7ef4a6e8176..61fdec70baf5eadd78a81fb509ec8abc3cada1b8 100644
--- a/src/main/java/net/minecraft/server/TileEntityStructure.java
+++ b/src/main/java/net/minecraft/server/TileEntityStructure.java
@@ -7,6 +7,7 @@ import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import javax.annotation.Nullable;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public class TileEntityStructure extends TileEntity {
 
@@ -256,7 +257,7 @@ public class TileEntityStructure extends TileEntity {
     }
 
     private List<TileEntityStructure> a(BlockPosition blockposition, BlockPosition blockposition1) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         Iterator iterator = BlockPosition.b(blockposition, blockposition1).iterator();
 
         while (iterator.hasNext()) {
diff --git a/src/main/java/net/minecraft/server/UserCache.java b/src/main/java/net/minecraft/server/UserCache.java
index da7a4525f611527eae1be2e60d1afa9933b91c42..f6c8cff91e8f0bd4ccdbfbba20ff822d49ed619f 100644
--- a/src/main/java/net/minecraft/server/UserCache.java
+++ b/src/main/java/net/minecraft/server/UserCache.java
@@ -40,6 +40,7 @@ import java.util.Map;
 import java.util.UUID;
 import javax.annotation.Nullable;
 import org.apache.commons.io.IOUtils;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public class UserCache {
 
@@ -267,7 +268,7 @@ public class UserCache {
     }
 
     private List<UserCache.UserCacheEntry> a(int i) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         ArrayList arraylist1 = Lists.newArrayList(Iterators.limit(this.f.iterator(), i));
         Iterator iterator = arraylist1.iterator();
 
diff --git a/src/main/java/net/minecraft/server/Village.java b/src/main/java/net/minecraft/server/Village.java
index 061102419e0c8670b0a24bec2cde3fadfb3d6d06..d9544e31ad53c8d5cf345220b08910f3daada737 100644
--- a/src/main/java/net/minecraft/server/Village.java
+++ b/src/main/java/net/minecraft/server/Village.java
@@ -9,11 +9,12 @@ import java.util.List;
 import java.util.Map;
 import java.util.UUID;
 import javax.annotation.Nullable;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public class Village {
 
     private World a;
-    private final List<VillageDoor> b = Lists.newArrayList();
+    private final List<VillageDoor> b = new ObjectArrayList<>();
     private BlockPosition c;
     private BlockPosition d; private BlockPosition getCenter() { return d; } // Paper - OBFHELPER
     private int e;
@@ -29,14 +30,14 @@ public class Village {
         this.c = BlockPosition.ZERO;
         this.d = BlockPosition.ZERO;
         this.j = Maps.newHashMap();
-        this.k = Lists.newArrayList();
+        this.k = new ObjectArrayList<>();
     }
 
     public Village(World world) {
         this.c = BlockPosition.ZERO;
         this.d = BlockPosition.ZERO;
         this.j = Maps.newHashMap();
-        this.k = Lists.newArrayList();
+        this.k = new ObjectArrayList<>();
         this.a = world;
     }
 
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 2555d76316c534a4c31dd1d17a2638c47cbaefe9..12b103f313f132963dc1ced3300751f5911d4e82 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -32,6 +32,7 @@ import org.bukkit.event.block.BlockCanBuildEvent;
 import org.bukkit.event.block.BlockPhysicsEvent;
 import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
 import org.bukkit.generator.ChunkGenerator;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 // CraftBukkit end
 
 // Paper start
@@ -70,12 +71,12 @@ public abstract class World implements IBlockAccess {
     };
     // Spigot end
     protected final Set<Entity> f = Sets.newHashSet(); // Paper
-    //public final List<TileEntity> tileEntityList = Lists.newArrayList(); // Paper - remove unused list
-    public final List<TileEntity> tileEntityListTick = Lists.newArrayList();
-    private final List<TileEntity> b = Lists.newArrayList();
+    //public final List<TileEntity> tileEntityList = new ObjectArrayList<>(); // Paper - remove unused list
+    public final List<TileEntity> tileEntityListTick = new ObjectArrayList<>();
+    private final List<TileEntity> b = new ObjectArrayList<>();
     private final Set<TileEntity> tileEntityListUnload = Sets.newHashSet(); // Paper
-    public final List<EntityHuman> players = Lists.newArrayList();
-    public final List<Entity> j = Lists.newArrayList();
+    public final List<EntityHuman> players = new ObjectArrayList<>();
+    public final List<Entity> j = new ObjectArrayList<>();
     protected final IntHashMap<Entity> entitiesById = new IntHashMap();
     private final long K = 16777215L;
     private int L; private int getSkylightSubtracted() { return this.L; } // Paper - OBFHELPER
@@ -1368,7 +1369,7 @@ public abstract class World implements IBlockAccess {
     }
 
     public List<AxisAlignedBB> getCubes(@Nullable Entity entity, AxisAlignedBB axisalignedbb) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
 
         this.a(entity, axisalignedbb, false, arraylist);
         if (entity != null) {
@@ -2620,7 +2621,7 @@ public abstract class World implements IBlockAccess {
     }
 
     public List<Entity> getEntities(@Nullable Entity entity, AxisAlignedBB axisalignedbb, @Nullable Predicate<? super Entity> predicate) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         int i = MathHelper.floor((axisalignedbb.a - 2.0D) / 16.0D);
         int j = MathHelper.floor((axisalignedbb.d + 2.0D) / 16.0D);
         int k = MathHelper.floor((axisalignedbb.c - 2.0D) / 16.0D);
@@ -2638,7 +2639,7 @@ public abstract class World implements IBlockAccess {
     }
 
     public <T extends Entity> List<T> a(Class<? extends T> oclass, Predicate<? super T> predicate) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         Iterator iterator = this.entityList.iterator();
 
         while (iterator.hasNext()) {
@@ -2654,7 +2655,7 @@ public abstract class World implements IBlockAccess {
     }
 
     public <T extends Entity> List<T> b(Class<? extends T> oclass, Predicate<? super T> predicate) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         Iterator iterator = this.players.iterator();
 
         while (iterator.hasNext()) {
@@ -2677,7 +2678,7 @@ public abstract class World implements IBlockAccess {
         int j = MathHelper.f((axisalignedbb.d + 2.0D) / 16.0D);
         int k = MathHelper.floor((axisalignedbb.c - 2.0D) / 16.0D);
         int l = MathHelper.f((axisalignedbb.f + 2.0D) / 16.0D);
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
 
         for (int i1 = i; i1 < j; ++i1) {
             for (int j1 = k; j1 < l; ++j1) {
diff --git a/src/main/java/net/minecraft/server/WorldBorder.java b/src/main/java/net/minecraft/server/WorldBorder.java
index f404894d56c89a5a085e48e2b4199edae9a86ddd..5106cca5f8a46a1a7f89d4225cf1b08c448df4b0 100644
--- a/src/main/java/net/minecraft/server/WorldBorder.java
+++ b/src/main/java/net/minecraft/server/WorldBorder.java
@@ -3,10 +3,11 @@ package net.minecraft.server;
 import com.google.common.collect.Lists;
 import java.util.Iterator;
 import java.util.List;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public class WorldBorder {
 
-    private final List<IWorldBorderListener> a = Lists.newArrayList();
+    private final List<IWorldBorderListener> a = new ObjectArrayList<>();
     private double b;
     private double c;
     private double d = 6.0E7D;
diff --git a/src/main/java/net/minecraft/server/WorldGenLargeFeature.java b/src/main/java/net/minecraft/server/WorldGenLargeFeature.java
index 7a76544ff8c69f2b33e41b6729dcf769f0d54eff..9731eb0955c4a4bdcf92981ccd16367a08c2e4c8 100644
--- a/src/main/java/net/minecraft/server/WorldGenLargeFeature.java
+++ b/src/main/java/net/minecraft/server/WorldGenLargeFeature.java
@@ -7,6 +7,7 @@ import java.util.List;
 import java.util.Map;
 import java.util.Random;
 import java.util.Map.Entry;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public class WorldGenLargeFeature extends StructureGenerator {
 
@@ -16,7 +17,7 @@ public class WorldGenLargeFeature extends StructureGenerator {
     private final int h;
 
     public WorldGenLargeFeature() {
-        this.b = Lists.newArrayList();
+        this.b = new ObjectArrayList<>();
         this.d = 32;
         this.h = 8;
         this.b.add(new BiomeBase.BiomeMeta(EntityWitch.class, 1, 1, 1));
diff --git a/src/main/java/net/minecraft/server/WorldGenMonument.java b/src/main/java/net/minecraft/server/WorldGenMonument.java
index 927d9bc6b4efa78684fcb4d2afe555c57ea0e170..b30d5ad0039903de6522030fbccde653cd46f29c 100644
--- a/src/main/java/net/minecraft/server/WorldGenMonument.java
+++ b/src/main/java/net/minecraft/server/WorldGenMonument.java
@@ -9,6 +9,7 @@ import java.util.Map;
 import java.util.Random;
 import java.util.Set;
 import java.util.Map.Entry;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public class WorldGenMonument extends StructureGenerator {
 
@@ -16,7 +17,7 @@ public class WorldGenMonument extends StructureGenerator {
     private int h;
     public static final List<BiomeBase> a = Arrays.asList(new BiomeBase[] { Biomes.a, Biomes.z, Biomes.i, Biomes.l, Biomes.m});
     public static final List<BiomeBase> b = Arrays.asList(new BiomeBase[] { Biomes.z});
-    private static final List<BiomeBase.BiomeMeta> i = Lists.newArrayList();
+    private static final List<BiomeBase.BiomeMeta> i = new ObjectArrayList<>();
 
     public WorldGenMonument() {
         this.d = 32;
diff --git a/src/main/java/net/minecraft/server/WorldGenStronghold.java b/src/main/java/net/minecraft/server/WorldGenStronghold.java
index 595ecb9052b8ab62c52f8dbcad6f565660119342..f325022a67f9bc2af7d6937f99c92986a13dcefd 100644
--- a/src/main/java/net/minecraft/server/WorldGenStronghold.java
+++ b/src/main/java/net/minecraft/server/WorldGenStronghold.java
@@ -7,6 +7,7 @@ import java.util.List;
 import java.util.Map;
 import java.util.Random;
 import java.util.Map.Entry;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public class WorldGenStronghold extends StructureGenerator {
 
@@ -20,7 +21,7 @@ public class WorldGenStronghold extends StructureGenerator {
         this.d = new ChunkCoordIntPair[128];
         this.h = 32.0D;
         this.i = 3;
-        this.a = Lists.newArrayList();
+        this.a = new ObjectArrayList<>();
         Iterator iterator = BiomeBase.REGISTRY_ID.iterator();
 
         while (iterator.hasNext()) {
diff --git a/src/main/java/net/minecraft/server/WorldGenVillagePieces.java b/src/main/java/net/minecraft/server/WorldGenVillagePieces.java
index 9b281b6a9634081e0907b6fc2991cb92389a2a11..ec73b920f610e98db3983ddb7c2f969b1acca377 100644
--- a/src/main/java/net/minecraft/server/WorldGenVillagePieces.java
+++ b/src/main/java/net/minecraft/server/WorldGenVillagePieces.java
@@ -6,6 +6,7 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
 import javax.annotation.Nullable;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 public class WorldGenVillagePieces {
 
@@ -26,7 +27,7 @@ public class WorldGenVillagePieces {
     }
 
     public static List<WorldGenVillagePieces.WorldGenVillagePieceWeight> a(Random random, int i) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
 
         arraylist.add(new WorldGenVillagePieces.WorldGenVillagePieceWeight(WorldGenVillagePieces.WorldGenVillageHouse.class, 4, MathHelper.nextInt(random, 2 + i, 4 + i * 2)));
         arraylist.add(new WorldGenVillagePieces.WorldGenVillagePieceWeight(WorldGenVillagePieces.WorldGenVillageTemple.class, 20, MathHelper.nextInt(random, 0 + i, 1 + i)));
@@ -1455,8 +1456,8 @@ public class WorldGenVillagePieces {
         public int b;
         public WorldGenVillagePieces.WorldGenVillagePieceWeight c;
         public List<WorldGenVillagePieces.WorldGenVillagePieceWeight> d;
-        public List<StructurePiece> e = Lists.newArrayList();
-        public List<StructurePiece> f = Lists.newArrayList();
+        public List<StructurePiece> e = new ObjectArrayList<>();
+        public List<StructurePiece> f = new ObjectArrayList<>();
 
         public WorldGenVillageStartPiece() {}
 
diff --git a/src/main/java/net/minecraft/server/WorldMap.java b/src/main/java/net/minecraft/server/WorldMap.java
index 6d86d2c1a4a86448dfc0a71e508b39af3fe7085a..763339ce9b5abfa1830bbc0ba5d2ca2614b9fd47 100644
--- a/src/main/java/net/minecraft/server/WorldMap.java
+++ b/src/main/java/net/minecraft/server/WorldMap.java
@@ -7,6 +7,7 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import javax.annotation.Nullable;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 // CraftBukkit start
 import java.util.UUID;
@@ -29,7 +30,7 @@ public class WorldMap extends PersistentBase {
     public boolean unlimitedTracking;
     public byte scale;
     public byte[] colors = new byte[16384];
-    public List<WorldMap.WorldMapHumanTracker> i = Lists.newArrayList();
+    public List<WorldMap.WorldMapHumanTracker> i = new ObjectArrayList<>();
     public final Map<EntityHuman, WorldMap.WorldMapHumanTracker> k = Maps.newHashMap(); // Spigot private -> public
     public Map<UUID, MapIcon> decorations = Maps.newLinkedHashMap(); // Spigot
     private org.bukkit.craftbukkit.map.RenderData vanillaRender = new org.bukkit.craftbukkit.map.RenderData(); // Paper
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 629b04da5973730468b6d8225df0008c6b578a93..8f7406fca2a893c8e0f8f6d5e0ee002c36cbe55b 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -20,6 +20,7 @@ import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 // CraftBukkit start
 import java.util.logging.Level;
@@ -51,7 +52,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
     protected final VillageSiege siegeManager = new VillageSiege(this);
     private final WorldServer.BlockActionDataList[] U = new WorldServer.BlockActionDataList[] { new WorldServer.BlockActionDataList(null), new WorldServer.BlockActionDataList(null)};
     private int V;
-    private final List<NextTickListEntry> W = Lists.newArrayList();
+    private final List<NextTickListEntry> W = new ObjectArrayList<>();
 
     // CraftBukkit start
     private static final boolean DEBUG_ENTITIES = Boolean.getBoolean("debug.entities"); // Paper
@@ -836,7 +837,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                     }
 
                     if (arraylist == null) {
-                        arraylist = Lists.newArrayList();
+                        arraylist = new ObjectArrayList<>();
                     }
 
                     arraylist.add(nextticklistentry);
@@ -890,7 +891,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
     }
 
     public List<TileEntity> getTileEntities(int i, int j, int k, int l, int i1, int j1) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
 
         // CraftBukkit start - Get tile entities from chunks instead of world
         for (int chunkX = (i >> 4); chunkX <= ((l - 1) >> 4); chunkX++) {
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index a1be7ec490ccd24ce435ee383287fc0e6b4e7976..7103928ceab6d9f06dd176abefd4126e142cabb4 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -38,6 +38,7 @@ import org.bukkit.craftbukkit.CraftStatistic;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.util.StringUtil;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 @SuppressWarnings("deprecation")
 public final class CraftMagicNumbers implements UnsafeValues {
@@ -115,7 +116,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
 
     @Override
     public List<String> tabCompleteInternalMaterialName(String token, List<String> completions) {
-        ArrayList<String> results = Lists.newArrayList();
+        ArrayList<String> results = new ObjectArrayList<>();
         for (MinecraftKey key : (Set<MinecraftKey>)Item.REGISTRY.keySet()) {
             results.add(key.toString());
         }
diff --git a/src/test/java/org/bukkit/PerMaterialTest.java b/src/test/java/org/bukkit/PerMaterialTest.java
index 1859afc7303a777dfd0eced37cb93f77b4f517b2..9ff2e5652bcc7cc09d7378b5200d4acfc7fa74a2 100644
--- a/src/test/java/org/bukkit/PerMaterialTest.java
+++ b/src/test/java/org/bukkit/PerMaterialTest.java
@@ -22,6 +22,7 @@ import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 import org.junit.runners.Parameterized.Parameter;
 import org.junit.runners.Parameterized.Parameters;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 
 import com.google.common.collect.Lists;
 import java.util.Map;
@@ -41,7 +42,7 @@ public class PerMaterialTest extends AbstractTestingBase {
 
     @Parameters(name= "{index}: {0}")
     public static List<Object[]> data() {
-        List<Object[]> list = Lists.newArrayList();
+        List<Object[]> list = new ObjectArrayList<>();
         for (Material material : Material.values()) {
             list.add(new Object[] {material});
         }
diff --git a/src/zxcv.txt b/src/zxcv.txt
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
