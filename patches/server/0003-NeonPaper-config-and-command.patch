From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: KurumiFake <kurumiisshidowife@gmail.com>
Date: Sun, 27 Mar 2022 10:27:19 +0700
Subject: [PATCH] NeonPaper config and command


diff --git a/src/main/java/me/hungnguyennaz/neonpaper/NeonPaperCommand.java b/src/main/java/me/hungnguyennaz/neonpaper/NeonPaperCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..ac5b87edd1c918a0f088bde4d0e98b1ff331a22f
--- /dev/null
+++ b/src/main/java/me/hungnguyennaz/neonpaper/NeonPaperCommand.java
@@ -0,0 +1,59 @@
+package me.hungnguyennaz.neonpaper;
+
+import com.google.common.collect.ImmutableList;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.ChatColor;
+import org.bukkit.Location;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.bukkit.util.StringUtil;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.List;
+
+public class NeonPaperCommand extends Command {
+    private static final List<String> SUBCOMMANDS = ImmutableList.of("reload", "version");
+
+    public NeonPaperCommand() {
+        super("neonpaper");
+        this.description = "NeonPaper related commands";
+        this.usageMessage = "/neonpaper [reload | version]";
+        this.setPermission("bukkit.command.neonpaper");
+    }
+
+    @Override
+    public List<String> tabComplete(CommandSender sender, String alias, String[] args, Location location) throws IllegalArgumentException {
+        if (args.length == 1) {
+            return StringUtil.copyPartialMatches(args[0], SUBCOMMANDS,
+                    new ArrayList<>(SUBCOMMANDS.size()));
+        }
+        return ImmutableList.of();
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+        if (!testPermission(sender)) return true;
+
+        if (args.length != 1) {
+            sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
+            return true;
+        }
+
+        if (args[0].equalsIgnoreCase("reload")) {
+            Command.broadcastCommandMessage(sender, ChatColor.RED + "Please note that this command is not supported and may cause issues.");
+            Command.broadcastCommandMessage(sender, ChatColor.RED + "If you encounter any issues please use the /stop command to restart your server.");
+
+            MinecraftServer console = MinecraftServer.getServer();
+            NeonPaperConfig.init((File) console.options.valueOf("neonpaper-settings"));
+            console.server.reloadCount++;
+
+            Command.broadcastCommandMessage(sender, ChatColor.GREEN + "NeonPaper config reload complete.");
+        } else if (args[0].equalsIgnoreCase("version")) {
+            Command.broadcastCommandMessage(sender, "This server is running " + Bukkit.getName() + " version " + Bukkit.getVersion() + " (Implementing API version " + Bukkit.getBukkitVersion() + ")");
+        }
+
+        return true;
+    }
+}
diff --git a/src/main/java/me/hungnguyennaz/neonpaper/NeonPaperConfig.java b/src/main/java/me/hungnguyennaz/neonpaper/NeonPaperConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..ce84697c32facc620e4562ce7f65b6a9a668f07a
--- /dev/null
+++ b/src/main/java/me/hungnguyennaz/neonpaper/NeonPaperConfig.java
@@ -0,0 +1,177 @@
+package me.hungnguyennaz.neonpaper;
+
+import com.google.common.base.Throwables;
+import com.google.common.collect.ImmutableMap;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.TimeUnit;
+import java.util.logging.Level;
+import java.util.regex.Pattern;
+
+public class NeonPaperConfig {
+
+    private static final String HEADER = "Configuration file for NeonPaper";
+    private static final Pattern SPACE = Pattern.compile(" ");
+    private static final Pattern NOT_NUMERIC = Pattern.compile("[^-\\d.]");
+    /*========================================================================*/
+    public static YamlConfiguration config;
+    /*========================================================================*/
+    static int version;
+    static Map<String, Command> commands;
+    private static File CONFIG_FILE;
+    private static boolean verbose;
+
+    public static void init(File configFile) {
+        CONFIG_FILE = configFile;
+        config = new YamlConfiguration();
+        try {
+            config.load(CONFIG_FILE);
+        } catch (IOException ex) {
+            // continue
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load neonpaper.yml, please correct your syntax errors", ex);
+            throw Throwables.propagate(ex);
+        }
+        config.options().header(HEADER);
+        config.options().copyDefaults(true);
+        verbose = getBoolean("verbose", false);
+
+        commands = ImmutableMap.of("neonpaper", new NeonPaperCommand());
+
+        version = getInt("config-version", 1);
+        set("config-version", 1);
+        readConfig(NeonPaperConfig.class, null);
+    }
+
+    protected static void logError(String s) {
+        Bukkit.getLogger().severe(s);
+    }
+
+    protected static void log(String s) {
+        if (verbose) {
+            Bukkit.getLogger().info(s);
+        }
+    }
+
+    public static void registerCommands() {
+        for (Map.Entry<String, Command> entry : commands.entrySet()) {
+            MinecraftServer.getServer().server.getCommandMap().register(entry.getKey(), "NeonPaper", entry.getValue());
+        }
+    }
+
+    static void readConfig(Class<?> clazz, Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(instance);
+                    } catch (InvocationTargetException ex) {
+                        throw Throwables.propagate(ex.getCause());
+                    } catch (Exception ex) {
+                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+                    }
+                }
+            }
+        }
+
+        try {
+            config.save(CONFIG_FILE);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+        }
+    }
+
+    public static int getSeconds(String str) {
+        str = SPACE.matcher(str).replaceAll("");
+        final char unit = str.charAt(str.length() - 1);
+        str = NOT_NUMERIC.matcher(str).replaceAll("");
+        double num;
+        try {
+            num = Double.parseDouble(str);
+        } catch (Exception e) {
+            num = 0D;
+        }
+        switch (unit) {
+            case 'd':
+                num *= (double) 60 * 60 * 24;
+                break;
+            case 'h':
+                num *= (double) 60 * 60;
+                break;
+            case 'm':
+                num *= 60;
+                break;
+            default:
+            case 's':
+                break;
+        }
+        return (int) num;
+    }
+
+    protected static String timeSummary(int seconds) {
+        String time = "";
+
+        if (seconds > 60 * 60 * 24) {
+            time += TimeUnit.SECONDS.toDays(seconds) + "d";
+            seconds %= 60 * 60 * 24;
+        }
+
+        if (seconds > 60 * 60) {
+            time += TimeUnit.SECONDS.toHours(seconds) + "h";
+            seconds %= 60 * 60;
+        }
+
+        if (seconds > 0) {
+            time += TimeUnit.SECONDS.toMinutes(seconds) + "m";
+        }
+        return time;
+    }
+
+    private static void set(String path, Object val) {
+        config.set(path, val);
+    }
+
+    private static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    private static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+    }
+
+    private static long getLong(final String path, final long dfl) {
+        config.addDefault(path, Long.valueOf(dfl));
+        return config.getLong(path, dfl);
+    }
+
+    private static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+
+    private static <T> List<T> getList(String path, T def) {
+        config.addDefault(path, def);
+        return (List<T>) config.getList(path, config.getList(path));
+    }
+
+    private static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+
+}
diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index 9779311d21d2df5db7828e470303f0250ef9fa0a..cf4ec9ea40afeea4dfd7ad2c03cba57ebd522c44 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -205,6 +205,10 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
             dev.pomf.dionysus.DionysusConfig.init((File) options.valueOf("dionysus-settings"));
             dev.pomf.dionysus.DionysusConfig.registerCommands();
             // Dionysus end
+            // NeonPaper start
+            me.hungnguyennaz.neonpaper.NeonPaperConfig.init((File) options.valueOf("neonpaper-settings"));
+            me.hungnguyennaz.neonpaper.NeonPaperConfig.registerCommands();
+            // NeonPaper end
 
             DedicatedServer.LOGGER.info("Generating keypair");
             this.a(MinecraftEncryption.b());
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 8fb7d1d5ee5621cd0a626f5ba620af919bffb4f0..6e98357dc8b6809d89a0ce7fa0142a486d90c625 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -744,6 +744,7 @@ public final class CraftServer implements Server {
         org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
         com.destroystokyo.paper.PaperConfig.init((File) console.options.valueOf("paper-settings")); // Paper
         dev.pomf.dionysus.DionysusConfig.init((File) console.options.valueOf("dionysus-settings")); // Dionysus
+        me.hungnguyennaz.neonpaper.NeonPaperConfig.init((File) console.options.valueOf("neonpaper-settings")); // NeonPaper
         for (WorldServer world : console.worlds) {
             world.worldData.setDifficulty(difficulty);
             world.setSpawnFlags(monsters, animals);
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 21b2c51bba1b7ab1f2fd8126ebc9cd4faccb90b0..4c55c3583b223310b5f686a9abb0d9626ba03678 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -151,6 +151,14 @@ public class Main {
                         .defaultsTo(new File("dionysus.yml"))
                         .describedAs("Yml file");
                 // Dionysus end
+
+                // NeonPaper start
+                acceptsAll(asList("neonpaper", "neonpaper-settings"), "File for neonpaper settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("neonpaper.yml"))
+                        .describedAs("Yml file");
+                // NeonPaper end
             }
         };
 
