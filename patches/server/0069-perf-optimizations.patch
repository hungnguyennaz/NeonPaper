From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From:Softik Lord <dimap9986@gmail.com>
Date: Thu, 14 Jul 2022 02:48:25 +0500
Subject: [PATCH] perf: optimizations

Micro-optimizations.
Removed unused code.
Removed clientside code.
Removed DEBUG_ALL_BLOCK_STATES world type.
Removed MethodProfiler.

diff --git a/src/main/java/com/destroystokyo/paper/PaperCommand.java b/src/main/java/com/destroystokyo/paper/PaperCommand.java
index 1898ab897ce0004e297ed81629c5aa54d8ae4dc1..5615a019962dc08ee2aa9833e46504d14e1abeab 100644
--- a/src/main/java/com/destroystokyo/paper/PaperCommand.java
+++ b/src/main/java/com/destroystokyo/paper/PaperCommand.java
@@ -154,7 +154,7 @@ public class PaperCommand extends Command {
                             .sorted((a, b) -> !a.getRight().equals(b.getRight()) ? b.getRight() - a.getRight() : a.getKey().toString().compareTo(b.getKey().toString()))
                             .collect(Collectors.toList());
 
-                    if (info == null || info.size() == 0) {
+                    if (info.size() == 0) { // NeonPaper - Optimize
                         sender.sendMessage(ChatColor.RED + "No entities found.");
                         return;
                     }
diff --git a/src/main/java/com/github/ruviolence/NeonPaper/IdentityStrategy.java b/src/main/java/com/github/ruviolence/NeonPaper/IdentityStrategy.java
new file mode 100644
index 0000000000000000000000000000000000000000..b3848b1eb027731b2a8adcdcbdb1967c54eab6be
--- /dev/null
+++ b/src/main/java/me/hungnguyennaz/neonpaper/IdentityStrategy.java
@@ -0,0 +1,15 @@
+package com.github.ruviolence.NeonPaper;
+
+import it.unimi.dsi.fastutil.Hash;
+
+public class IdentityStrategy<T> implements Hash.Strategy<T> {
+    @Override
+    public int hashCode(T o) {
+        return System.identityHashCode(o);
+    }
+
+    @Override
+    public boolean equals(T block, T otherBlock) {
+        return System.identityHashCode(block) == System.identityHashCode(otherBlock);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Advancement.java b/src/main/java/net/minecraft/server/Advancement.java
index 9d957f5ee576242467f198bfe77cf89de844a53d..a1612aec7bfe755fe57ec8fbde8122b5c8261588 100644
--- a/src/main/java/net/minecraft/server/Advancement.java
+++ b/src/main/java/net/minecraft/server/Advancement.java
@@ -177,7 +177,7 @@ public class Advancement {
                 int k = astring1.length;
 
                 for (int l = 0; l < k; ++l) {
-                    String s = astring2[l];
+                    String s = astring1[l]; // NeonPaper - Inline
 
                     packetdataserializer.a(s);
                 }
@@ -242,7 +242,7 @@ public class Advancement {
                     l = astring2.length;
 
                     for (int i1 = 0; i1 < l; ++i1) {
-                        String s1 = astring3[i1];
+                        String s1 = astring2[i1]; // NeonPaper - Inline
 
                         if (!map.containsKey(s1)) {
                             throw new JsonSyntaxException("Unknown required criterion \'" + s1 + "\'");
@@ -262,7 +262,7 @@ public class Advancement {
 
                     while (true) {
                         if (l < j1) {
-                            String[] astring5 = astring4[l];
+                            String[] astring5 = astring[l]; // NeonPaper - Inline
 
                             if (!ArrayUtils.contains(astring5, s2)) {
                                 ++l;
diff --git a/src/main/java/net/minecraft/server/Advancements.java b/src/main/java/net/minecraft/server/Advancements.java
index 79daad1919dd76a00aaf95e225bf0be48b557a12..e642afe93fb82db55d79cb32507168725ee1f469 100644
--- a/src/main/java/net/minecraft/server/Advancements.java
+++ b/src/main/java/net/minecraft/server/Advancements.java
@@ -17,7 +17,7 @@ public class Advancements {
     private static final Logger a = LogManager.getLogger();
     public final Map<MinecraftKey, Advancement> advancements = Maps.newHashMap();
     private final Set<Advancement> c = Sets.newLinkedHashSet();
-    private final Set<Advancement> d = Sets.newLinkedHashSet();
+    // private final Set<Advancement> d = Collections.emptySet(); // NeonPaper - Optimize unused
     private Advancements.a e;
 
     public Advancements() {}
@@ -49,7 +49,7 @@ public class Advancements {
                             this.e.a(advancement);
                         }
                     } else {
-                        this.d.add(advancement);
+                        // this.d.add(advancement); // NeonPaper - Optimize unused
                         if (this.e != null) {
                             this.e.c(advancement);
                         }
@@ -77,7 +77,7 @@ public class Advancements {
     public void a() {
         this.advancements.clear();
         this.c.clear();
-        this.d.clear();
+        // this.d.clear(); // NeonPaper - Optimize unused
         if (this.e != null) {
             this.e.a();
         }
diff --git a/src/main/java/net/minecraft/server/BaseBlockPosition.java b/src/main/java/net/minecraft/server/BaseBlockPosition.java
index 8e737718ee517d60b36ff0489d074c26c4ee67c4..4470d26a7dfad1c75774b77dae08d163c874138e 100644
--- a/src/main/java/net/minecraft/server/BaseBlockPosition.java
+++ b/src/main/java/net/minecraft/server/BaseBlockPosition.java
@@ -38,16 +38,16 @@ public class BaseBlockPosition implements Comparable<BaseBlockPosition> {
         } else {
             BaseBlockPosition baseblockposition = (BaseBlockPosition) object;
 
-            return this.getX() != baseblockposition.getX() ? false : (this.getY() != baseblockposition.getY() ? false : this.getZ() == baseblockposition.getZ());
+            return this.a != baseblockposition.a ? false : (this.b != baseblockposition.b ? false : this.c == baseblockposition.c); // NeonPaper - Optimize BlockPosition
         }
     }
 
     public int hashCode() {
-        return (this.getY() + this.getZ() * 31) * 31 + this.getX();
+        return (this.b + this.c * 31) * 31 + this.a; // NeonPaper - Optimize BlockPosition
     }
 
     public int l(BaseBlockPosition baseblockposition) {
-        return this.getY() == baseblockposition.getY() ? (this.getZ() == baseblockposition.getZ() ? this.getX() - baseblockposition.getX() : this.getZ() - baseblockposition.getZ()) : this.getY() - baseblockposition.getY();
+        return this.b == baseblockposition.b ? (this.c == baseblockposition.c ? this.a - baseblockposition.a : this.c - baseblockposition.c) : this.b - baseblockposition.b; // NeonPaper - Optimize BlockPosition
     }
 
     // Paper start - Only allow a single implementation
@@ -65,39 +65,45 @@ public class BaseBlockPosition implements Comparable<BaseBlockPosition> {
     // Paper end
 
     public BaseBlockPosition d(BaseBlockPosition baseblockposition) {
-        return new BaseBlockPosition(this.getY() * baseblockposition.getZ() - this.getZ() * baseblockposition.getY(), this.getZ() * baseblockposition.getX() - this.getX() * baseblockposition.getZ(), this.getX() * baseblockposition.getY() - this.getY() * baseblockposition.getX());
+        return new BaseBlockPosition(this.b * baseblockposition.c - this.c * baseblockposition.b, this.c * baseblockposition.a - this.a * baseblockposition.c, this.a * baseblockposition.b - this.b * baseblockposition.a); // NeonPaper - Optimize BlockPosition
     }
 
     public double h(int i, int j, int k) {
-        double d0 = (double) (this.getX() - i);
-        double d1 = (double) (this.getY() - j);
-        double d2 = (double) (this.getZ() - k);
+        // NeonPaper start - Optimize BlockPosition
+        double d0 = this.a - i;
+        double d1 = this.b - j;
+        double d2 = this.c - k;
+        // NeonPaper end
 
         return Math.sqrt(d0 * d0 + d1 * d1 + d2 * d2);
     }
 
     public double distanceSquared(double d0, double d1, double d2) {
-        double d3 = (double) this.getX() - d0;
-        double d4 = (double) this.getY() - d1;
-        double d5 = (double) this.getZ() - d2;
+        // NeonPaper start - Optimize BlockPosition
+        double d3 = (double) this.a - d0;
+        double d4 = (double) this.b - d1;
+        double d5 = (double) this.c - d2;
+        // NeonPaper end
 
         return d3 * d3 + d4 * d4 + d5 * d5;
     }
 
     public double g(double d0, double d1, double d2) {
-        double d3 = (double) this.getX() + 0.5D - d0;
-        double d4 = (double) this.getY() + 0.5D - d1;
-        double d5 = (double) this.getZ() + 0.5D - d2;
+        // NeonPaper start - Optimize BlockPosition
+        double d3 = (double) this.a + 0.5D - d0;
+        double d4 = (double) this.b + 0.5D - d1;
+        double d5 = (double) this.c + 0.5D - d2;
+        // NeonPaper end
 
         return d3 * d3 + d4 * d4 + d5 * d5;
     }
 
     public double n(BaseBlockPosition baseblockposition) {
-        return this.distanceSquared((double) baseblockposition.getX(), (double) baseblockposition.getY(), (double) baseblockposition.getZ());
+        return this.distanceSquared(baseblockposition.a, baseblockposition.b, baseblockposition.c); // NeonPaper - Optimize BlockPosition
     }
 
     public String toString() {
-        return MoreObjects.toStringHelper(this).add("x", this.getX()).add("y", this.getY()).add("z", this.getZ()).toString();
+        return MoreObjects.toStringHelper(this).add("x", this.a).add("y", this.b).add("z", this.c).toString(); // NeonPaper - Optimize BlockPosition
     }
 
     public int compareTo(BaseBlockPosition object) { // Paper - decompile fix
diff --git a/src/main/java/net/minecraft/server/BiomeForest.java b/src/main/java/net/minecraft/server/BiomeForest.java
index 18d34d91cc36afdbb902c7b474147d9648cb8199..744d71350950a562353a0a0ab8be2c2a6075e38b 100644
--- a/src/main/java/net/minecraft/server/BiomeForest.java
+++ b/src/main/java/net/minecraft/server/BiomeForest.java
@@ -38,7 +38,7 @@ public class BiomeForest extends BiomeBase {
     public BlockFlowers.EnumFlowerVarient a(Random random, BlockPosition blockposition) {
         if (this.A == BiomeForest.Type.FLOWER) {
             double d0 = MathHelper.a((1.0D + BiomeForest.k.a((double) blockposition.getX() / 48.0D, (double) blockposition.getZ() / 48.0D)) / 2.0D, 0.0D, 0.9999D);
-            BlockFlowers.EnumFlowerVarient blockflowers_enumflowervarient = BlockFlowers.EnumFlowerVarient.values()[(int) (d0 * (double) BlockFlowers.EnumFlowerVarient.values().length)];
+            BlockFlowers.EnumFlowerVarient blockflowers_enumflowervarient = BlockFlowers.EnumFlowerVarient.VALUES[(int) (d0 * (double) BlockFlowers.EnumFlowerVarient.VALUES.length)]; // NeonPaper - Single values array
 
             return blockflowers_enumflowervarient == BlockFlowers.EnumFlowerVarient.BLUE_ORCHID ? BlockFlowers.EnumFlowerVarient.POPPY : blockflowers_enumflowervarient;
         } else {
diff --git a/src/main/java/net/minecraft/server/BiomeMesa.java b/src/main/java/net/minecraft/server/BiomeMesa.java
index 67f8ad8eda987217291dccdbc61419ffed89725a..5ae821474f286f825beaabe5d5afa21129be61c4 100644
--- a/src/main/java/net/minecraft/server/BiomeMesa.java
+++ b/src/main/java/net/minecraft/server/BiomeMesa.java
@@ -31,7 +31,7 @@ public class BiomeMesa extends BiomeBase {
         this.s.F = 3;
         this.s.G = 5;
         this.s.B = 0;
-        this.u.clear();
+        // this.u.clear(); // NeonPaper - Already empty
         if (flag1) {
             this.s.z = 5;
         }
diff --git a/src/main/java/net/minecraft/server/Block.java b/src/main/java/net/minecraft/server/Block.java
index 3e2f52647c72f55cc3a624c05b86d2565b728038..1b9349444f9d9cb2d757e515af0e25f73a76e5fe 100644
--- a/src/main/java/net/minecraft/server/Block.java
+++ b/src/main/java/net/minecraft/server/Block.java
@@ -352,12 +352,12 @@ public class Block {
     }
 
     public void dropNaturally(World world, BlockPosition blockposition, IBlockData iblockdata, float f, int i) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             int j = this.getDropCount(i, world.random);
 
             for (int k = 0; k < j; ++k) {
                 // CraftBukkit - <= to < to allow for plugins to completely disable block drops from explosions
-                if (world.random.nextFloat() < f) {
+                if (f == 1 || world.random.nextFloat() < f) { // NeonPaper - Do not use random when unnecessary
                     Item item = this.getDropType(iblockdata, world.random, i);
 
                     if (item != Items.a) {
@@ -370,7 +370,7 @@ public class Block {
     }
 
     public static void a(World world, BlockPosition blockposition, ItemStack itemstack) {
-        if (!world.isClientSide && !itemstack.isEmpty() && world.getGameRules().getBoolean("doTileDrops")) {
+        if (!itemstack.isEmpty() && world.getGameRules().getBoolean("doTileDrops")) { // NeonPaper - Remove isClientSide check
             float f = 0.5F;
             double d0 = (double) (world.random.nextFloat() * 0.5F) + 0.25D;
             double d1 = (double) (world.random.nextFloat() * 0.5F) + 0.25D;
@@ -389,7 +389,7 @@ public class Block {
     }
 
     protected void dropExperience(World world, BlockPosition blockposition, int i, EntityPlayer player) { // Paper
-        if (!world.isClientSide && world.getGameRules().getBoolean("doTileDrops")) {
+        if (world.getGameRules().getBoolean("doTileDrops")) { // NeonPaper - Remove isClientSide check
             while (i > 0) {
                 int j = EntityExperienceOrb.getOrbValue(i);
 
diff --git a/src/main/java/net/minecraft/server/BlockBeacon.java b/src/main/java/net/minecraft/server/BlockBeacon.java
index 21075974df7f6945d8944b2ec0263fe755278c28..b0326f33e85a056ae2c7fe1f925fdb4df2c9df3f 100644
--- a/src/main/java/net/minecraft/server/BlockBeacon.java
+++ b/src/main/java/net/minecraft/server/BlockBeacon.java
@@ -13,7 +13,7 @@ public class BlockBeacon extends BlockTileEntity {
     }
 
     public boolean interact(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
-        if (world.isClientSide) {
+        if (false) { // NeonPaper - Remove isClientSide check
             return true;
         } else {
             TileEntity tileentity = world.getTileEntity(blockposition);
diff --git a/src/main/java/net/minecraft/server/BlockBed.java b/src/main/java/net/minecraft/server/BlockBed.java
index f1a1079918ae37672b2c5978b82f6392801859d0..95f643e9823f653d3023debb3fc0891b726bdab0 100644
--- a/src/main/java/net/minecraft/server/BlockBed.java
+++ b/src/main/java/net/minecraft/server/BlockBed.java
@@ -31,7 +31,7 @@ public class BlockBed extends BlockFacingHorizontal implements ITileEntity {
     }
 
     public boolean interact(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
-        if (world.isClientSide) {
+        if (false) { // NeonPaper - Remove isClientSide check
             return true;
         } else {
             if (iblockdata.get(BlockBed.PART) != BlockBed.EnumBedPart.HEAD) {
@@ -62,13 +62,19 @@ public class BlockBed extends BlockFacingHorizontal implements ITileEntity {
                     world.setTypeAndData(blockposition, iblockdata, 4);
                     return true;
                 } else {
-                    if (entityhuman_enumbedresult == EntityHuman.EnumBedResult.NOT_POSSIBLE_NOW) {
+                    // NeonPaper start - Replace 'if' with 'switch'
+                    switch (entityhuman_enumbedresult) {
+                    case NOT_POSSIBLE_NOW:
                         entityhuman.a((IChatBaseComponent) (new ChatMessage("tile.bed.noSleep", new Object[0])), true);
-                    } else if (entityhuman_enumbedresult == EntityHuman.EnumBedResult.NOT_SAFE) {
+                        break;
+                    case NOT_SAFE:
                         entityhuman.a((IChatBaseComponent) (new ChatMessage("tile.bed.notSafe", new Object[0])), true);
-                    } else if (entityhuman_enumbedresult == EntityHuman.EnumBedResult.TOO_FAR_AWAY) {
+                        break;
+                    case TOO_FAR_AWAY:
                         entityhuman.a((IChatBaseComponent) (new ChatMessage("tile.bed.tooFarAway", new Object[0])), true);
+                        break;
                     }
+                    // NeonPaper end
 
                     return true;
                 }
@@ -135,7 +141,7 @@ public class BlockBed extends BlockFacingHorizontal implements ITileEntity {
                 world.setAir(blockposition);
             }
         } else if (world.getType(blockposition.shift(enumdirection.opposite())).getBlock() != this) {
-            if (!world.isClientSide) {
+            if (true) { // NeonPaper - Remove isClientSide check
                 this.b(world, blockposition, iblockdata, 0);
             }
 
diff --git a/src/main/java/net/minecraft/server/BlockButtonAbstract.java b/src/main/java/net/minecraft/server/BlockButtonAbstract.java
index 928010543c094191d7185cc1b1ca76a1a3032d88..468f91a25e9b08b1ee2f8ef0e544b8f4128df5d3 100644
--- a/src/main/java/net/minecraft/server/BlockButtonAbstract.java
+++ b/src/main/java/net/minecraft/server/BlockButtonAbstract.java
@@ -56,7 +56,7 @@ public abstract class BlockButtonAbstract extends BlockDirectional {
     }
 
     public boolean canPlace(World world, BlockPosition blockposition) {
-        EnumDirection[] aenumdirection = EnumDirection.values();
+        EnumDirection[] aenumdirection = EnumDirection.VALUES; // NeonPaper - Single values array
         int i = aenumdirection.length;
 
         for (int j = 0; j < i; ++j) {
@@ -180,7 +180,7 @@ public abstract class BlockButtonAbstract extends BlockDirectional {
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {}
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             if (((Boolean) iblockdata.get(BlockButtonAbstract.POWERED)).booleanValue()) {
                 if (this.I) {
                     this.d(iblockdata, world, blockposition);
@@ -206,7 +206,7 @@ public abstract class BlockButtonAbstract extends BlockDirectional {
     }
 
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Entity entity) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             if (this.I) {
                 if (!((Boolean) iblockdata.get(BlockButtonAbstract.POWERED)).booleanValue()) {
                     this.d(iblockdata, world, blockposition);
diff --git a/src/main/java/net/minecraft/server/BlockCake.java b/src/main/java/net/minecraft/server/BlockCake.java
index 6f4842822352a20d92cce8175409d1b60a7658c2..6c6565da4f91e91e2bebf645d8f96ba8f11cd60f 100644
--- a/src/main/java/net/minecraft/server/BlockCake.java
+++ b/src/main/java/net/minecraft/server/BlockCake.java
@@ -26,7 +26,7 @@ public class BlockCake extends Block {
     }
 
     public boolean interact(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             return this.b(world, blockposition, iblockdata, entityhuman);
         } else {
             ItemStack itemstack = entityhuman.b(enumhand);
diff --git a/src/main/java/net/minecraft/server/BlockCauldron.java b/src/main/java/net/minecraft/server/BlockCauldron.java
index 57638ffc991afe7307265ec1d66ea28efd78b6d3..366e886910e34db757394eef117e793fe0d67bba 100644
--- a/src/main/java/net/minecraft/server/BlockCauldron.java
+++ b/src/main/java/net/minecraft/server/BlockCauldron.java
@@ -43,7 +43,7 @@ public class BlockCauldron extends Block {
         int i = ((Integer) iblockdata.get(BlockCauldron.LEVEL)).intValue();
         float f = (float) blockposition.getY() + (6.0F + (float) (3 * i)) / 16.0F;
 
-        if (!world.isClientSide && entity.isBurning() && i > 0 && entity.getBoundingBox().b <= (double) f) {
+        if (entity.isBurning() && i > 0 && entity.getBoundingBox().b <= (double) f) { // NeonPaper - Remove isClientSide check
             // CraftBukkit start
             if (!this.changeLevel(world, blockposition, iblockdata, i - 1, entity, CauldronLevelChangeEvent.ChangeReason.EXTINGUISH)) {
                 return;
@@ -65,7 +65,7 @@ public class BlockCauldron extends Block {
             Item item = itemstack.getItem();
 
             if (item == Items.WATER_BUCKET) {
-                if (i < 3 && !world.isClientSide) {
+                if (i < 3) { // NeonPaper - Remove isClientSide check
                     // CraftBukkit start
                     if (!this.changeLevel(world, blockposition, iblockdata, 3, entityhuman, CauldronLevelChangeEvent.ChangeReason.BUCKET_EMPTY)) {
                         return true;
@@ -82,7 +82,7 @@ public class BlockCauldron extends Block {
 
                 return true;
             } else if (item == Items.BUCKET) {
-                if (i == 3 && !world.isClientSide) {
+                if (i == 3) { // NeonPaper - Remove isClientSide check
                     // CraftBukkit start
                     if (!this.changeLevel(world, blockposition, iblockdata, 0, entityhuman, CauldronLevelChangeEvent.ChangeReason.BUCKET_FILL)) {
                         return true;
@@ -107,7 +107,7 @@ public class BlockCauldron extends Block {
                 ItemStack itemstack1;
 
                 if (item == Items.GLASS_BOTTLE) {
-                    if (i > 0 && !world.isClientSide) {
+                    if (i > 0) { // NeonPaper - Remove isClientSide check
                         // CraftBukkit start
                         if (!this.changeLevel(world, blockposition, iblockdata, i - 1, entityhuman, CauldronLevelChangeEvent.ChangeReason.BOTTLE_FILL)) {
                             return true;
@@ -132,7 +132,7 @@ public class BlockCauldron extends Block {
 
                     return true;
                 } else if (item == Items.POTION && PotionUtil.d(itemstack) == Potions.b) {
-                    if (i < 3 && !world.isClientSide) {
+                    if (i < 3) { // NeonPaper - Remove isClientSide check
                         // CraftBukkit start
                         if (!this.changeLevel(world, blockposition, iblockdata, i + 1, entityhuman, CauldronLevelChangeEvent.ChangeReason.BOTTLE_EMPTY)) {
                             return true;
@@ -156,7 +156,7 @@ public class BlockCauldron extends Block {
                     if (i > 0 && item instanceof ItemArmor) {
                         ItemArmor itemarmor = (ItemArmor) item;
 
-                        if (itemarmor.d() == ItemArmor.EnumArmorMaterial.LEATHER && itemarmor.e_(itemstack) && !world.isClientSide) {
+                        if (itemarmor.d() == ItemArmor.EnumArmorMaterial.LEATHER && itemarmor.e_(itemstack)) { // NeonPaper - Remove isClientSide check
                             // CraftBukkit start
                             if (!this.changeLevel(world, blockposition, iblockdata, i - 1, entityhuman, CauldronLevelChangeEvent.ChangeReason.ARMOR_WASH)) {
                                 return true;
@@ -170,7 +170,7 @@ public class BlockCauldron extends Block {
                     }
 
                     if (i > 0 && item instanceof ItemBanner) {
-                        if (TileEntityBanner.b(itemstack) > 0 && !world.isClientSide) {
+                        if (TileEntityBanner.b(itemstack) > 0) { // NeonPaper - Remove isClientSide check
                             // CraftBukkit start
                             if (!this.changeLevel(world, blockposition, iblockdata, i - 1, entityhuman, CauldronLevelChangeEvent.ChangeReason.BANNER_WASH)) {
                                 return true;
diff --git a/src/main/java/net/minecraft/server/BlockChest.java b/src/main/java/net/minecraft/server/BlockChest.java
index 91d3308c154096db5c89879d3bdbf2d29ef959a9..7b279458219ce6ba59ee3c5c3ea08c67b0c71db0 100644
--- a/src/main/java/net/minecraft/server/BlockChest.java
+++ b/src/main/java/net/minecraft/server/BlockChest.java
@@ -100,7 +100,7 @@ public class BlockChest extends BlockTileEntity {
     }
 
     public IBlockData e(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        if (world.isClientSide) {
+        if (false) { // NeonPaper - Remove isClientSide check
             return iblockdata;
         } else {
             IBlockData iblockdata1 = world.getType(blockposition.north());
@@ -299,7 +299,7 @@ public class BlockChest extends BlockTileEntity {
     }
 
     public boolean interact(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
-        if (world.isClientSide) {
+        if (false) { // NeonPaper - Remove isClientSide check
             return true;
         } else {
             ITileInventory itileinventory = this.getInventory(world, blockposition);
diff --git a/src/main/java/net/minecraft/server/BlockChorusFlower.java b/src/main/java/net/minecraft/server/BlockChorusFlower.java
index c258515ec44cb6b9c1ef6cf9306a0dc8817b1c7f..a042ea7bb6b84d363bfc36dde08e5cc095263cba 100644
--- a/src/main/java/net/minecraft/server/BlockChorusFlower.java
+++ b/src/main/java/net/minecraft/server/BlockChorusFlower.java
@@ -30,7 +30,7 @@ public class BlockChorusFlower extends Block {
             if (world.isEmpty(blockposition1) && blockposition1.getY() < 256) {
                 int i = ((Integer) iblockdata.get(BlockChorusFlower.AGE)).intValue();
 
-                if (i < 5 && random.nextInt(1) == 0) {
+                if (i < 5 /*&& random.nextInt(1) == 0*/) { // NeonPaper - Optimize
                     boolean flag = false;
                     boolean flag1 = false;
                     IBlockData iblockdata1 = world.getType(blockposition.down());
@@ -130,7 +130,7 @@ public class BlockChorusFlower extends Block {
                             // this.c(world, blockposition);
                             // CraftBukkit end
                         }
-                    } else if (i == 4) {
+                    } else if (/*i == 4*/true) { // NeonPaper - Always true
                         // CraftBukkit - add event
                         if (CraftEventFactory.handleBlockGrowEvent(
                                 world,
diff --git a/src/main/java/net/minecraft/server/BlockCommand.java b/src/main/java/net/minecraft/server/BlockCommand.java
index e12d50d8b929726973303e0825874eb9cdc2fa6c..1aec14badccb000c8f70c2e5e2507d39f969623d 100644
--- a/src/main/java/net/minecraft/server/BlockCommand.java
+++ b/src/main/java/net/minecraft/server/BlockCommand.java
@@ -25,7 +25,7 @@ public class BlockCommand extends BlockTileEntity {
     }
 
     public void a(IBlockData iblockdata, World world, BlockPosition blockposition, Block block, BlockPosition blockposition1) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             TileEntity tileentity = world.getTileEntity(blockposition);
 
             if (tileentity instanceof TileEntityCommand) {
@@ -55,7 +55,7 @@ public class BlockCommand extends BlockTileEntity {
     }
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             TileEntity tileentity = world.getTileEntity(blockposition);
 
             if (tileentity instanceof TileEntityCommand) {
@@ -136,7 +136,7 @@ public class BlockCommand extends BlockTileEntity {
                 commandblocklistenerabstract.setName(itemstack.getName());
             }
 
-            if (!world.isClientSide) {
+            if (true) { // NeonPaper - Remove isClientSide check
                 NBTTagCompound nbttagcompound = itemstack.getTag();
 
                 if (nbttagcompound == null || !nbttagcompound.hasKeyOfType("BlockEntityTag", 10)) {
diff --git a/src/main/java/net/minecraft/server/BlockConcretePowder.java b/src/main/java/net/minecraft/server/BlockConcretePowder.java
index 27a57f407240c356c2d5fff364833eca19fb7de9..adb450e62316d379cf10fd56e2031aa20a367ba8 100644
--- a/src/main/java/net/minecraft/server/BlockConcretePowder.java
+++ b/src/main/java/net/minecraft/server/BlockConcretePowder.java
@@ -19,7 +19,7 @@ public class BlockConcretePowder extends BlockFalling {
 
     protected boolean e(World world, BlockPosition blockposition, IBlockData iblockdata) {
         boolean flag = false;
-        EnumDirection[] aenumdirection = EnumDirection.values();
+        EnumDirection[] aenumdirection = EnumDirection.VALUES; // NeonPaper - Single values array
         int i = aenumdirection.length;
 
         for (int j = 0; j < i; ++j) {
@@ -61,7 +61,7 @@ public class BlockConcretePowder extends BlockFalling {
     }
 
     public void a(CreativeModeTab creativemodetab, NonNullList<ItemStack> nonnulllist) {
-        EnumColor[] aenumcolor = EnumColor.values();
+        EnumColor[] aenumcolor = EnumColor.VALUES; // NeonPaper - Single values array
         int i = aenumcolor.length;
 
         for (int j = 0; j < i; ++j) {
diff --git a/src/main/java/net/minecraft/server/BlockCrops.java b/src/main/java/net/minecraft/server/BlockCrops.java
index 55ed0c956cfb3c523896d91136be0de995437498..766b50e0d2b8f4426d53dac3737c239139230072 100644
--- a/src/main/java/net/minecraft/server/BlockCrops.java
+++ b/src/main/java/net/minecraft/server/BlockCrops.java
@@ -141,7 +141,7 @@ public class BlockCrops extends BlockPlant implements IBlockFragilePlantElement
 
     public void dropNaturally(World world, BlockPosition blockposition, IBlockData iblockdata, float f, int i) {
         super.dropNaturally(world, blockposition, iblockdata, f, 0);
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             int j = this.y(iblockdata);
 
             if (j >= this.g()) {
diff --git a/src/main/java/net/minecraft/server/BlockDaylightDetector.java b/src/main/java/net/minecraft/server/BlockDaylightDetector.java
index 32ffe424022b301c290bb58078b57dff5ede31bd..ba3b385541bbb91eed283670271f40b38e81d060 100644
--- a/src/main/java/net/minecraft/server/BlockDaylightDetector.java
+++ b/src/main/java/net/minecraft/server/BlockDaylightDetector.java
@@ -54,7 +54,7 @@ public class BlockDaylightDetector extends BlockTileEntity {
 
     public boolean interact(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
         if (entityhuman.dk()) {
-            if (world.isClientSide) {
+            if (false) { // NeonPaper - Remove isClientSide check
                 return true;
             } else {
                 if (this.c) {
diff --git a/src/main/java/net/minecraft/server/BlockDiodeAbstract.java b/src/main/java/net/minecraft/server/BlockDiodeAbstract.java
index 8a84e3d55633bf18d57e10f5dbeb830b3a7902bd..8452841b9c76b680c189e935393df6a6bde18637 100644
--- a/src/main/java/net/minecraft/server/BlockDiodeAbstract.java
+++ b/src/main/java/net/minecraft/server/BlockDiodeAbstract.java
@@ -76,7 +76,7 @@ public abstract class BlockDiodeAbstract extends BlockFacingHorizontal {
         } else {
             this.b(world, blockposition, iblockdata, 0);
             world.setAir(blockposition);
-            EnumDirection[] aenumdirection = EnumDirection.values();
+            EnumDirection[] aenumdirection = EnumDirection.VALUES; // NeonPaper - Single values array
             int i = aenumdirection.length;
 
             for (int j = 0; j < i; ++j) {
@@ -173,7 +173,7 @@ public abstract class BlockDiodeAbstract extends BlockFacingHorizontal {
 
     public void postBreak(World world, BlockPosition blockposition, IBlockData iblockdata) {
         if (this.d) {
-            EnumDirection[] aenumdirection = EnumDirection.values();
+            EnumDirection[] aenumdirection = EnumDirection.VALUES; // NeonPaper - Single values array
             int i = aenumdirection.length;
 
             for (int j = 0; j < i; ++j) {
diff --git a/src/main/java/net/minecraft/server/BlockDispenser.java b/src/main/java/net/minecraft/server/BlockDispenser.java
index 539b2b3ce06c239c5c5f3b88c7608a94a9454234..8127b22feb4c35f5c5abe30c7e7c33223eb65e13 100644
--- a/src/main/java/net/minecraft/server/BlockDispenser.java
+++ b/src/main/java/net/minecraft/server/BlockDispenser.java
@@ -56,7 +56,7 @@ public class BlockDispenser extends BlockTileEntity {
     // Paper end
 
     public boolean interact(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
-        if (world.isClientSide) {
+        if (false) { // NeonPaper - Remove isClientSide check
             return true;
         } else {
             TileEntity tileentity = world.getTileEntity(blockposition);
@@ -114,7 +114,7 @@ public class BlockDispenser extends BlockTileEntity {
     }
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             this.dispense(world, blockposition);
         }
 
diff --git a/src/main/java/net/minecraft/server/BlockDoor.java b/src/main/java/net/minecraft/server/BlockDoor.java
index 5f771785de605dd013d94e3b06b8ddf474ee2cd1..5dfc36b696548e4657896741ff487e6a213cfaa2 100644
--- a/src/main/java/net/minecraft/server/BlockDoor.java
+++ b/src/main/java/net/minecraft/server/BlockDoor.java
@@ -135,7 +135,7 @@ public class BlockDoor extends Block {
             }
 
             if (flag) {
-                if (!world.isClientSide) {
+                if (true) { // NeonPaper - Remove isClientSide check
                     this.b(world, blockposition, iblockdata, 0);
                 }
             } else {
diff --git a/src/main/java/net/minecraft/server/BlockDragonEgg.java b/src/main/java/net/minecraft/server/BlockDragonEgg.java
index 291342c9047ec90c50c263f4f29640ac3fc26c41..5a91a9ec112dcde83f60c25911c5b66ffadd4a32 100644
--- a/src/main/java/net/minecraft/server/BlockDragonEgg.java
+++ b/src/main/java/net/minecraft/server/BlockDragonEgg.java
@@ -80,7 +80,7 @@ public class BlockDragonEgg extends Block {
 
                     blockposition1 = new BlockPosition(event.getToBlock().getX(), event.getToBlock().getY(), event.getToBlock().getZ());
                     // CraftBukkit end
-                    if (world.isClientSide) {
+                    if (false) { // NeonPaper - Remove isClientSide check
                         for (int j = 0; j < 128; ++j) {
                             double d0 = world.random.nextDouble();
                             float f = (world.random.nextFloat() - 0.5F) * 0.2F;
diff --git a/src/main/java/net/minecraft/server/BlockEnderPortal.java b/src/main/java/net/minecraft/server/BlockEnderPortal.java
index 7afc05c1ded44b235eee6d10cd29b241c94cb1a3..b372c5b0b857a02c8c5ea3de0a42cde0acc3a232 100644
--- a/src/main/java/net/minecraft/server/BlockEnderPortal.java
+++ b/src/main/java/net/minecraft/server/BlockEnderPortal.java
@@ -38,7 +38,7 @@ public class BlockEnderPortal extends BlockTileEntity {
     }
 
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Entity entity) {
-        if (!world.isClientSide && !entity.isPassenger() && !entity.isVehicle() && entity.bf() && entity.getBoundingBox().c(iblockdata.e(world, blockposition).a(blockposition))) {
+        if (!entity.isPassenger() && !entity.isVehicle() && entity.bf() && entity.getBoundingBox().c(iblockdata.e(world, blockposition).a(blockposition))) { // NeonPaper - Remove isClientSide check
             // CraftBukkit start - Entity in portal
             EntityPortalEnterEvent event = new EntityPortalEnterEvent(entity.getBukkitEntity(), new org.bukkit.Location(world.getWorld(), blockposition.getX(), blockposition.getY(), blockposition.getZ()));
             world.getServer().getPluginManager().callEvent(event);
diff --git a/src/main/java/net/minecraft/server/BlockFalling.java b/src/main/java/net/minecraft/server/BlockFalling.java
index 1086e3117306ac9f3093312fd4ec484ccebbcb61..ba86e62c95918b62857628d43d69c759b80c0f61 100644
--- a/src/main/java/net/minecraft/server/BlockFalling.java
+++ b/src/main/java/net/minecraft/server/BlockFalling.java
@@ -24,7 +24,7 @@ public class BlockFalling extends Block {
     }
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             this.b(world, blockposition);
         }
 
@@ -35,7 +35,7 @@ public class BlockFalling extends Block {
             boolean flag = true;
 
             if (!BlockFalling.instaFall && world.areChunksLoadedBetween(blockposition.a(-32, -32, -32), blockposition.a(32, 32, 32))) {
-                if (!world.isClientSide) {
+                if (true) { // NeonPaper - Remove isClientSide check
                     EntityFallingBlock entityfallingblock = new EntityFallingBlock(world, (double) blockposition.getX() + 0.5D, (double) blockposition.getY(), (double) blockposition.getZ() + 0.5D, world.getType(blockposition));
 
                     this.a(entityfallingblock);
diff --git a/src/main/java/net/minecraft/server/BlockFire.java b/src/main/java/net/minecraft/server/BlockFire.java
index 6832a19af69cc1d495e809eae1ded9237bf136dc..93dfcc3eeb58f93db5fc551e2ccb962210eddbb0 100644
--- a/src/main/java/net/minecraft/server/BlockFire.java
+++ b/src/main/java/net/minecraft/server/BlockFire.java
@@ -11,6 +11,12 @@ import org.bukkit.event.block.BlockBurnEvent;
 import org.bukkit.event.block.BlockSpreadEvent;
 // CraftBukkit end
 
+// NeonPaper start - FastUtil optimization
+import com.github.ruviolence.NeonPaper.IdentityStrategy;
+import it.unimi.dsi.fastutil.objects.Object2IntMap;
+import it.unimi.dsi.fastutil.objects.Object2IntOpenCustomHashMap;
+// NeonPaper end
+
 public class BlockFire extends Block {
 
     public static final BlockStateInteger AGE = BlockStateInteger.of("age", 0, 15);
@@ -19,8 +25,8 @@ public class BlockFire extends Block {
     public static final BlockStateBoolean SOUTH = BlockStateBoolean.of("south");
     public static final BlockStateBoolean WEST = BlockStateBoolean.of("west");
     public static final BlockStateBoolean UPPER = BlockStateBoolean.of("up");
-    private final Map<Block, Integer> flameChances = Maps.newIdentityHashMap();
-    private final Map<Block, Integer> B = Maps.newIdentityHashMap();
+    private final Object2IntMap<Block> flameChances = new Object2IntOpenCustomHashMap<>(new IdentityStrategy<>()); // NeonPaper - FastUtil optimization
+    private final Object2IntMap<Block> B = new Object2IntOpenCustomHashMap<>(new IdentityStrategy<>()); // NeonPaper - FastUtil optimization
 
     public IBlockData updateState(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
         return !iblockaccess.getType(blockposition.down()).q() && !Blocks.FIRE.c(iblockaccess, blockposition.down()) ? iblockdata.set(BlockFire.NORTH, Boolean.valueOf(this.c(iblockaccess, blockposition.north()))).set(BlockFire.EAST, Boolean.valueOf(this.c(iblockaccess, blockposition.east()))).set(BlockFire.SOUTH, Boolean.valueOf(this.c(iblockaccess, blockposition.south()))).set(BlockFire.WEST, Boolean.valueOf(this.c(iblockaccess, blockposition.west()))).set(BlockFire.UPPER, Boolean.valueOf(this.c(iblockaccess, blockposition.up()))) : this.getBlockData();
@@ -182,7 +188,7 @@ public class BlockFire extends Block {
                                         }
 
                                         // CraftBukkit start - Call to stop spread of fire
-                                        if (world.getType(blockposition1) != Blocks.FIRE) {
+                                        if (/*world.getType(blockposition1) != Blocks.FIRE*/true) { // NeonPaper - Always true
                                             if (CraftEventFactory.callBlockIgniteEvent(world, blockposition1.getX(), blockposition1.getY(), blockposition1.getZ(), blockposition.getX(), blockposition.getY(), blockposition.getZ()).isCancelled()) {
                                                 continue;
                                             }
@@ -221,12 +227,14 @@ public class BlockFire extends Block {
     }
 
     private int e(Block block) {
+        if (true) return this.B.getInt(block); // NeonPaper - FastUtil optimization
         Integer integer = (Integer) this.B.get(block);
 
         return integer == null ? 0 : integer.intValue();
     }
 
     private int f(Block block) {
+        if (true) return this.flameChances.getInt(block); // NeonPaper - FastUtil optimization
         Integer integer = (Integer) this.flameChances.get(block);
 
         return integer == null ? 0 : integer.intValue();
@@ -273,7 +281,7 @@ public class BlockFire extends Block {
     }
 
     private boolean c(World world, BlockPosition blockposition) {
-        EnumDirection[] aenumdirection = EnumDirection.values();
+        EnumDirection[] aenumdirection = EnumDirection.VALUES; // NeonPaper - Single values array
         int i = aenumdirection.length;
 
         for (int j = 0; j < i; ++j) {
@@ -292,7 +300,7 @@ public class BlockFire extends Block {
             return 0;
         } else {
             int i = 0;
-            EnumDirection[] aenumdirection = EnumDirection.values();
+            EnumDirection[] aenumdirection = EnumDirection.VALUES; // NeonPaper - Single values array
             int j = aenumdirection.length;
 
             for (int k = 0; k < j; ++k) {
diff --git a/src/main/java/net/minecraft/server/BlockFlowers.java b/src/main/java/net/minecraft/server/BlockFlowers.java
index c9149d9dc50792d30cbfaf72c63013ceb65a4236..e0c5aa1d2efc86cc53039a07e6637747d52fab73 100644
--- a/src/main/java/net/minecraft/server/BlockFlowers.java
+++ b/src/main/java/net/minecraft/server/BlockFlowers.java
@@ -77,6 +77,7 @@ public abstract class BlockFlowers extends BlockPlant {
         private final int m;
         private final String n;
         private final String o;
+        public static final BlockFlowers.EnumFlowerVarient[] VALUES = values(); // NeonPaper - Single values array
 
         private EnumFlowerVarient(BlockFlowers.EnumFlowerType blockflowers_enumflowertype, int i, String s) {
             this(blockflowers_enumflowertype, i, s, s);
diff --git a/src/main/java/net/minecraft/server/BlockFluids.java b/src/main/java/net/minecraft/server/BlockFluids.java
index a06fbf28eb6121b546cfa17c94f304a7378f82a3..3179d7b6847b70324d968bcb4ba8e07424134731 100644
--- a/src/main/java/net/minecraft/server/BlockFluids.java
+++ b/src/main/java/net/minecraft/server/BlockFluids.java
@@ -112,7 +112,7 @@ public abstract class BlockFluids extends Block {
                         d2 += (double) (enumdirection.getAdjacentZ() * k);
                     }
                 }
-            } else if (j >= 0) {
+            } else if (/*j >= 0*/true) { // NeonPaper - Always true
                 k = j - i;
                 d0 += (double) (enumdirection.getAdjacentX() * k);
                 d1 += (double) (enumdirection.getAdjacentY() * k);
@@ -159,7 +159,7 @@ public abstract class BlockFluids extends Block {
     public boolean e(World world, BlockPosition blockposition, IBlockData iblockdata) {
         if (this.material == Material.LAVA) {
             boolean flag = false;
-            EnumDirection[] aenumdirection = EnumDirection.values();
+            EnumDirection[] aenumdirection = EnumDirection.VALUES; // NeonPaper - Single values array
             int i = aenumdirection.length;
 
             for (int j = 0; j < i; ++j) {
@@ -198,15 +198,19 @@ public abstract class BlockFluids extends Block {
     }
 
     protected void fizz(World world, BlockPosition blockposition) {
+        /* // NeonPaper start - Clientside particles
         double d0 = (double) blockposition.getX();
         double d1 = (double) blockposition.getY();
         double d2 = (double) blockposition.getZ();
+        */
 
         world.a((EntityHuman) null, blockposition, SoundEffects.dE, SoundCategory.BLOCKS, 0.5F, 2.6F + (world.random.nextFloat() - world.random.nextFloat()) * 0.8F);
 
+        /*
         for (int i = 0; i < 8; ++i) {
             world.addParticle(EnumParticle.SMOKE_LARGE, d0 + Math.random(), d1 + 1.2D, d2 + Math.random(), 0.0D, 0.0D, 0.0D, new int[0]);
         }
+        */ // NeonPaper end
 
     }
 
diff --git a/src/main/java/net/minecraft/server/BlockFurnace.java b/src/main/java/net/minecraft/server/BlockFurnace.java
index dae711708df9ad8f8c70115fb37cb2c1ac6f68c2..0aae210a31f6ec5cfadfb8630e84a51a47b93a95 100644
--- a/src/main/java/net/minecraft/server/BlockFurnace.java
+++ b/src/main/java/net/minecraft/server/BlockFurnace.java
@@ -50,7 +50,7 @@ public class BlockFurnace extends BlockTileEntity {
     // Paper end
 
     public boolean interact(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
-        if (world.isClientSide) {
+        if (false) { // NeonPaper - Remove isClientSide check
             return true;
         } else {
             TileEntity tileentity = world.getTileEntity(blockposition);
diff --git a/src/main/java/net/minecraft/server/BlockGrass.java b/src/main/java/net/minecraft/server/BlockGrass.java
index b656994b2f09eb055bbe2f1aac5fc73a3b079424..d6e7e50714f4cd4051a5d4a301a3a360b66ed7aa 100644
--- a/src/main/java/net/minecraft/server/BlockGrass.java
+++ b/src/main/java/net/minecraft/server/BlockGrass.java
@@ -29,7 +29,7 @@ public class BlockGrass extends Block implements IBlockFragilePlantElement {
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
         if (world.paperConfig.grassUpdateRate != 1 && (world.paperConfig.grassUpdateRate < 1 || (MinecraftServer.currentTick + blockposition.hashCode()) % world.paperConfig.grassUpdateRate != 0)) { return; } // Paper
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             int lightLevel = -1; // Paper
             if (world.getType(blockposition.up()).c() > 2 && (lightLevel = world.getLightLevel(blockposition.up())) < 4) { // Paper - move light check to end to avoid unneeded light lookups
                 // CraftBukkit start
diff --git a/src/main/java/net/minecraft/server/BlockIceFrost.java b/src/main/java/net/minecraft/server/BlockIceFrost.java
index 87f40bfcfee4b4a3645e50e45fc7474b5b574c66..ff83de0b74f9d089b7229287791d8559357e16b1 100644
--- a/src/main/java/net/minecraft/server/BlockIceFrost.java
+++ b/src/main/java/net/minecraft/server/BlockIceFrost.java
@@ -44,7 +44,7 @@ public class BlockIceFrost extends BlockIce {
 
     private int c(World world, BlockPosition blockposition) {
         int i = 0;
-        EnumDirection[] aenumdirection = EnumDirection.values();
+        EnumDirection[] aenumdirection = EnumDirection.VALUES; // NeonPaper - Single values array
         int j = aenumdirection.length;
 
         for (int k = 0; k < j; ++k) {
@@ -72,7 +72,7 @@ public class BlockIceFrost extends BlockIce {
         } else {
             this.b(world, blockposition);
             if (flag) {
-                EnumDirection[] aenumdirection = EnumDirection.values();
+                EnumDirection[] aenumdirection = EnumDirection.VALUES; // NeonPaper - Single values array
                 int j = aenumdirection.length;
 
                 for (int k = 0; k < j; ++k) {
diff --git a/src/main/java/net/minecraft/server/BlockJukeBox.java b/src/main/java/net/minecraft/server/BlockJukeBox.java
index 59c9a0f51ae999d05ad33cde7c8b7a051d5c5fb8..d949a9c88bd961e5ae58b9e69b69d9d15945d366 100644
--- a/src/main/java/net/minecraft/server/BlockJukeBox.java
+++ b/src/main/java/net/minecraft/server/BlockJukeBox.java
@@ -35,7 +35,7 @@ public class BlockJukeBox extends BlockTileEntity {
     }
 
     public void dropRecord(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             TileEntity tileentity = world.getTileEntity(blockposition);
 
             if (tileentity instanceof BlockJukeBox.TileEntityRecordPlayer) {
@@ -44,7 +44,7 @@ public class BlockJukeBox extends BlockTileEntity {
 
                 if (!itemstack.isEmpty()) {
                     world.triggerEffect(1010, blockposition, 0);
-                    world.a(blockposition, (SoundEffect) null);
+                    // world.a(blockposition, (SoundEffect) null); // NeonPaper - Clientside sound
                     blockjukebox_tileentityrecordplayer.setRecord(ItemStack.a);
                     float f = 0.7F;
                     double d0 = (double) (world.random.nextFloat() * 0.7F) + 0.15000000596046448D;
@@ -66,7 +66,7 @@ public class BlockJukeBox extends BlockTileEntity {
     }
 
     public void dropNaturally(World world, BlockPosition blockposition, IBlockData iblockdata, float f, int i) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             super.dropNaturally(world, blockposition, iblockdata, f, 0);
         }
     }
diff --git a/src/main/java/net/minecraft/server/BlockLeaves.java b/src/main/java/net/minecraft/server/BlockLeaves.java
index 4263bddc702a2e1e112a5716b4117ac00aed21d2..aabff9faddc6cca84568ae54df879dd51fac55e2 100644
--- a/src/main/java/net/minecraft/server/BlockLeaves.java
+++ b/src/main/java/net/minecraft/server/BlockLeaves.java
@@ -45,7 +45,7 @@ public abstract class BlockLeaves extends Block {
     }
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             if (((Boolean) iblockdata.get(BlockLeaves.CHECK_DECAY)).booleanValue() && ((Boolean) iblockdata.get(BlockLeaves.DECAYABLE)).booleanValue()) {
                 boolean flag = true;
                 boolean flag1 = true;
@@ -86,34 +86,43 @@ public abstract class BlockLeaves extends Block {
                         }
                     }
 
+                    // NeonPaper start - Optimize
+                    int key;
                     for (l = 1; l <= 4; ++l) {
                         for (i1 = -4; i1 <= 4; ++i1) {
                             for (j1 = -4; j1 <= 4; ++j1) {
                                 for (int k1 = -4; k1 <= 4; ++k1) {
                                     if (this.d[(i1 + 16) * 1024 + (j1 + 16) * 32 + k1 + 16] == l - 1) {
-                                        if (this.d[(i1 + 16 - 1) * 1024 + (j1 + 16) * 32 + k1 + 16] == -2) {
-                                            this.d[(i1 + 16 - 1) * 1024 + (j1 + 16) * 32 + k1 + 16] = l;
+                                        key = (i1 + 16 - 1) * 1024 + (j1 + 16) * 32 + k1 + 16;
+                                        if (this.d[key] == -2) {
+                                            this.d[key] = l;
                                         }
 
-                                        if (this.d[(i1 + 16 + 1) * 1024 + (j1 + 16) * 32 + k1 + 16] == -2) {
-                                            this.d[(i1 + 16 + 1) * 1024 + (j1 + 16) * 32 + k1 + 16] = l;
+                                        key = (i1 + 16 + 1) * 1024 + (j1 + 16) * 32 + k1 + 16;
+                                        if (this.d[key] == -2) {
+                                            this.d[key] = l;
                                         }
 
-                                        if (this.d[(i1 + 16) * 1024 + (j1 + 16 - 1) * 32 + k1 + 16] == -2) {
-                                            this.d[(i1 + 16) * 1024 + (j1 + 16 - 1) * 32 + k1 + 16] = l;
+                                        key = (i1 + 16) * 1024 + (j1 + 16 - 1) * 32 + k1 + 16;
+                                        if (this.d[key] == -2) {
+                                            this.d[key] = l;
                                         }
 
-                                        if (this.d[(i1 + 16) * 1024 + (j1 + 16 + 1) * 32 + k1 + 16] == -2) {
-                                            this.d[(i1 + 16) * 1024 + (j1 + 16 + 1) * 32 + k1 + 16] = l;
+                                        key = (i1 + 16) * 1024 + (j1 + 16 + 1) * 32 + k1 + 16;
+                                        if (this.d[key] == -2) {
+                                            this.d[key] = l;
                                         }
 
-                                        if (this.d[(i1 + 16) * 1024 + (j1 + 16) * 32 + (k1 + 16 - 1)] == -2) {
-                                            this.d[(i1 + 16) * 1024 + (j1 + 16) * 32 + (k1 + 16 - 1)] = l;
+                                        key = (i1 + 16) * 1024 + (j1 + 16) * 32 + (k1 + 16 - 1);
+                                        if (this.d[key] == -2) {
+                                            this.d[key] = l;
                                         }
 
-                                        if (this.d[(i1 + 16) * 1024 + (j1 + 16) * 32 + k1 + 16 + 1] == -2) {
-                                            this.d[(i1 + 16) * 1024 + (j1 + 16) * 32 + k1 + 16 + 1] = l;
+                                        key = (i1 + 16) * 1024 + (j1 + 16) * 32 + k1 + 16 + 1;
+                                        if (this.d[key] == -2) {
+                                            this.d[key] = l;
                                         }
+                                        // NeonPaper end
                                     }
                                 }
                             }
@@ -155,7 +164,7 @@ public abstract class BlockLeaves extends Block {
     }
 
     public void dropNaturally(World world, BlockPosition blockposition, IBlockData iblockdata, float f, int i) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             int j = this.x(iblockdata);
 
             if (i > 0) {
diff --git a/src/main/java/net/minecraft/server/BlockLever.java b/src/main/java/net/minecraft/server/BlockLever.java
index 5a3a6dfbec88819af955d0ee49ce669f626b4cca..c8ae14be1870da3a572e663549b565a9d9172bcd 100644
--- a/src/main/java/net/minecraft/server/BlockLever.java
+++ b/src/main/java/net/minecraft/server/BlockLever.java
@@ -40,7 +40,7 @@ public class BlockLever extends Block {
     }
 
     public boolean canPlace(World world, BlockPosition blockposition) {
-        EnumDirection[] aenumdirection = EnumDirection.values();
+        EnumDirection[] aenumdirection = EnumDirection.VALUES; // NeonPaper - Single values array
         int i = aenumdirection.length;
 
         for (int j = 0; j < i; ++j) {
@@ -128,7 +128,7 @@ public class BlockLever extends Block {
     }
 
     public boolean interact(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
-        if (world.isClientSide) {
+        if (false) { // NeonPaper - Remove isClientSide check
             return true;
         } else {
             // CraftBukkit start - Interact Lever
diff --git a/src/main/java/net/minecraft/server/BlockMinecartDetector.java b/src/main/java/net/minecraft/server/BlockMinecartDetector.java
index 872543df7a80e84b38ebdac09c40da8d52be71f4..edf61084233dd6cd11bc3d18c1869acc2af21388 100644
--- a/src/main/java/net/minecraft/server/BlockMinecartDetector.java
+++ b/src/main/java/net/minecraft/server/BlockMinecartDetector.java
@@ -36,7 +36,7 @@ public class BlockMinecartDetector extends BlockMinecartTrackAbstract {
     }
 
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Entity entity) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             if (!((Boolean) iblockdata.get(BlockMinecartDetector.POWERED)).booleanValue()) {
                 this.e(world, blockposition, iblockdata);
             }
@@ -46,7 +46,7 @@ public class BlockMinecartDetector extends BlockMinecartTrackAbstract {
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {}
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        if (!world.isClientSide && ((Boolean) iblockdata.get(BlockMinecartDetector.POWERED)).booleanValue()) {
+        if (((Boolean) iblockdata.get(BlockMinecartDetector.POWERED)).booleanValue()) { // NeonPaper - Remove isClientSide check
             this.e(world, blockposition, iblockdata);
         }
     }
diff --git a/src/main/java/net/minecraft/server/BlockMinecartTrackAbstract.java b/src/main/java/net/minecraft/server/BlockMinecartTrackAbstract.java
index 3d7c33811a2f10f84f215d6c7c0f3821755be260..7365b75c45af07271c33c90c7f1e3fd576e352b6 100644
--- a/src/main/java/net/minecraft/server/BlockMinecartTrackAbstract.java
+++ b/src/main/java/net/minecraft/server/BlockMinecartTrackAbstract.java
@@ -55,7 +55,7 @@ public abstract class BlockMinecartTrackAbstract extends Block {
     }
 
     public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             iblockdata = this.a(world, blockposition, iblockdata, true);
             if (this.c) {
                 iblockdata.doPhysics(world, blockposition, this, blockposition);
@@ -65,7 +65,7 @@ public abstract class BlockMinecartTrackAbstract extends Block {
     }
 
     public void a(IBlockData iblockdata, World world, BlockPosition blockposition, Block block, BlockPosition blockposition1) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition = (BlockMinecartTrackAbstract.EnumTrackPosition) iblockdata.get(this.g());
             boolean flag = false;
 
@@ -96,7 +96,7 @@ public abstract class BlockMinecartTrackAbstract extends Block {
     protected void a(IBlockData iblockdata, World world, BlockPosition blockposition, Block block) {}
 
     protected IBlockData a(World world, BlockPosition blockposition, IBlockData iblockdata, boolean flag) {
-        return world.isClientSide ? iblockdata : (new BlockMinecartTrackAbstract.MinecartTrackLogic(world, blockposition, iblockdata)).a(world.isBlockIndirectlyPowered(blockposition), flag).c();
+        return (new BlockMinecartTrackAbstract.MinecartTrackLogic(world, blockposition, iblockdata)).a(world.isBlockIndirectlyPowered(blockposition), flag).c(); // NeonPaper - Remove isClientSide check
     }
 
     public EnumPistonReaction h(IBlockData iblockdata) {
diff --git a/src/main/java/net/minecraft/server/BlockMonsterEggs.java b/src/main/java/net/minecraft/server/BlockMonsterEggs.java
index 6e9b8206caa7da6e3a03d481e7cacdff62667aa3..309cd8e7de1981b3761e9b4570bf6b087b02517b 100644
--- a/src/main/java/net/minecraft/server/BlockMonsterEggs.java
+++ b/src/main/java/net/minecraft/server/BlockMonsterEggs.java
@@ -48,7 +48,7 @@ public class BlockMonsterEggs extends Block {
     }
 
     public void dropNaturally(World world, BlockPosition blockposition, IBlockData iblockdata, float f, int i) {
-        if (!world.isClientSide && world.getGameRules().getBoolean("doTileDrops")) {
+        if (world.getGameRules().getBoolean("doTileDrops")) { // NeonPaper - Remove isClientSide check
             EntitySilverfish entitysilverfish = new EntitySilverfish(world);
 
             entitysilverfish.setPositionRotation((double) blockposition.getX() + 0.5D, (double) blockposition.getY(), (double) blockposition.getZ() + 0.5D, 0.0F, 0.0F);
@@ -63,7 +63,7 @@ public class BlockMonsterEggs extends Block {
     }
 
     public void a(CreativeModeTab creativemodetab, NonNullList<ItemStack> nonnulllist) {
-        BlockMonsterEggs.EnumMonsterEggVarient[] ablockmonstereggs_enummonstereggvarient = BlockMonsterEggs.EnumMonsterEggVarient.values();
+        BlockMonsterEggs.EnumMonsterEggVarient[] ablockmonstereggs_enummonstereggvarient = BlockMonsterEggs.EnumMonsterEggVarient.VALUES; // NeonPaper - Single values array
         int i = ablockmonstereggs_enummonstereggvarient.length;
 
         for (int j = 0; j < i; ++j) {
@@ -118,6 +118,7 @@ public class BlockMonsterEggs extends Block {
         private final int h;
         private final String i;
         private final String j;
+        public static final BlockMonsterEggs.EnumMonsterEggVarient[] VALUES = values(); // NeonPaper - Single values array
 
         private EnumMonsterEggVarient(int i, String s) {
             this(i, s, s);
@@ -156,7 +157,7 @@ public class BlockMonsterEggs extends Block {
         public abstract IBlockData d();
 
         public static BlockMonsterEggs.EnumMonsterEggVarient a(IBlockData iblockdata) {
-            BlockMonsterEggs.EnumMonsterEggVarient[] ablockmonstereggs_enummonstereggvarient = values();
+            BlockMonsterEggs.EnumMonsterEggVarient[] ablockmonstereggs_enummonstereggvarient = VALUES; // NeonPaper - Single values array
             int i = ablockmonstereggs_enummonstereggvarient.length;
 
             for (int j = 0; j < i; ++j) {
diff --git a/src/main/java/net/minecraft/server/BlockMycel.java b/src/main/java/net/minecraft/server/BlockMycel.java
index 9461b4a217f3c7ea55fab8ec3b08b2f8b24a75e0..961a5fb16eb61c32c7a761a91baa1081f9f29704 100644
--- a/src/main/java/net/minecraft/server/BlockMycel.java
+++ b/src/main/java/net/minecraft/server/BlockMycel.java
@@ -27,7 +27,7 @@ public class BlockMycel extends Block {
     }
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             if (world.getLightLevel(blockposition.up()) < 4 && world.getType(blockposition.up()).c() > 2) {
                 // CraftBukkit start
                 // world.setTypeUpdate(blockposition, Blocks.DIRT.getBlockData().set(BlockDirt.VARIANT, BlockDirt.EnumDirtVariant.DIRT));
diff --git a/src/main/java/net/minecraft/server/BlockNetherWart.java b/src/main/java/net/minecraft/server/BlockNetherWart.java
index 705c0217401b4ef9858303145bbd921186099e52..b0f26b9989e35dc940d573028a27deba797871c5 100644
--- a/src/main/java/net/minecraft/server/BlockNetherWart.java
+++ b/src/main/java/net/minecraft/server/BlockNetherWart.java
@@ -39,7 +39,7 @@ public class BlockNetherWart extends BlockPlant {
     }
 
     public void dropNaturally(World world, BlockPosition blockposition, IBlockData iblockdata, float f, int i) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             int j = 1;
 
             if (((Integer) iblockdata.get(BlockNetherWart.AGE)).intValue() >= 3) {
diff --git a/src/main/java/net/minecraft/server/BlockNote.java b/src/main/java/net/minecraft/server/BlockNote.java
index 9f201a8717fdcb57d890651c0e13d055224afbc0..8adf8119513def3fb564647d6589617f891fcb99 100644
--- a/src/main/java/net/minecraft/server/BlockNote.java
+++ b/src/main/java/net/minecraft/server/BlockNote.java
@@ -31,7 +31,7 @@ public class BlockNote extends BlockTileEntity {
     }
 
     public boolean interact(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
-        if (world.isClientSide) {
+        if (false) { // NeonPaper - Remove isClientSide check
             return true;
         } else {
             TileEntity tileentity = world.getTileEntity(blockposition);
@@ -49,7 +49,7 @@ public class BlockNote extends BlockTileEntity {
     }
 
     public void attack(World world, BlockPosition blockposition, EntityHuman entityhuman) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             TileEntity tileentity = world.getTileEntity(blockposition);
 
             if (tileentity instanceof TileEntityNote) {
@@ -76,7 +76,7 @@ public class BlockNote extends BlockTileEntity {
         float f = (float) Math.pow(2.0D, (double) (j - 12) / 12.0D);
 
         world.a((EntityHuman) null, blockposition, this.b(i), SoundCategory.RECORDS, 3.0F, f);
-        world.addParticle(EnumParticle.NOTE, (double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 1.2D, (double) blockposition.getZ() + 0.5D, (double) j / 24.0D, 0.0D, 0.0D, new int[0]);
+        // world.addParticle(EnumParticle.NOTE, (double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 1.2D, (double) blockposition.getZ() + 0.5D, (double) j / 24.0D, 0.0D, 0.0D, new int[0]); // NeonPaper - Clientside particles
         return true;
     }
 
diff --git a/src/main/java/net/minecraft/server/BlockObserver.java b/src/main/java/net/minecraft/server/BlockObserver.java
index 5836a76376d74f2dc39c43c12571d98e4b8382c7..d5d73f662dafc014676c10c653e4cf5397cdd6e5 100644
--- a/src/main/java/net/minecraft/server/BlockObserver.java
+++ b/src/main/java/net/minecraft/server/BlockObserver.java
@@ -49,7 +49,7 @@ public class BlockObserver extends BlockDirectional {
     public void a(IBlockData iblockdata, World world, BlockPosition blockposition, Block block, BlockPosition blockposition1) {}
 
     public void b(IBlockData iblockdata, World world, BlockPosition blockposition, Block block, BlockPosition blockposition1) {
-        if (!world.isClientSide && blockposition.shift((EnumDirection) iblockdata.get(BlockObserver.FACING)).equals(blockposition1)) {
+        if (blockposition.shift((EnumDirection) iblockdata.get(BlockObserver.FACING)).equals(blockposition1)) { // NeonPaper - Remove isClientSide check
             this.d(iblockdata, world, blockposition);
         }
 
@@ -85,7 +85,7 @@ public class BlockObserver extends BlockDirectional {
     }
 
     public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             if (((Boolean) iblockdata.get(BlockObserver.a)).booleanValue()) {
                 this.b(world, blockposition, iblockdata, world.random);
             }
diff --git a/src/main/java/net/minecraft/server/BlockPiston.java b/src/main/java/net/minecraft/server/BlockPiston.java
index 0f90172fa015e74beb563d840f770e2bd9cbf434..154b0187e15363947825afbdfbcc6356fd58c5b4 100644
--- a/src/main/java/net/minecraft/server/BlockPiston.java
+++ b/src/main/java/net/minecraft/server/BlockPiston.java
@@ -82,21 +82,21 @@ public class BlockPiston extends BlockDirectional {
 
     public void postPlace(World world, BlockPosition blockposition, IBlockData iblockdata, EntityLiving entityliving, ItemStack itemstack) {
         world.setTypeAndData(blockposition, iblockdata.set(BlockPiston.FACING, EnumDirection.a(blockposition, entityliving)), 2);
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             this.e(world, blockposition, iblockdata);
         }
 
     }
 
     public void a(IBlockData iblockdata, World world, BlockPosition blockposition, Block block, BlockPosition blockposition1) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             this.e(world, blockposition, iblockdata);
         }
 
     }
 
     public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        if (!world.isClientSide && world.getTileEntity(blockposition) == null) {
+        if (world.getTileEntity(blockposition) == null) { // NeonPaper - Remove isClientSide check
             this.e(world, blockposition, iblockdata);
         }
 
@@ -133,7 +133,7 @@ public class BlockPiston extends BlockDirectional {
     }
 
     private boolean a(World world, BlockPosition blockposition, EnumDirection enumdirection) {
-        EnumDirection[] aenumdirection = EnumDirection.values();
+        EnumDirection[] aenumdirection = EnumDirection.VALUES; // NeonPaper - Single values array
         int i = aenumdirection.length;
 
         int j;
@@ -150,7 +150,7 @@ public class BlockPiston extends BlockDirectional {
             return true;
         } else {
             BlockPosition blockposition1 = blockposition.up();
-            EnumDirection[] aenumdirection1 = EnumDirection.values();
+            EnumDirection[] aenumdirection1 = EnumDirection.VALUES; // NeonPaper - Single values array
 
             j = aenumdirection1.length;
 
@@ -169,7 +169,7 @@ public class BlockPiston extends BlockDirectional {
     public boolean a(IBlockData iblockdata, World world, BlockPosition blockposition, int i, int j) {
         EnumDirection enumdirection = (EnumDirection) iblockdata.get(BlockPiston.FACING);
 
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             boolean flag = this.a(world, blockposition, enumdirection);
 
             if (flag && i == 1) {
diff --git a/src/main/java/net/minecraft/server/BlockPortal.java b/src/main/java/net/minecraft/server/BlockPortal.java
index 415668724418fa69e425d5ffea6eb36503b27668..5deae342ad17166b41d88e58f4da7d30d7250449 100644
--- a/src/main/java/net/minecraft/server/BlockPortal.java
+++ b/src/main/java/net/minecraft/server/BlockPortal.java
@@ -172,10 +172,10 @@ public class BlockPortal extends BlockHalfTransparent {
         if (!blockportal_shape.d()) {
             return new ShapeDetector.ShapeDetectorCollection(blockposition, EnumDirection.NORTH, EnumDirection.UP, loadingcache, 1, 1, 1);
         } else {
-            int[] aint = new int[EnumDirection.EnumAxisDirection.values().length];
+            int[] aint = new int[EnumDirection.EnumAxisDirection.VALUES.length]; // NeonPaper - Single values array
             EnumDirection enumdirection = blockportal_shape.c.f();
             BlockPosition blockposition1 = blockportal_shape.position.up(blockportal_shape.a() - 1);
-            EnumDirection.EnumAxisDirection[] aenumdirection_enumaxisdirection = EnumDirection.EnumAxisDirection.values();
+            EnumDirection.EnumAxisDirection[] aenumdirection_enumaxisdirection = EnumDirection.EnumAxisDirection.VALUES; // NeonPaper - Single values array
             int i = aenumdirection_enumaxisdirection.length;
 
             int j;
@@ -196,7 +196,7 @@ public class BlockPortal extends BlockHalfTransparent {
             }
 
             EnumDirection.EnumAxisDirection enumdirection_enumaxisdirection1 = EnumDirection.EnumAxisDirection.POSITIVE;
-            EnumDirection.EnumAxisDirection[] aenumdirection_enumaxisdirection1 = EnumDirection.EnumAxisDirection.values();
+            EnumDirection.EnumAxisDirection[] aenumdirection_enumaxisdirection1 = EnumDirection.EnumAxisDirection.VALUES; // NeonPaper - Single values array
 
             j = aenumdirection_enumaxisdirection1.length;
 
diff --git a/src/main/java/net/minecraft/server/BlockPosition.java b/src/main/java/net/minecraft/server/BlockPosition.java
index 4849fcbc835040b5b6e46e3008080c2003b68d41..3962026078dbc0a83fd61acf915bb12bd70c9deb 100644
--- a/src/main/java/net/minecraft/server/BlockPosition.java
+++ b/src/main/java/net/minecraft/server/BlockPosition.java
@@ -39,91 +39,91 @@ public class BlockPosition extends BaseBlockPosition {
     }
 
     public BlockPosition(BaseBlockPosition baseblockposition) {
-        this(baseblockposition.getX(), baseblockposition.getY(), baseblockposition.getZ());
+        this(baseblockposition.a, baseblockposition.b, baseblockposition.c); // NeonPaper - Optimize BlockPosition 
     }
 
     public BlockPosition add(double x, double y, double z) { return this.a(x, y, z); } // Paper - OBFHELPER
     public BlockPosition a(double d0, double d1, double d2) {
-        return d0 == 0.0D && d1 == 0.0D && d2 == 0.0D ? this : new BlockPosition((double) this.getX() + d0, (double) this.getY() + d1, (double) this.getZ() + d2);
+        return d0 == 0.0D && d1 == 0.0D && d2 == 0.0D ? this : new BlockPosition((double) super.a + d0, (double) super.b + d1, (double) super.c + d2); // NeonPaper - Optimize BlockPosition 
     }
 
     public BlockPosition a(int i, int j, int k) {
-        return i == 0 && j == 0 && k == 0 ? this : new BlockPosition(this.getX() + i, this.getY() + j, this.getZ() + k);
+        return i == 0 && j == 0 && k == 0 ? this : new BlockPosition(super.a + i, super.b + j, super.c + k); // NeonPaper - Optimize BlockPosition 
     }
 
     public BlockPosition a(BaseBlockPosition baseblockposition) {
-        return this.a(baseblockposition.getX(), baseblockposition.getY(), baseblockposition.getZ());
+        return this.a(baseblockposition.a, baseblockposition.b, baseblockposition.c); // NeonPaper - Optimize BlockPosition 
     }
 
     public BlockPosition b(BaseBlockPosition baseblockposition) {
-        return this.a(-baseblockposition.getX(), -baseblockposition.getY(), -baseblockposition.getZ());
+        return this.a(-baseblockposition.a, -baseblockposition.b, -baseblockposition.c); // NeonPaper - Optimize BlockPosition 
     }
 
     public BlockPosition up() {
-        return new BlockPosition(this.getX(), this.getY() + 1, this.getZ()); // Paper - Optimize BlockPosition
+        return new BlockPosition(super.a, super.b + 1, super.c); // NeonPaper - Optimize BlockPosition // Paper - Optimize BlockPosition
     }
 
     public BlockPosition up(int i) {
-        return i == 0 ? this : new BlockPosition(this.getX(), this.getY() + i, this.getZ()); // Paper - Optimize BlockPosition
+        return i == 0 ? this : new BlockPosition(super.a, super.b + i, super.c); // NeonPaper - Optimize BlockPosition  // Paper - Optimize BlockPosition
     }
 
     public BlockPosition down() {
-        return new BlockPosition(this.getX(), this.getY() - 1, this.getZ()); // Paper - Optimize BlockPosition
+        return new BlockPosition(super.a, super.b - 1, super.c); // NeonPaper - Optimize BlockPosition  // Paper - Optimize BlockPosition
     }
 
     public BlockPosition down(int i) {
-        return i == 0 ? this : new BlockPosition(this.getX(), this.getY() - i, this.getZ()); // Paper - Optimize BlockPosition
+        return i == 0 ? this : new BlockPosition(super.a, super.b - i, super.c); // NeonPaper - Optimize BlockPosition // Paper - Optimize BlockPosition
     }
 
     public BlockPosition north() {
-        return new BlockPosition(this.getX(), this.getY(), this.getZ() - 1); // Paper - Optimize BlockPosition
+        return new BlockPosition(super.a, super.b, super.c - 1); // NeonPaper - Optimize BlockPosition // Paper - Optimize BlockPosition
     }
 
     public BlockPosition north(int i) {
-        return i == 0 ? this : new BlockPosition(this.getX(), this.getY(), this.getZ() - i); // Paper - Optimize BlockPosition
+        return i == 0 ? this : new BlockPosition(super.a, super.b, super.c - i); // NeonPaper - Optimize BlockPosition // Paper - Optimize BlockPosition
     }
 
     public BlockPosition south() {
-        return new BlockPosition(this.getX(), this.getY(), this.getZ() + 1); // Paper - Optimize BlockPosition
+        return new BlockPosition(super.a, super.b, super.c + 1); // NeonPaper - Optimize BlockPosition // Paper - Optimize BlockPosition
     }
 
     public BlockPosition south(int i) {
-        return i == 0 ? this : new BlockPosition(this.getX(), this.getY(), this.getZ() + i); // Paper - Optimize BlockPosition
+        return i == 0 ? this : new BlockPosition(super.a, super.b, super.c + i); // NeonPaper - Optimize BlockPosition // Paper - Optimize BlockPosition
     }
 
     public BlockPosition west() {
-        return new BlockPosition(this.getX() - 1, this.getY(), this.getZ()); // Paper - Optimize BlockPosition
+        return new BlockPosition(super.a - 1, super.b, super.c); // NeonPaper - Optimize BlockPosition // Paper - Optimize BlockPosition
     }
 
     public BlockPosition west(int i) {
-        return i == 0 ? this : new BlockPosition(this.getX() - i, this.getY(), this.getZ()); // Paper - Optimize BlockPosition
+        return i == 0 ? this : new BlockPosition(super.a - i, super.b, super.c); // NeonPaper - Optimize BlockPosition // Paper - Optimize BlockPosition
     }
 
     public BlockPosition east() {
-        return new BlockPosition(this.getX() + 1, this.getY(), this.getZ()); // Paper - Optimize BlockPosition
+        return new BlockPosition(super.a + 1, super.b, super.c); // NeonPaper - Optimize BlockPosition // Paper - Optimize BlockPosition
     }
 
     public BlockPosition east(int i) {
-        return i == 0 ? this : new BlockPosition(this.getX() + i, this.getY(), this.getZ()); // Paper - Optimize BlockPosition
+        return i == 0 ? this : new BlockPosition(super.a + i, super.b, super.c); // NeonPaper - Optimize BlockPosition // Paper - Optimize BlockPosition
     }
 
     public BlockPosition shift(EnumDirection enumdirection) {
         // Paper Start - Optimize BlockPosition
         switch(enumdirection) {
             case UP:
-                return new BlockPosition(this.getX(), this.getY() + 1, this.getZ());
+                return new BlockPosition(super.a, super.b + 1, super.c); // NeonPaper - Optimize BlockPosition
             case DOWN:
-                return new BlockPosition(this.getX(), this.getY() - 1, this.getZ());
+                return new BlockPosition(super.a, super.b - 1, super.c); // NeonPaper - Optimize BlockPosition
             case NORTH:
-                return new BlockPosition(this.getX(), this.getY(), this.getZ() - 1);
+                return new BlockPosition(super.a, super.b, super.c - 1); // NeonPaper - Optimize BlockPosition
             case SOUTH:
-                return new BlockPosition(this.getX(), this.getY(), this.getZ() + 1);
+                return new BlockPosition(super.a, super.b, super.c + 1); // NeonPaper - Optimize BlockPosition
             case WEST:
-                return new BlockPosition(this.getX() - 1, this.getY(), this.getZ());
+                return new BlockPosition(super.a - 1, super.b, super.c); // NeonPaper - Optimize BlockPosition
             case EAST:
-                return new BlockPosition(this.getX() + 1, this.getY(), this.getZ());
+                return new BlockPosition(super.a + 1, super.b, super.c); // NeonPaper - Optimize BlockPosition
             default:
-                return new BlockPosition(this.getX() + enumdirection.getAdjacentX(), this.getY() + enumdirection.getAdjacentY(), this.getZ() + enumdirection.getAdjacentZ());
+                return new BlockPosition(super.a + enumdirection.getAdjacentX(), super.b + enumdirection.getAdjacentY(), super.c + enumdirection.getAdjacentZ()); // NeonPaper - Optimize BlockPosition
         }
         // Paper End
     }
@@ -135,19 +135,19 @@ public class BlockPosition extends BaseBlockPosition {
         }
         switch(enumdirection) {
             case UP:
-                return new BlockPosition(this.getX(), this.getY() + i, this.getZ());
+                return new BlockPosition(super.a, super.b + i, super.c); // NeonPaper - Optimize BlockPosition
             case DOWN:
-                return new BlockPosition(this.getX(), this.getY() - i, this.getZ());
+                return new BlockPosition(super.a, super.b - i, super.c); // NeonPaper - Optimize BlockPosition
             case NORTH:
-                return new BlockPosition(this.getX(), this.getY(), this.getZ() - i);
+                return new BlockPosition(super.a, super.b, super.c - i); // NeonPaper - Optimize BlockPosition
             case SOUTH:
-                return new BlockPosition(this.getX(), this.getY(), this.getZ() + i);
+                return new BlockPosition(super.a, super.b, super.c + i); // NeonPaper - Optimize BlockPosition
             case WEST:
-                return new BlockPosition(this.getX() - i, this.getY(), this.getZ());
+                return new BlockPosition(super.a - i, super.b, super.c); // NeonPaper - Optimize BlockPosition
             case EAST:
-                return new BlockPosition(this.getX() + i, this.getY(), this.getZ());
+                return new BlockPosition(super.a + i, super.b, super.c); // NeonPaper - Optimize BlockPosition
             default:
-                return new BlockPosition(this.getX() + enumdirection.getAdjacentX() * i, this.getY() + enumdirection.getAdjacentY() * i, this.getZ() + enumdirection.getAdjacentZ() * i);
+                return new BlockPosition(super.a + enumdirection.getAdjacentX() * i, super.b + enumdirection.getAdjacentY() * i, super.c + enumdirection.getAdjacentZ() * i); // NeonPaper - Optimize BlockPosition
         }
         // Paper End
     }
@@ -159,22 +159,22 @@ public class BlockPosition extends BaseBlockPosition {
             return this;
 
         case CLOCKWISE_90:
-            return new BlockPosition(-this.getZ(), this.getY(), this.getX());
+            return new BlockPosition(-super.c, super.b, super.a); // NeonPaper - Optimize BlockPosition
 
         case CLOCKWISE_180:
-            return new BlockPosition(-this.getX(), this.getY(), -this.getZ());
+            return new BlockPosition(-super.a, super.b, -super.c); // NeonPaper - Optimize BlockPosition
 
         case COUNTERCLOCKWISE_90:
-            return new BlockPosition(this.getZ(), this.getY(), -this.getX());
+            return new BlockPosition(super.c, super.b, -super.a); // NeonPaper - Optimize BlockPosition
         }
     }
 
     public BlockPosition c(BaseBlockPosition baseblockposition) {
-        return new BlockPosition(this.getY() * baseblockposition.getZ() - this.getZ() * baseblockposition.getY(), this.getZ() * baseblockposition.getX() - this.getX() * baseblockposition.getZ(), this.getX() * baseblockposition.getY() - this.getY() * baseblockposition.getX());
+        return new BlockPosition(super.b * baseblockposition.getZ() - super.c * baseblockposition.getY(), super.c * baseblockposition.getX() - super.a * baseblockposition.getZ(), super.a * baseblockposition.getY() - super.b * baseblockposition.getX()); // NeonPaper - Optimize BlockPosition
     }
 
     public long asLong() {
-        return ((long) this.getX() & BlockPosition.i) << BlockPosition.h | ((long) this.getY() & BlockPosition.j) << BlockPosition.g | ((long) this.getZ() & BlockPosition.k) << 0;
+        return ((long) super.a & BlockPosition.i) << BlockPosition.h | ((long) super.b & BlockPosition.j) << BlockPosition.g | ((long) super.c & BlockPosition.k); // NeonPaper - Optimize BlockPosition
     }
 
     public static BlockPosition fromLong(long i) {
@@ -300,7 +300,7 @@ public class BlockPosition extends BaseBlockPosition {
         }
 
         public static BlockPosition.PooledBlockPosition e(int i, int j, int k) {
-            List list = BlockPosition.PooledBlockPosition.g;
+            // List list = BlockPosition.PooledBlockPosition.g; // NeonPaper - Unused
 
             synchronized (BlockPosition.PooledBlockPosition.g) {
                 if (!BlockPosition.PooledBlockPosition.g.isEmpty()) {
@@ -319,7 +319,7 @@ public class BlockPosition extends BaseBlockPosition {
 
         public void free() { t(); } // Paper - OBFHELPER
         public void t() {
-            List list = BlockPosition.PooledBlockPosition.g;
+            // List list = BlockPosition.PooledBlockPosition.g; // NeonPaper - Unused
 
             synchronized (BlockPosition.PooledBlockPosition.g) {
                 if (BlockPosition.PooledBlockPosition.g.size() < 100) {
@@ -463,11 +463,11 @@ public class BlockPosition extends BaseBlockPosition {
         }
 
         public BlockPosition.MutableBlockPosition c(EnumDirection enumdirection) {
-            return this.c(enumdirection, 1);
+            return this.c(super.a + enumdirection.getAdjacentX(), ((BaseBlockPosition) this).b + enumdirection.getAdjacentY(), ((BaseBlockPosition) this).c + enumdirection.getAdjacentZ()); // NeonPaper - Optimize BlockPosition
         }
 
         public BlockPosition.MutableBlockPosition c(EnumDirection enumdirection, int i) {
-            return this.c(this.getX() + enumdirection.getAdjacentX() * i, this.getY() + enumdirection.getAdjacentY() * i, this.getZ() + enumdirection.getAdjacentZ() * i); // Paper - USE THE BLEEPING GETTERS
+            return this.c(super.a + enumdirection.getAdjacentX() * i, ((BaseBlockPosition) this).b + enumdirection.getAdjacentY() * i, ((BaseBlockPosition) this).c + enumdirection.getAdjacentZ() * i); // NeonPaper - Optimize BlockPosition
         }
 
         public void p(int i) {
diff --git a/src/main/java/net/minecraft/server/BlockPressurePlateAbstract.java b/src/main/java/net/minecraft/server/BlockPressurePlateAbstract.java
index 602cff68cd197261a0dff27ca060436c0c183edf..6b1056de7c67babca2769aba02ab33471a515e97 100644
--- a/src/main/java/net/minecraft/server/BlockPressurePlateAbstract.java
+++ b/src/main/java/net/minecraft/server/BlockPressurePlateAbstract.java
@@ -71,7 +71,7 @@ public abstract class BlockPressurePlateAbstract extends Block {
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {}
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             int i = this.getPower(iblockdata);
 
             if (i > 0) {
@@ -82,7 +82,7 @@ public abstract class BlockPressurePlateAbstract extends Block {
     }
 
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Entity entity) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             int i = this.getPower(iblockdata);
 
             if (i == 0) {
diff --git a/src/main/java/net/minecraft/server/BlockPressurePlateWeighted.java b/src/main/java/net/minecraft/server/BlockPressurePlateWeighted.java
index e8ff343e13fb45ab5ec8f86acceb139369f7b91b..c245747192cf4acb76feb3efe1572fc4ed12b4a6 100644
--- a/src/main/java/net/minecraft/server/BlockPressurePlateWeighted.java
+++ b/src/main/java/net/minecraft/server/BlockPressurePlateWeighted.java
@@ -45,7 +45,7 @@ public class BlockPressurePlateWeighted extends BlockPressurePlateAbstract {
         // CraftBukkit end
 
         if (i > 0) {
-            float f = (float) Math.min(this.weight, i) / (float) this.weight;
+            float f = (float) /*Math.min(this.weight, i)*/i / (float) this.weight; // NeonPaper - Optimize
 
             return MathHelper.f(f * 15.0F);
         } else {
diff --git a/src/main/java/net/minecraft/server/BlockPumpkin.java b/src/main/java/net/minecraft/server/BlockPumpkin.java
index ff9508e17a3973aea2d9f0d69d6b0f6b8c88e158..c8725bedde674d2add59494b5efa88cc08e801fd 100644
--- a/src/main/java/net/minecraft/server/BlockPumpkin.java
+++ b/src/main/java/net/minecraft/server/BlockPumpkin.java
@@ -75,9 +75,11 @@ public class BlockPumpkin extends BlockFacingHorizontal {
                 CriterionTriggers.m.a(entityplayer, (Entity) entitysnowman);
             }
 
+            /* // NeonPaper start - Clientside particles
             for (j = 0; j < 120; ++j) {
                 world.addParticle(EnumParticle.SNOW_SHOVEL, (double) blockposition1.getX() + world.random.nextDouble(), (double) blockposition1.getY() + world.random.nextDouble() * 2.5D, (double) blockposition1.getZ() + world.random.nextDouble(), 0.0D, 0.0D, 0.0D, new int[0]);
             }
+            */ // NeonPaper end
 
             for (j = 0; j < this.getDetectorSnowGolem().b(); ++j) {
                 ShapeDetectorBlock shapedetectorblock1 = shapedetector_shapedetectorcollection.a(0, j, 0);
@@ -113,9 +115,11 @@ public class BlockPumpkin extends BlockFacingHorizontal {
                     CriterionTriggers.m.a(entityplayer, (Entity) entityirongolem);
                 }
 
+                /* // NeonPaper start - Clientside particles
                 for (j = 0; j < 120; ++j) {
                     world.addParticle(EnumParticle.SNOWBALL, (double) blockposition2.getX() + world.random.nextDouble(), (double) blockposition2.getY() + world.random.nextDouble() * 3.9D, (double) blockposition2.getZ() + world.random.nextDouble(), 0.0D, 0.0D, 0.0D, new int[0]);
                 }
+                */ // NeonPaper end
 
                 for (j = 0; j < this.getDetectorIronGolem().c(); ++j) {
                     for (int l = 0; l < this.getDetectorIronGolem().b(); ++l) {
diff --git a/src/main/java/net/minecraft/server/BlockRedstoneLamp.java b/src/main/java/net/minecraft/server/BlockRedstoneLamp.java
index 0484130eb84ad5205a045debd3ad26e19448abf6..54b8f4ce4df363f0e22ae3183e12732c06a8fa50 100644
--- a/src/main/java/net/minecraft/server/BlockRedstoneLamp.java
+++ b/src/main/java/net/minecraft/server/BlockRedstoneLamp.java
@@ -18,7 +18,7 @@ public class BlockRedstoneLamp extends Block {
     }
 
     public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             if (this.a && !world.isBlockIndirectlyPowered(blockposition)) {
                 // CraftBukkit start
                 if (CraftEventFactory.callRedstoneChange(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), 15, 0).getNewCurrent() != 0) {
@@ -39,7 +39,7 @@ public class BlockRedstoneLamp extends Block {
     }
 
     public void a(IBlockData iblockdata, World world, BlockPosition blockposition, Block block, BlockPosition blockposition1) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             if (this.a && !world.isBlockIndirectlyPowered(blockposition)) {
                 world.a(blockposition, (Block) this, 4);
             } else if (!this.a && world.isBlockIndirectlyPowered(blockposition)) {
@@ -55,7 +55,7 @@ public class BlockRedstoneLamp extends Block {
     }
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             if (this.a && !world.isBlockIndirectlyPowered(blockposition)) {
                 // CraftBukkit start
                 if (CraftEventFactory.callRedstoneChange(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), 15, 0).getNewCurrent() != 0) {
diff --git a/src/main/java/net/minecraft/server/BlockRedstoneOre.java b/src/main/java/net/minecraft/server/BlockRedstoneOre.java
index 9bb02acd37ae4da59183044575b9a67dd8296b09..95af391644a24a573e7228204a2a885baf1438ec 100644
--- a/src/main/java/net/minecraft/server/BlockRedstoneOre.java
+++ b/src/main/java/net/minecraft/server/BlockRedstoneOre.java
@@ -117,6 +117,7 @@ public class BlockRedstoneOre extends Block {
     }
 
     private void playEffect(World world, BlockPosition blockposition) {
+        if (true) return; // NeonPaper - Clientside particles
         Random random = world.random;
         double d0 = 0.0625D;
 
diff --git a/src/main/java/net/minecraft/server/BlockRedstoneTorch.java b/src/main/java/net/minecraft/server/BlockRedstoneTorch.java
index 429f26ed5b35987aebe65e2dbdf24811521bdbbf..06ff48a7ad780a71500b9402a1c0133248eee74f 100644
--- a/src/main/java/net/minecraft/server/BlockRedstoneTorch.java
+++ b/src/main/java/net/minecraft/server/BlockRedstoneTorch.java
@@ -52,7 +52,7 @@ public class BlockRedstoneTorch extends BlockTorch {
 
     public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
         if (this.isOn) {
-            EnumDirection[] aenumdirection = EnumDirection.values();
+            EnumDirection[] aenumdirection = EnumDirection.VALUES; // NeonPaper - Single values array
             int i = aenumdirection.length;
 
             for (int j = 0; j < i; ++j) {
@@ -66,7 +66,7 @@ public class BlockRedstoneTorch extends BlockTorch {
 
     public void remove(World world, BlockPosition blockposition, IBlockData iblockdata) {
         if (this.isOn) {
-            EnumDirection[] aenumdirection = EnumDirection.values();
+            EnumDirection[] aenumdirection = EnumDirection.VALUES; // NeonPaper - Single values array
             int i = aenumdirection.length;
 
             for (int j = 0; j < i; ++j) {
@@ -117,7 +117,7 @@ public class BlockRedstoneTorch extends BlockTorch {
         if (this.isOn) {
             if (flag) {
                 // CraftBukkit start
-                if (oldCurrent != 0) {
+                if (/*oldCurrent != 0*/true) { // NeonPaper start - Always true
                     event.setNewCurrent(0);
                     manager.callEvent(event);
                     if (event.getNewCurrent() != 0) {
@@ -129,6 +129,7 @@ public class BlockRedstoneTorch extends BlockTorch {
                 if (this.a(world, blockposition, true)) {
                     world.a((EntityHuman) null, blockposition, SoundEffects.gm, SoundCategory.BLOCKS, 0.5F, 2.6F + (world.random.nextFloat() - world.random.nextFloat()) * 0.8F);
 
+                    /* // NeonPaper start - Clientside particles
                     for (int i = 0; i < 5; ++i) {
                         double d0 = (double) blockposition.getX() + random.nextDouble() * 0.6D + 0.2D;
                         double d1 = (double) blockposition.getY() + random.nextDouble() * 0.6D + 0.2D;
@@ -136,13 +137,14 @@ public class BlockRedstoneTorch extends BlockTorch {
 
                         world.addParticle(EnumParticle.SMOKE_NORMAL, d0, d1, d2, 0.0D, 0.0D, 0.0D, new int[0]);
                     }
+                    */ // NeonPaper end
 
                     world.a(blockposition, world.getType(blockposition).getBlock(), 160);
                 }
             }
         } else if (!flag && !this.a(world, blockposition, false)) {
             // CraftBukkit start
-            if (oldCurrent != 15) {
+            if (/*oldCurrent != 15*/true) { // NeonPaper start - Always true
                 event.setNewCurrent(15);
                 manager.callEvent(event);
                 if (event.getNewCurrent() != 15) {
diff --git a/src/main/java/net/minecraft/server/BlockRedstoneWire.java b/src/main/java/net/minecraft/server/BlockRedstoneWire.java
index 9d90da98d1edbb9a73d23b566d4743b151811c48..c34d1506b47c3d09bf31156453b95507696e8a3c 100644
--- a/src/main/java/net/minecraft/server/BlockRedstoneWire.java
+++ b/src/main/java/net/minecraft/server/BlockRedstoneWire.java
@@ -38,19 +38,19 @@ public class BlockRedstoneWire extends Block {
         boolean flag2 = iblockdata.get(BlockRedstoneWire.SOUTH) != BlockRedstoneWire.EnumRedstoneWireConnection.NONE;
         boolean flag3 = iblockdata.get(BlockRedstoneWire.WEST) != BlockRedstoneWire.EnumRedstoneWireConnection.NONE;
 
-        if (flag || flag2 && !flag && !flag1 && !flag3) {
+        if (flag || flag2 && /*!flag*/true && !flag1 && !flag3) { // NeonPaper - Optimize
             i |= 1 << EnumDirection.NORTH.get2DRotationValue();
         }
 
-        if (flag1 || flag3 && !flag && !flag1 && !flag2) {
+        if (flag1 || flag3 && !flag && /*!flag1*/true && !flag2) { // NeonPaper - Optimize
             i |= 1 << EnumDirection.EAST.get2DRotationValue();
         }
 
-        if (flag2 || flag && !flag1 && !flag2 && !flag3) {
+        if (flag2 || flag && !flag1 && /*!flag2*/true && !flag3) { // NeonPaper - Optimize
             i |= 1 << EnumDirection.SOUTH.get2DRotationValue();
         }
 
-        if (flag3 || flag1 && !flag && !flag2 && !flag3) {
+        if (flag3 || flag1 && !flag && !flag2 && /*!flag3*/true) { // NeonPaper - Optimize
             i |= 1 << EnumDirection.WEST.get2DRotationValue();
         }
 
@@ -186,7 +186,7 @@ public class BlockRedstoneWire extends Block {
             }
 
             this.B.add(blockposition);
-            EnumDirection[] aenumdirection = EnumDirection.values();
+            EnumDirection[] aenumdirection = EnumDirection.VALUES; // NeonPaper - Single values array
             int i1 = aenumdirection.length;
 
             for (int j1 = 0; j1 < i1; ++j1) {
@@ -202,7 +202,7 @@ public class BlockRedstoneWire extends Block {
     private void b(World world, BlockPosition blockposition) {
         if (world.getType(blockposition).getBlock() == this) {
             world.applyPhysics(blockposition, this, false);
-            EnumDirection[] aenumdirection = EnumDirection.values();
+            EnumDirection[] aenumdirection = EnumDirection.VALUES; // NeonPaper - Single values array
             int i = aenumdirection.length;
 
             for (int j = 0; j < i; ++j) {
@@ -215,7 +215,7 @@ public class BlockRedstoneWire extends Block {
     }
 
     public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             this.e(world, blockposition, iblockdata);
             Iterator iterator = EnumDirection.EnumDirectionLimit.VERTICAL.iterator();
 
@@ -251,8 +251,8 @@ public class BlockRedstoneWire extends Block {
 
     public void remove(World world, BlockPosition blockposition, IBlockData iblockdata) {
         super.remove(world, blockposition, iblockdata);
-        if (!world.isClientSide) {
-            EnumDirection[] aenumdirection = EnumDirection.values();
+        if (true) { // NeonPaper - Remove isClientSide check
+            EnumDirection[] aenumdirection = EnumDirection.VALUES; // NeonPaper - Single values array
             int i = aenumdirection.length;
 
             for (int j = 0; j < i; ++j) {
@@ -298,7 +298,7 @@ public class BlockRedstoneWire extends Block {
     }
 
     public void a(IBlockData iblockdata, World world, BlockPosition blockposition, Block block, BlockPosition blockposition1) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             if (this.canPlace(world, blockposition)) {
                 this.e(world, blockposition, iblockdata);
             } else {
diff --git a/src/main/java/net/minecraft/server/BlockSapling.java b/src/main/java/net/minecraft/server/BlockSapling.java
index 3bbb123bcb344fc7ffe6a3af016170837ace94f2..a2ebc6bdcfdaab28b535d2c48bc4f0d84b966126 100644
--- a/src/main/java/net/minecraft/server/BlockSapling.java
+++ b/src/main/java/net/minecraft/server/BlockSapling.java
@@ -32,7 +32,7 @@ public class BlockSapling extends BlockPlant implements IBlockFragilePlantElemen
     }
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             super.b(world, blockposition, iblockdata, random);
             if (world.isLightLevel(blockposition.up(), 9) && random.nextInt(Math.max(2, (int) (((100.0F / world.spigotConfig.saplingModifier) * 7) + 0.5F))) == 0) { // Spigot // Paper
                 // CraftBukkit start
@@ -204,7 +204,7 @@ public class BlockSapling extends BlockPlant implements IBlockFragilePlantElemen
     }
 
     public void a(CreativeModeTab creativemodetab, NonNullList<ItemStack> nonnulllist) {
-        BlockWood.EnumLogVariant[] ablockwood_enumlogvariant = BlockWood.EnumLogVariant.values();
+        BlockWood.EnumLogVariant[] ablockwood_enumlogvariant = BlockWood.EnumLogVariant.VALUES; // NeonPaper - Single values array
         int i = ablockwood_enumlogvariant.length;
 
         for (int j = 0; j < i; ++j) {
diff --git a/src/main/java/net/minecraft/server/BlockShulkerBox.java b/src/main/java/net/minecraft/server/BlockShulkerBox.java
index 74e2e448f6c64a2bd1a4c83bc5d0223c5c55cee7..234cbfc88a3eea13833bed5f5d9d7da399153e0c 100644
--- a/src/main/java/net/minecraft/server/BlockShulkerBox.java
+++ b/src/main/java/net/minecraft/server/BlockShulkerBox.java
@@ -33,7 +33,7 @@ public class BlockShulkerBox extends BlockTileEntity {
     }
 
     public boolean interact(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
-        if (world.isClientSide) {
+        if (false) { // NeonPaper - Remove isClientSide check
             return true;
         } else if (entityhuman.isSpectator()) {
             return true;
@@ -132,6 +132,7 @@ public class BlockShulkerBox extends BlockTileEntity {
     }
 
     public void remove(World world, BlockPosition blockposition, IBlockData iblockdata) {
+        /* // NeonPaper start - Always false
         TileEntity tileentity = world.getTileEntity(blockposition);
 
         if (false && tileentity instanceof TileEntityShulkerBox) { // CraftBukkit - moved up
@@ -153,6 +154,7 @@ public class BlockShulkerBox extends BlockTileEntity {
             }
 
         }
+        */ // NeonPaper end
         world.updateAdjacentComparators(blockposition, iblockdata.getBlock()); // CraftBukkit - moved down
 
         super.remove(world, blockposition, iblockdata);
diff --git a/src/main/java/net/minecraft/server/BlockSign.java b/src/main/java/net/minecraft/server/BlockSign.java
index 468186c56368c04a6536264c8ca5926ad2dbe565..bc0c9f6b0515309d28fe556c450bf3ba70e387b6 100644
--- a/src/main/java/net/minecraft/server/BlockSign.java
+++ b/src/main/java/net/minecraft/server/BlockSign.java
@@ -49,7 +49,7 @@ public class BlockSign extends BlockTileEntity {
     }
 
     public boolean interact(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
-        if (world.isClientSide) {
+        if (false) { // NeonPaper - Remove isClientSide check
             return true;
         } else {
             TileEntity tileentity = world.getTileEntity(blockposition);
diff --git a/src/main/java/net/minecraft/server/BlockSkull.java b/src/main/java/net/minecraft/server/BlockSkull.java
index 2c3bb3ca3b74f5f80a5f9403e4321f7689a7517a..080f4942473b824f3fb7fad50aa2db988a82d818 100644
--- a/src/main/java/net/minecraft/server/BlockSkull.java
+++ b/src/main/java/net/minecraft/server/BlockSkull.java
@@ -121,7 +121,7 @@ public class BlockSkull extends BlockTileEntity {
     }
 
     public void remove(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             // CraftBukkit start - Drop item in code above, not here
             // if (!((Boolean) iblockdata.get(BlockSkull.NODROP)).booleanValue()) {
             if (false) {
@@ -153,12 +153,12 @@ public class BlockSkull extends BlockTileEntity {
     }
 
     public boolean b(World world, BlockPosition blockposition, ItemStack itemstack) {
-        return itemstack.getData() == 1 && blockposition.getY() >= 2 && world.getDifficulty() != EnumDifficulty.PEACEFUL && !world.isClientSide ? this.e().a(world, blockposition) != null : false;
+        return itemstack.getData() == 1 && blockposition.getY() >= 2 && world.getDifficulty() != EnumDifficulty.PEACEFUL ? this.e().a(world, blockposition) != null : false; // NeonPaper - Remove isClientSide check
     }
 
     public void a(World world, BlockPosition blockposition, TileEntitySkull tileentityskull) {
         if (world.captureBlockStates) return; // CraftBukkit
-        if (tileentityskull.getSkullType() == 1 && blockposition.getY() >= 2 && world.getDifficulty() != EnumDifficulty.PEACEFUL && !world.isClientSide) {
+        if (tileentityskull.getSkullType() == 1 && blockposition.getY() >= 2 && world.getDifficulty() != EnumDifficulty.PEACEFUL) { // NeonPaper - Remove isClientSide check
             ShapeDetector shapedetector = this.g();
             ShapeDetector.ShapeDetectorCollection shapedetector_shapedetectorcollection = shapedetector.a(world, blockposition);
 
@@ -190,7 +190,7 @@ public class BlockSkull extends BlockTileEntity {
                     }
                 }
 
-                BlockPosition blockposition1 = shapedetector_shapedetectorcollection.a(1, 0, 0).getPosition();
+                // BlockPosition blockposition1 = shapedetector_shapedetectorcollection.a(1, 0, 0).getPosition(); // NeonPaper - Clientside particles
                 EntityWither entitywither = new EntityWither(world);
                 BlockPosition blockposition2 = shapedetector_shapedetectorcollection.a(1, 2, 0).getPosition();
 
@@ -211,9 +211,11 @@ public class BlockSkull extends BlockTileEntity {
 
                 int k;
 
+                /* // NeonPaper start - Clientside particles
                 for (k = 0; k < 120; ++k) {
                     world.addParticle(EnumParticle.SNOWBALL, (double) blockposition1.getX() + world.random.nextDouble(), (double) (blockposition1.getY() - 2) + world.random.nextDouble() * 3.9D, (double) blockposition1.getZ() + world.random.nextDouble(), 0.0D, 0.0D, 0.0D, new int[0]);
                 }
+                */ // NeonPaper end
 
                 for (k = 0; k < shapedetector.c(); ++k) {
                     for (int l = 0; l < shapedetector.b(); ++l) {
diff --git a/src/main/java/net/minecraft/server/BlockSoil.java b/src/main/java/net/minecraft/server/BlockSoil.java
index f235ea592ae40211077f75f2eb60e4af570e2429..5c4b290971d2a074bab397f9f9b2568372e1d74f 100644
--- a/src/main/java/net/minecraft/server/BlockSoil.java
+++ b/src/main/java/net/minecraft/server/BlockSoil.java
@@ -51,7 +51,7 @@ public class BlockSoil extends Block {
 
     public void fallOn(World world, BlockPosition blockposition, Entity entity, float f) {
         super.fallOn(world, blockposition, entity, f); // CraftBukkit - moved here as game rules / events shouldn't affect fall damage.
-        if (!world.isClientSide && world.random.nextFloat() < f - 0.5F && entity instanceof EntityLiving && (entity instanceof EntityHuman || world.getGameRules().getBoolean("mobGriefing")) && entity.width * entity.width * entity.length > 0.512F) {
+        if (world.random.nextFloat() < f - 0.5F && entity instanceof EntityLiving && (entity instanceof EntityHuman || world.getGameRules().getBoolean("mobGriefing")) && entity.width * entity.width * entity.length > 0.512F) { // NeonPaper - Remove isClientSide check
             // CraftBukkit start - Interact soil
             org.bukkit.event.Cancellable cancellable;
             if (entity instanceof EntityHuman) {
diff --git a/src/main/java/net/minecraft/server/BlockSponge.java b/src/main/java/net/minecraft/server/BlockSponge.java
index 5c52045645b17af327b6228615719bb56322b5b0..273626a09929a98645f156d3c30fc924017a29ce 100644
--- a/src/main/java/net/minecraft/server/BlockSponge.java
+++ b/src/main/java/net/minecraft/server/BlockSponge.java
@@ -54,7 +54,7 @@ public class BlockSponge extends Block {
 
             blockposition1 = (BlockPosition) tuple.a();
             int j = ((Integer) tuple.b()).intValue();
-            EnumDirection[] aenumdirection = EnumDirection.values();
+            EnumDirection[] aenumdirection = EnumDirection.VALUES; // NeonPaper - Single values array
             int k = aenumdirection.length;
 
             for (int l = 0; l < k; ++l) {
diff --git a/src/main/java/net/minecraft/server/BlockStainedGlass.java b/src/main/java/net/minecraft/server/BlockStainedGlass.java
index 1acf90f6d0ad708a7920422818908defb6fd0b7d..bea41c634831ff13e09e0bce24687a40baf64935 100644
--- a/src/main/java/net/minecraft/server/BlockStainedGlass.java
+++ b/src/main/java/net/minecraft/server/BlockStainedGlass.java
@@ -17,7 +17,7 @@ public class BlockStainedGlass extends BlockHalfTransparent {
     }
 
     public void a(CreativeModeTab creativemodetab, NonNullList<ItemStack> nonnulllist) {
-        EnumColor[] aenumcolor = EnumColor.values();
+        EnumColor[] aenumcolor = EnumColor.VALUES; // NeonPaper - Single values array
         int i = aenumcolor.length;
 
         for (int j = 0; j < i; ++j) {
@@ -49,14 +49,14 @@ public class BlockStainedGlass extends BlockHalfTransparent {
     }
 
     public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             BlockBeacon.c(world, blockposition);
         }
 
     }
 
     public void remove(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             BlockBeacon.c(world, blockposition);
         }
 
diff --git a/src/main/java/net/minecraft/server/BlockStainedGlassPane.java b/src/main/java/net/minecraft/server/BlockStainedGlassPane.java
index 884bdc42cc8365cfb4c12f86a066f1df0899111d..b5513b43f3cb28fab8fb541d01f909f2298c87c6 100644
--- a/src/main/java/net/minecraft/server/BlockStainedGlassPane.java
+++ b/src/main/java/net/minecraft/server/BlockStainedGlassPane.java
@@ -15,7 +15,7 @@ public class BlockStainedGlassPane extends BlockThin {
     }
 
     public void a(CreativeModeTab creativemodetab, NonNullList<ItemStack> nonnulllist) {
-        for (int i = 0; i < EnumColor.values().length; ++i) {
+        for (int i = 0; i < EnumColor.VALUES.length; ++i) { // NeonPaper - Single values array
             nonnulllist.add(new ItemStack(this, 1, i));
         }
 
@@ -67,14 +67,14 @@ public class BlockStainedGlassPane extends BlockThin {
     }
 
     public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             BlockBeacon.c(world, blockposition);
         }
 
     }
 
     public void remove(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             BlockBeacon.c(world, blockposition);
         }
 
diff --git a/src/main/java/net/minecraft/server/BlockStationary.java b/src/main/java/net/minecraft/server/BlockStationary.java
index 2a741c1235cacdfaa841de37aed14fd97f5d2e61..3ef5037cb5e329f7ddce498016e2e9bd48e8602d 100644
--- a/src/main/java/net/minecraft/server/BlockStationary.java
+++ b/src/main/java/net/minecraft/server/BlockStationary.java
@@ -48,7 +48,7 @@ public class BlockStationary extends BlockFluids {
                         if (block.material == Material.AIR) {
                             if (this.c(world, blockposition1)) {
                                  // CraftBukkit start - Prevent lava putting something on fire
-                                if (world.getType(blockposition1) != Blocks.FIRE) {
+                                if (/*world.getType(blockposition1) != Blocks.FIRE*/true) { // NeonPaper start - Always true
                                     if (CraftEventFactory.callBlockIgniteEvent(world, blockposition1.getX(), blockposition1.getY(), blockposition1.getZ(), blockposition.getX(), blockposition.getY(), blockposition.getZ()).isCancelled()) {
                                         continue;
                                     }
@@ -72,7 +72,7 @@ public class BlockStationary extends BlockFluids {
                         if (world.isEmpty(blockposition2.up()) && this.d(world, blockposition2)) {
                             // CraftBukkit start - Prevent lava putting something on fire
                             BlockPosition up = blockposition2.up();
-                            if (world.getType(up) != Blocks.FIRE) {
+                            if (/*world.getType(up) != Blocks.FIRE*/true) { // NeonPaper start - Always true
                                 if (CraftEventFactory.callBlockIgniteEvent(world, up.getX(), up.getY(), up.getZ(), blockposition.getX(), blockposition.getY(), blockposition.getZ()).isCancelled()) {
                                     continue;
                                 }
@@ -88,7 +88,7 @@ public class BlockStationary extends BlockFluids {
     }
 
     protected boolean c(World world, BlockPosition blockposition) {
-        EnumDirection[] aenumdirection = EnumDirection.values();
+        EnumDirection[] aenumdirection = EnumDirection.VALUES; // NeonPaper - Single values array
         int i = aenumdirection.length;
 
         for (int j = 0; j < i; ++j) {
diff --git a/src/main/java/net/minecraft/server/BlockStem.java b/src/main/java/net/minecraft/server/BlockStem.java
index 5ae7bd9dff0099690c275acf92bfa01639a2f1bd..ffe9da1ead92539c84fcbd0028e039669717c815 100644
--- a/src/main/java/net/minecraft/server/BlockStem.java
+++ b/src/main/java/net/minecraft/server/BlockStem.java
@@ -91,7 +91,7 @@ public class BlockStem extends BlockPlant implements IBlockFragilePlantElement {
 
     public void dropNaturally(World world, BlockPosition blockposition, IBlockData iblockdata, float f, int i) {
         super.dropNaturally(world, blockposition, iblockdata, f, i);
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             Item item = this.e();
 
             if (item != null) {
diff --git a/src/main/java/net/minecraft/server/BlockTNT.java b/src/main/java/net/minecraft/server/BlockTNT.java
index 9473e31465f40c99cbe606ddf0eafb9d481f4c5a..d8ac3bc7d7a43360ec055fcdedf9e5ae8d567912 100644
--- a/src/main/java/net/minecraft/server/BlockTNT.java
+++ b/src/main/java/net/minecraft/server/BlockTNT.java
@@ -28,7 +28,7 @@ public class BlockTNT extends Block {
     }
 
     public void wasExploded(World world, BlockPosition blockposition, Explosion explosion) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(world, (double) ((float) blockposition.getX() + 0.5F), (double) blockposition.getY(), (double) ((float) blockposition.getZ() + 0.5F), explosion.getSource());
 
             entitytntprimed.setFuseTicks((short) (world.random.nextInt(entitytntprimed.getFuseTicks() / 4) + entitytntprimed.getFuseTicks() / 8));
@@ -41,7 +41,7 @@ public class BlockTNT extends Block {
     }
 
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, EntityLiving entityliving) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             if (((Boolean) iblockdata.get(BlockTNT.EXPLODE)).booleanValue()) {
                 EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(world, (double) ((float) blockposition.getX() + 0.5F), (double) blockposition.getY(), (double) ((float) blockposition.getZ() + 0.5F), entityliving);
 
@@ -71,7 +71,7 @@ public class BlockTNT extends Block {
     }
 
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Entity entity) {
-        if (!world.isClientSide && entity instanceof EntityArrow) {
+        if (entity instanceof EntityArrow) { // NeonPaper - Remove isClientSide check
             EntityArrow entityarrow = (EntityArrow) entity;
 
             if (entityarrow.isBurning()) {
diff --git a/src/main/java/net/minecraft/server/BlockTallPlant.java b/src/main/java/net/minecraft/server/BlockTallPlant.java
index e3ebf6fcc2192f199fd03672bad7e9f658e4381c..49d801f42d286756b44305e7a04d6e73c42665e7 100644
--- a/src/main/java/net/minecraft/server/BlockTallPlant.java
+++ b/src/main/java/net/minecraft/server/BlockTallPlant.java
@@ -107,7 +107,7 @@ public class BlockTallPlant extends BlockPlant implements IBlockFragilePlantElem
     }
 
     public void a(World world, EntityHuman entityhuman, BlockPosition blockposition, IBlockData iblockdata, @Nullable TileEntity tileentity, ItemStack itemstack) {
-        if (world.isClientSide || itemstack.getItem() != Items.SHEARS || iblockdata.get(BlockTallPlant.HALF) != BlockTallPlant.EnumTallPlantHalf.LOWER || !this.b(world, blockposition, iblockdata, entityhuman)) {
+        if (itemstack.getItem() != Items.SHEARS || iblockdata.get(BlockTallPlant.HALF) != BlockTallPlant.EnumTallPlantHalf.LOWER || !this.b(world, blockposition, iblockdata, entityhuman)) { // NeonPaper - Remove isClientSide check
             super.a(world, entityhuman, blockposition, iblockdata, tileentity, itemstack);
         }
     }
@@ -123,7 +123,7 @@ public class BlockTallPlant extends BlockPlant implements IBlockFragilePlantElem
 
                     if (blocktallplant_enumtallflowervariants != BlockTallPlant.EnumTallFlowerVariants.FERN && blocktallplant_enumtallflowervariants != BlockTallPlant.EnumTallFlowerVariants.GRASS) {
                         world.setAir(blockposition.down(), true);
-                    } else if (world.isClientSide) {
+                    } else if (false) { // NeonPaper - Remove isClientSide check
                         world.setAir(blockposition.down());
                     } else if (!entityhuman.getItemInMainHand().isEmpty() && entityhuman.getItemInMainHand().getItem() == Items.SHEARS) {
                         this.b(world, blockposition, iblockdata1, entityhuman);
@@ -155,7 +155,7 @@ public class BlockTallPlant extends BlockPlant implements IBlockFragilePlantElem
     }
 
     public void a(CreativeModeTab creativemodetab, NonNullList<ItemStack> nonnulllist) {
-        BlockTallPlant.EnumTallFlowerVariants[] ablocktallplant_enumtallflowervariants = BlockTallPlant.EnumTallFlowerVariants.values();
+        BlockTallPlant.EnumTallFlowerVariants[] ablocktallplant_enumtallflowervariants = BlockTallPlant.EnumTallFlowerVariants.VALUES; // NeonPaper - Single values array
         int i = ablocktallplant_enumtallflowervariants.length;
 
         for (int j = 0; j < i; ++j) {
@@ -235,6 +235,7 @@ public class BlockTallPlant extends BlockPlant implements IBlockFragilePlantElem
         private final int h;
         private final String i;
         private final String j;
+        public static final BlockTallPlant.EnumTallFlowerVariants[] VALUES = values(); // NeonPaper - Single values array
 
         private EnumTallFlowerVariants(int i, String s) {
             this(i, s, s);
diff --git a/src/main/java/net/minecraft/server/BlockTileEntity.java b/src/main/java/net/minecraft/server/BlockTileEntity.java
index 977755f896d75b2d67dc7d5fb1484da5371cdfb2..be2ab3fb722c689d6d2db261611cc46be54bc11d 100644
--- a/src/main/java/net/minecraft/server/BlockTileEntity.java
+++ b/src/main/java/net/minecraft/server/BlockTileEntity.java
@@ -34,7 +34,7 @@ public abstract class BlockTileEntity extends Block implements ITileEntity {
         if (tileentity instanceof INamableTileEntity && ((INamableTileEntity) tileentity).hasCustomName()) {
             entityhuman.b(StatisticList.a((Block) this));
             entityhuman.applyExhaustion(0.005F);
-            if (world.isClientSide) {
+            if (false) { // NeonPaper - Remove isClientSide check
                 return;
             }
 
diff --git a/src/main/java/net/minecraft/server/BlockTrapdoor.java b/src/main/java/net/minecraft/server/BlockTrapdoor.java
index 51eca05a0c6d74921da56ee904b60b5b2da62c3a..1323fdcc0b8f46fc42489114345ab9f1d442aca3 100644
--- a/src/main/java/net/minecraft/server/BlockTrapdoor.java
+++ b/src/main/java/net/minecraft/server/BlockTrapdoor.java
@@ -88,7 +88,7 @@ public class BlockTrapdoor extends Block {
     }
 
     public void a(IBlockData iblockdata, World world, BlockPosition blockposition, Block block, BlockPosition blockposition1) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             boolean flag = world.isBlockIndirectlyPowered(blockposition);
 
             if (flag || block.getBlockData().m()) {
diff --git a/src/main/java/net/minecraft/server/BlockTripwire.java b/src/main/java/net/minecraft/server/BlockTripwire.java
index 92bd3c0ee2e83c51eea85d56b31e211acf947518..a1aed8d701ec57aef071178bfb32694ef1ae2352 100644
--- a/src/main/java/net/minecraft/server/BlockTripwire.java
+++ b/src/main/java/net/minecraft/server/BlockTripwire.java
@@ -64,7 +64,7 @@ public class BlockTripwire extends Block {
     }
 
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             if (!entityhuman.getItemInMainHand().isEmpty() && entityhuman.getItemInMainHand().getItem() == Items.SHEARS) {
                 world.setTypeAndData(blockposition, iblockdata.set(BlockTripwire.DISARMED, Boolean.valueOf(true)), 4);
             }
@@ -104,7 +104,7 @@ public class BlockTripwire extends Block {
     }
 
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Entity entity) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             if (!((Boolean) iblockdata.get(BlockTripwire.POWERED)).booleanValue()) {
                 this.b(world, blockposition);
             }
@@ -114,7 +114,7 @@ public class BlockTripwire extends Block {
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {}
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             if (((Boolean) world.getType(blockposition).get(BlockTripwire.POWERED)).booleanValue()) {
                 this.b(world, blockposition);
             }
diff --git a/src/main/java/net/minecraft/server/BlockVine.java b/src/main/java/net/minecraft/server/BlockVine.java
index ac5b639ae277e3b65ce144f5df4be716182eec50..c03c9ce1494cfb5e4bda50a8ba76f7377e16cccc 100644
--- a/src/main/java/net/minecraft/server/BlockVine.java
+++ b/src/main/java/net/minecraft/server/BlockVine.java
@@ -132,7 +132,7 @@ public class BlockVine extends Block {
     }
 
     public void a(IBlockData iblockdata, World world, BlockPosition blockposition, Block block, BlockPosition blockposition1) {
-        if (!world.isClientSide && !this.e(world, blockposition, iblockdata)) {
+        if (!this.e(world, blockposition, iblockdata)) { // NeonPaper - Remove isClientSide check
             this.b(world, blockposition, iblockdata, 0);
             world.setAir(blockposition);
         }
@@ -140,7 +140,7 @@ public class BlockVine extends Block {
     }
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             if (world.random.nextInt(Math.max(1, (int) (100.0F / world.spigotConfig.vineModifier) * 4)) == 0) { // Spigot
                 boolean flag = true;
                 int i = 5;
@@ -299,7 +299,7 @@ public class BlockVine extends Block {
     }
 
     public void a(World world, EntityHuman entityhuman, BlockPosition blockposition, IBlockData iblockdata, @Nullable TileEntity tileentity, ItemStack itemstack) {
-        if (!world.isClientSide && itemstack.getItem() == Items.SHEARS) {
+        if (itemstack.getItem() == Items.SHEARS) { // NeonPaper - Remove isClientSide check
             entityhuman.b(StatisticList.a((Block) this));
             a(world, blockposition, new ItemStack(Blocks.VINE, 1, 0));
         } else {
diff --git a/src/main/java/net/minecraft/server/BlockWood.java b/src/main/java/net/minecraft/server/BlockWood.java
index e77336aed8038631e6c2a137f433518461bd992f..e0a3122fb64b80a62c0ad565e2cb9114183587bb 100644
--- a/src/main/java/net/minecraft/server/BlockWood.java
+++ b/src/main/java/net/minecraft/server/BlockWood.java
@@ -15,7 +15,7 @@ public class BlockWood extends Block {
     }
 
     public void a(CreativeModeTab creativemodetab, NonNullList<ItemStack> nonnulllist) {
-        BlockWood.EnumLogVariant[] ablockwood_enumlogvariant = BlockWood.EnumLogVariant.values();
+        BlockWood.EnumLogVariant[] ablockwood_enumlogvariant = BlockWood.EnumLogVariant.VALUES; // NeonPaper - Single values array
         int i = ablockwood_enumlogvariant.length;
 
         for (int j = 0; j < i; ++j) {
@@ -51,6 +51,7 @@ public class BlockWood extends Block {
         private final String i;
         private final String j;
         private final MaterialMapColor k;
+        public static final BlockWood.EnumLogVariant[] VALUES = values(); // NeonPaper - Single values array
 
         private EnumLogVariant(int i, String s, MaterialMapColor materialmapcolor) {
             this(i, s, s, materialmapcolor);
diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 5eeb7279faf91fa7174c92d312d521b299894ed8..f5a44ab46e902bd93aea8070ee7d70f7f9bedbb1 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -454,6 +454,7 @@ public class Chunk {
         return getBlockData(i, j, k);
     }
 
+    /* // NeonPaper start - Optimize unused
     public IBlockData unused(final int i, final int j, final int k) {
     // Paper end
         if (this.world.N() == WorldType.DEBUG_ALL_BLOCK_STATES) {
@@ -496,6 +497,7 @@ public class Chunk {
             }
         }
     }
+    */ // NeonPaper end
 
     @Nullable
     public IBlockData a(BlockPosition blockposition, IBlockData iblockdata) {
@@ -531,7 +533,7 @@ public class Chunk {
 
             chunksection.setType(i, j & 15, k, iblockdata);
             if (block1 != block) {
-                if (!this.world.isClientSide) {
+                if (true) { // NeonPaper - Remove isClientSide check
                     block1.remove(this.world, blockposition, iblockdata1);
                 } else if (block1 instanceof ITileEntity) {
                     this.world.s(blockposition);
@@ -572,7 +574,7 @@ public class Chunk {
                 }
 
                 // CraftBukkit - Don't place while processing the BlockPlaceEvent, unless it's a BlockContainer. Prevents blocks such as TNT from activating when cancelled.
-                if (!this.world.isClientSide && block1 != block  && (!this.world.captureBlockStates || block instanceof BlockTileEntity)) {
+                if (block1 != block && (!this.world.captureBlockStates || block instanceof BlockTileEntity)) { // NeonPaper - Remove isClientSide check
                     block.onPlace(this.world, blockposition, iblockdata);
                 }
 
@@ -712,7 +714,7 @@ public class Chunk {
                 return;
             }
         }
-        for ( EnumCreatureType creatureType : EnumCreatureType.values() )
+        for ( EnumCreatureType creatureType : EnumCreatureType.VALUES ) // NeonPaper - Single values array
         {
             if ( creatureType.a().isAssignableFrom( entity.getClass() ) )
             {
@@ -758,7 +760,7 @@ public class Chunk {
                 return;
             }
         }
-        for ( EnumCreatureType creatureType : EnumCreatureType.values() )
+        for ( EnumCreatureType creatureType : EnumCreatureType.VALUES ) // NeonPaper - Single values array
         {
             if ( creatureType.a().isAssignableFrom( entity.getClass() ) )
             {
@@ -824,9 +826,10 @@ public class Chunk {
         tileentity.a(this.world);
         tileentity.setPosition(blockposition);
         if (this.getBlockData(blockposition).getBlock() instanceof ITileEntity) {
-            if (this.tileEntities.containsKey(blockposition)) {
-                ((TileEntity) this.tileEntities.get(blockposition)).z();
-            }
+            // NeonPaper start - Optimize map get
+            TileEntity tileEntityO = this.tileEntities.get(blockposition);
+            if (tileEntityO != null) tileEntityO.z();
+            // NeonPaper end
 
             tileentity.A();
             this.tileEntities.put(blockposition, tileentity);
@@ -1026,7 +1029,7 @@ public class Chunk {
                             int l = aentity.length;
 
                             for (int i1 = 0; i1 < l; ++i1) {
-                                Entity entity2 = aentity1[i1];
+                                Entity entity2 = aentity[i1]; // NeonPaper - Inline
 
                                 if (entity2 != entity && entity2.getBoundingBox().c(axisalignedbb) && (predicate == null || predicate.apply(entity2))) {
                                     list.add(entity2);
@@ -1215,7 +1218,7 @@ public class Chunk {
 
     public void b(boolean flag) {
         if (this.m && this.world.worldProvider.m() && !flag) {
-            this.h(this.world.isClientSide);
+            this.h(false); // NeonPaper - Remove isClientSide check
         }
 
         this.r = true;
@@ -1335,12 +1338,15 @@ public class Chunk {
 
                 ++this.x;
 
+                // NeonPaper start - Optimize
+                ChunkSection section = this.sections[j];
                 for (int i1 = 0; i1 < 16; ++i1) {
                     BlockPosition blockposition1 = blockposition.a(k, (j << 4) + i1, l);
                     boolean flag = i1 == 0 || i1 == 15 || k == 0 || k == 15 || l == 0 || l == 15;
 
-                    if (this.sections[j] == Chunk.a && flag || this.sections[j] != Chunk.a && this.sections[j].getType(k, i1, l).getMaterial() == Material.AIR) {
-                        EnumDirection[] aenumdirection = EnumDirection.values();
+                    if (section == Chunk.a ? flag : section.getType(k, i1, l).getMaterial() == Material.AIR) {
+                        // NeonPaper end - Optimize
+                        EnumDirection[] aenumdirection = EnumDirection.VALUES; // NeonPaper - Single values array
                         int j1 = aenumdirection.length;
 
                         for (int k1 = 0; k1 < j1; ++k1) {
@@ -1410,23 +1416,30 @@ public class Chunk {
         if (this.done) {
             int i;
 
-            if (enumdirection == EnumDirection.EAST) {
+            // NeonPaper start - Replace 'if' with 'switch'
+            switch (enumdirection) {
+            case EAST:
                 for (i = 0; i < 16; ++i) {
                     this.e(15, i);
                 }
-            } else if (enumdirection == EnumDirection.WEST) {
+                break;
+            case WEST:
                 for (i = 0; i < 16; ++i) {
                     this.e(0, i);
                 }
-            } else if (enumdirection == EnumDirection.SOUTH) {
+                break;
+            case SOUTH:
                 for (i = 0; i < 16; ++i) {
                     this.e(i, 15);
                 }
-            } else if (enumdirection == EnumDirection.NORTH) {
+                break;
+            case NORTH:
                 for (i = 0; i < 16; ++i) {
                     this.e(i, 0);
                 }
+                break;
             }
+            // NeonPaper end
 
         }
     }
diff --git a/src/main/java/net/minecraft/server/ChunkProviderGenerate.java b/src/main/java/net/minecraft/server/ChunkProviderGenerate.java
index ee9e00e64a9858ec8886c8dd31f793da446b5ed4..a42d12fe331fb8b666a385f6d4a5d1f5cdc055d3 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderGenerate.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderGenerate.java
@@ -410,7 +410,7 @@ public class ChunkProviderGenerate implements ChunkGenerator {
         boolean flag = false;
 
         if (this.s.y && this.o && chunk.x() < 3600L) {
-            flag |= this.B.a(this.n, this.i, new ChunkCoordIntPair(i, j));
+            flag = this.B.a(this.n, this.i, new ChunkCoordIntPair(i, j)); // NeonPaper - Optimize
         }
 
         return flag;
diff --git a/src/main/java/net/minecraft/server/ChunkProviderHell.java b/src/main/java/net/minecraft/server/ChunkProviderHell.java
index 12bc10ff00eda73bcad7c6394088d84cfbc06fcf..1f5d6477dc0f2b81fb5e5784eb249af35ddc8cf9 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderHell.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderHell.java
@@ -168,7 +168,7 @@ public class ChunkProviderHell implements ChunkGenerator {
                                         iblockdata1 = ChunkProviderHell.b;
                                         if (flag1) {
                                             iblockdata = ChunkProviderHell.e;
-                                            iblockdata1 = ChunkProviderHell.b;
+                                            // iblockdata1 = ChunkProviderHell.b; // NeonPaper - Already assigned
                                         }
 
                                         if (flag) {
@@ -286,7 +286,7 @@ public class ChunkProviderHell implements ChunkGenerator {
                         d8 = d8 * (1.0D - d9) + -10.0D * d9;
                     }
 
-                    if ((double) j2 < 0.0D) {
+                    if (/*(double) j2 < 0.0D*/false) { // NeonPaper - Always false
                         d9 = (0.0D - (double) j2) / 4.0D;
                         d9 = MathHelper.a(d9, 0.0D, 1.0D);
                         d8 = d8 * (1.0D - d9) + -10.0D * d9;
diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index ad5485908d3795e73f5fa13c0d553b7fde17c189..5833e5d8e340efc706bc10472fd61b6f224f87c3 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -310,7 +310,7 @@ public class ChunkProviderServer implements IChunkProvider {
             // CraftBukkit end
 
             if (flag) {
-                this.saveChunkNOP(chunk);
+                // this.saveChunkNOP(chunk); // NeonPaper - Optimize
             }
 
             if (chunk.a(flag)) {
@@ -414,7 +414,7 @@ public class ChunkProviderServer implements IChunkProvider {
         chunk.removeEntities();
         if (save) {
             this.saveChunk(chunk, true); // Spigot
-            this.saveChunkNOP(chunk);
+            // this.saveChunkNOP(chunk); // NeonPaper - Optimize
         }
         this.chunks.remove(chunk.chunkKey);
         return true;
diff --git a/src/main/java/net/minecraft/server/ChunkRegionLoader.java b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
index 55e6f4a25f774b15ebdf66573a6c227d974bd44f..b9dc7589a5ddca9f9e80b1632558d8857dc306f3 100644
--- a/src/main/java/net/minecraft/server/ChunkRegionLoader.java
+++ b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
@@ -304,7 +304,7 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
         NBTTagCompound nbttagcompound1;
 
         for (int j = 0; j < i; ++j) {
-            ChunkSection chunksection = achunksection1[j];
+            ChunkSection chunksection = achunksection[j]; // NeonPaper - Inline
 
             if (chunksection != Chunk.a) {
                 nbttagcompound1 = new NBTTagCompound();
@@ -320,7 +320,7 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
                 }
 
                 nbttagcompound1.setByteArray("BlockLight", chunksection.getEmittedLightArray().asBytes());
-                if (flag) {
+                if (worldHasSkyLight) { // NeonPaper - Inline
                     nbttagcompound1.setByteArray("SkyLight", chunksection.getSkyLightArray().asBytes());
                 } else {
                     nbttagcompound1.setByteArray("SkyLight", new byte[chunksection.getEmittedLightArray().asBytes().length]);
@@ -401,7 +401,7 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
                 NBTTagCompound nbttagcompound2 = new NBTTagCompound();
                 MinecraftKey minecraftkey = (MinecraftKey) Block.REGISTRY.b(nextticklistentry.a());
 
-                nbttagcompound2.setString("i", minecraftkey == null ? "" : minecraftkey.toString());
+                nbttagcompound2.setString("i", /*minecraftkey == null*/false ? "" : minecraftkey.toString()); // NeonPaper - Always false
                 nbttagcompound2.setInt("x", nextticklistentry.a.getX());
                 nbttagcompound2.setInt("y", nextticklistentry.a.getY());
                 nbttagcompound2.setInt("z", nextticklistentry.a.getZ());
diff --git a/src/main/java/net/minecraft/server/CombatTracker.java b/src/main/java/net/minecraft/server/CombatTracker.java
index bddd66e798200d116163111e1bd790c03fca7bb9..4193f6f71e4c27037169b270b5aa57a5ecacbefa 100644
--- a/src/main/java/net/minecraft/server/CombatTracker.java
+++ b/src/main/java/net/minecraft/server/CombatTracker.java
@@ -156,7 +156,7 @@ public class CombatTracker {
 
         if (f1 > 5.0F && combatentry != null) {
             return combatentry;
-        } else if (f > 5.0F && combatentry1 != null) {
+        } else if (f > 5.0F && /*combatentry1 != null*/true) { // NeonPaper - Optimize
             return combatentry1;
         } else {
             return null;
diff --git a/src/main/java/net/minecraft/server/CommandAbstract.java b/src/main/java/net/minecraft/server/CommandAbstract.java
index a99d0f87044492855fe2393e2a26a5bed3df1035..f4e3bafd675a1bae190cda9fe89ab01031cae2f6 100644
--- a/src/main/java/net/minecraft/server/CommandAbstract.java
+++ b/src/main/java/net/minecraft/server/CommandAbstract.java
@@ -571,7 +571,7 @@ public abstract class CommandAbstract implements ICommand {
             if (i > 0) {
                 if (i == list.size() - 1) {
                     chatcomponenttext.a(" and ");
-                } else if (i > 0) {
+                } else if (/*i > 0*/true) { // NeonPaper - Optimize
                     chatcomponenttext.a(", ");
                 }
             }
diff --git a/src/main/java/net/minecraft/server/CommandBlockListenerAbstract.java b/src/main/java/net/minecraft/server/CommandBlockListenerAbstract.java
index 266a37f5391d95fd07568456ebd7130181d1522d..3398ba1f6e1896f8cafff27992107bbd3c3c0ef5 100644
--- a/src/main/java/net/minecraft/server/CommandBlockListenerAbstract.java
+++ b/src/main/java/net/minecraft/server/CommandBlockListenerAbstract.java
@@ -106,7 +106,7 @@ public abstract class CommandBlockListenerAbstract implements ICommandListener {
     }
 
     public boolean a(World world) {
-        if (!world.isClientSide && world.getTime() != this.b) {
+        if (world.getTime() != this.b) { // NeonPaper - Remove isClientSide check
             if ("Searge".equalsIgnoreCase(this.g)) {
                 this.f = new ChatComponentText("#itzlipofutzli");
                 this.d = 1;
@@ -274,7 +274,7 @@ public abstract class CommandBlockListenerAbstract implements ICommandListener {
                     CommandBlockListenerAbstract listener = (CommandBlockListenerAbstract) sender;
                     MinecraftServer.getServer().server.getLogger().log(Level.WARNING, String.format("CommandBlock at (%d,%d,%d) failed to handle command", listener.getChunkCoordinates().getX(), listener.getChunkCoordinates().getY(), listener.getChunkCoordinates().getZ()), exception);
                 } else {
-                    MinecraftServer.getServer().server.getLogger().log(Level.WARNING, String.format("Unknown CommandBlock failed to handle command"), exception);
+                    MinecraftServer.getServer().server.getLogger().log(Level.WARNING, "Unknown CommandBlock failed to handle command", exception); // NeonPaper - Optimize
                 }
             }
         }
@@ -335,7 +335,7 @@ public abstract class CommandBlockListenerAbstract implements ICommandListener {
     }
 
     public void sendMessage(IChatBaseComponent ichatbasecomponent) {
-        if (this.e && this.getWorld() != null && !this.getWorld().isClientSide) {
+        if (this.e && this.getWorld() != null) { // NeonPaper - Remove isClientSide check
             this.f = (new ChatComponentText("[" + CommandBlockListenerAbstract.a.format(new Date()) + "] ")).addSibling(ichatbasecomponent);
             this.i();
         }
@@ -370,7 +370,7 @@ public abstract class CommandBlockListenerAbstract implements ICommandListener {
         if (!entityhuman.isCreativeAndOp()) {
             return false;
         } else {
-            if (entityhuman.getWorld().isClientSide) {
+            if (false) { // NeonPaper - Remove isClientSide check
                 entityhuman.a(this);
             }
 
diff --git a/src/main/java/net/minecraft/server/CommandDebug.java b/src/main/java/net/minecraft/server/CommandDebug.java
index 89708da96a43d833f3c066baa4325e286ef9cfc0..a3467e928a1e5356b661f4ce0d5427b1ade01361 100644
--- a/src/main/java/net/minecraft/server/CommandDebug.java
+++ b/src/main/java/net/minecraft/server/CommandDebug.java
@@ -35,6 +35,7 @@ public class CommandDebug extends CommandAbstract {
 
     public void execute(MinecraftServer minecraftserver, ICommandListener icommandlistener, String[] astring) throws CommandException {
         // CraftBukkit start - only allow use when enabled (so that no blank profile results occur)
+        /* // NeonPaper start - Remove MethodProfiler
         if (!minecraftserver.methodProfiler.ENABLED) {
             icommandlistener.sendMessage(new ChatComponentText("Vanilla debug profiling is disabled."));
             icommandlistener.sendMessage(new ChatComponentText("To enable, restart the server with `-DenableDebugMethodProfiler=true' before `-jar'."));
@@ -78,9 +79,11 @@ public class CommandDebug extends CommandAbstract {
             }
 
         }
+        */ // NeonPaper end
     }
 
     private void a(long i, int j, MinecraftServer minecraftserver) {
+        /* // NeonPaper start - Remove MethodProfiler
         File file = new File(minecraftserver.d("debug"), "profile-results-" + (new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss")).format(new Date()) + ".txt");
 
         file.getParentFile().mkdirs();
@@ -94,10 +97,14 @@ public class CommandDebug extends CommandAbstract {
         } finally {
             IOUtils.closeQuietly(outputstreamwriter);
         }
+        */ // NeonPaper end
 
     }
 
     private String b(long i, int j, MinecraftServer minecraftserver) {
+        // NeonPaper start - Remove MethodProfiler
+        return "";
+        /*
         StringBuilder stringbuilder = new StringBuilder();
 
         stringbuilder.append("---- Minecraft Profiler Results ----\n");
@@ -111,9 +118,11 @@ public class CommandDebug extends CommandAbstract {
         this.a(0, "root", stringbuilder, minecraftserver);
         stringbuilder.append("--- END PROFILE DUMP ---\n\n");
         return stringbuilder.toString();
+        */ // NeonPaper end
     }
 
     private void a(int i, String s, StringBuilder stringbuilder, MinecraftServer minecraftserver) {
+        /* // NeonPaper start - Remove MethodProfiler
         List list = minecraftserver.methodProfiler.b(s);
 
         if (list != null && list.size() >= 3) {
@@ -137,9 +146,13 @@ public class CommandDebug extends CommandAbstract {
             }
 
         }
+        */ // NeonPaper end
     }
 
     private static String d() {
+        // NeonPaper start - Remove MethodProfiler
+        return "";
+        /*
         String[] astring = new String[] { "Shiny numbers!", "Am I not running fast enough? :(", "I\'m working as hard as I can!", "Will I ever be good enough for you? :(", "Speedy. Zoooooom!", "Hello world", "40% better than a crash report.", "Now with extra numbers", "Now with less numbers", "Now with the same numbers", "You should add flames to things, it makes them go faster!", "Do you feel the need for... optimization?", "*cracks redstone whip*", "Maybe if you treated it better then it\'ll have more motivation to work faster! Poor server."};
 
         try {
@@ -147,6 +160,7 @@ public class CommandDebug extends CommandAbstract {
         } catch (Throwable throwable) {
             return "Witty comment unavailable :(";
         }
+        */ // NeonPaper end
     }
 
     public List<String> tabComplete(MinecraftServer minecraftserver, ICommandListener icommandlistener, String[] astring, @Nullable BlockPosition blockposition) {
diff --git a/src/main/java/net/minecraft/server/CommandExecute.java b/src/main/java/net/minecraft/server/CommandExecute.java
index 8235c62ceba7c9394df423772a9909aa8540067f..92f87f3b6f6286021df3c7aa19e3adbcbb33a671 100644
--- a/src/main/java/net/minecraft/server/CommandExecute.java
+++ b/src/main/java/net/minecraft/server/CommandExecute.java
@@ -64,7 +64,7 @@ public class CommandExecute extends CommandAbstract {
 
             String s = a(astring, b0);
             CommandListenerWrapper commandlistenerwrapper = CommandListenerWrapper.a(icommandlistener).a(entity, new Vec3D(d0, d1, d2)).a(minecraftserver.worlds.get(0).getGameRules().getBoolean("commandBlockOutput")); // CraftBukkit
-            ICommandHandler icommandhandler = minecraftserver.getCommandHandler();
+            // ICommandHandler icommandhandler = minecraftserver.getCommandHandler(); // NeonPaper - Unused
 
             try {
                 // CraftBukkit start
diff --git a/src/main/java/net/minecraft/server/CommandGamemode.java b/src/main/java/net/minecraft/server/CommandGamemode.java
index 11f05770b9f56b0d0fdc4fb1fc893faeabdb100b..bad8fba54321bb387e52fc4a69719248d063a4c0 100644
--- a/src/main/java/net/minecraft/server/CommandGamemode.java
+++ b/src/main/java/net/minecraft/server/CommandGamemode.java
@@ -52,7 +52,7 @@ public class CommandGamemode extends CommandAbstract {
     protected EnumGamemode c(ICommandListener icommandlistener, String s) throws ExceptionInvalidNumber {
         EnumGamemode enumgamemode = EnumGamemode.a(s, EnumGamemode.NOT_SET);
 
-        return enumgamemode == EnumGamemode.NOT_SET ? WorldSettings.a(a(s, 0, EnumGamemode.values().length - 2)) : enumgamemode;
+        return enumgamemode == EnumGamemode.NOT_SET ? WorldSettings.a(a(s, 0, EnumGamemode.VALUES.length - 2)) : enumgamemode; // NeonPaper - Single values array
     }
 
     public List<String> tabComplete(MinecraftServer minecraftserver, ICommandListener icommandlistener, String[] astring, @Nullable BlockPosition blockposition) {
diff --git a/src/main/java/net/minecraft/server/CommandSpreadPlayers.java b/src/main/java/net/minecraft/server/CommandSpreadPlayers.java
index c79679e6450c8b61d40c7b65cd1506bafff7136a..69b2ab3eb1f157e3a2c0810f138e2d7bcbea0d3c 100644
--- a/src/main/java/net/minecraft/server/CommandSpreadPlayers.java
+++ b/src/main/java/net/minecraft/server/CommandSpreadPlayers.java
@@ -167,7 +167,7 @@ public class CommandSpreadPlayers extends CommandAbstract {
                 int i1 = acommandspreadplayers_location2d.length;
 
                 for (j = 0; j < i1; ++j) {
-                    commandspreadplayers_location2d1 = acommandspreadplayers_location2d1[j];
+                    commandspreadplayers_location2d1 = acommandspreadplayers_location2d[j]; // NeonPaper - Inline
                     if (!commandspreadplayers_location2d1.b(world)) {
                         commandspreadplayers_location2d1.a(random, d1, d2, d3, d4);
                         flag1 = true;
@@ -210,7 +210,7 @@ public class CommandSpreadPlayers extends CommandAbstract {
             int k = acommandspreadplayers_location2d.length;
 
             for (int l = 0; l < k; ++l) {
-                CommandSpreadPlayers.Location2D commandspreadplayers_location2d1 = acommandspreadplayers_location2d1[l];
+                CommandSpreadPlayers.Location2D commandspreadplayers_location2d1 = acommandspreadplayers_location2d[l]; // NeonPaper - Inline
 
                 if (commandspreadplayers_location2d != commandspreadplayers_location2d1) {
                     double d2 = commandspreadplayers_location2d.a(commandspreadplayers_location2d1);
diff --git a/src/main/java/net/minecraft/server/Container.java b/src/main/java/net/minecraft/server/Container.java
index 3a488ce207a060d6c080c7d6d7ca641e23edb991..205140ce92f94b634dc85eef7105fbda273056f5 100644
--- a/src/main/java/net/minecraft/server/Container.java
+++ b/src/main/java/net/minecraft/server/Container.java
@@ -18,6 +18,11 @@ import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.inventory.InventoryView;
 // CraftBukkit end
 
+// NeonPaper start - FastUtil optimization
+import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
+import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
+// NeonPaper end
+
 public abstract class Container {
 
     public NonNullList<ItemStack> items = NonNullList.a();
@@ -153,7 +158,7 @@ public abstract class Container {
                     l = playerinventory.getCarried().getCount();
                     Iterator iterator = this.h.iterator();
 
-                    Map<Integer, ItemStack> draggedSlots = new HashMap<Integer, ItemStack>(); // CraftBukkit - Store slots from drag in map (raw slot id -> new stack)
+                    Int2ObjectMap<ItemStack> draggedSlots = new Int2ObjectOpenHashMap<>(); // CraftBukkit - Store slots from drag in map (raw slot id -> new stack) // NeonPaper - FastUtil optimization
                     while (iterator.hasNext()) {
                         Slot slot1 = (Slot) iterator.next();
                         ItemStack itemstack3 = playerinventory.getCarried();
@@ -179,8 +184,8 @@ public abstract class Container {
                     org.bukkit.inventory.ItemStack newcursor = CraftItemStack.asCraftMirror(itemstack2);
                     newcursor.setAmount(l);
                     Map<Integer, org.bukkit.inventory.ItemStack> eventmap = new HashMap<Integer, org.bukkit.inventory.ItemStack>();
-                    for (Map.Entry<Integer, ItemStack> ditem : draggedSlots.entrySet()) {
-                        eventmap.put(ditem.getKey(), CraftItemStack.asBukkitCopy(ditem.getValue()));
+                    for (Int2ObjectMap.Entry<ItemStack> ditem : draggedSlots.int2ObjectEntrySet()) { // NeonPaper - FastUtil optimization
+                        eventmap.put(ditem.getIntKey(), CraftItemStack.asBukkitCopy(ditem.getValue())); // NeonPaper - FastUtil optimization
                     }
 
                     // It's essential that we set the cursor to the new value here to prevent item duplication if a plugin closes the inventory.
@@ -194,8 +199,8 @@ public abstract class Container {
                     boolean needsUpdate = event.getResult() != Result.DEFAULT;
 
                     if (event.getResult() != Result.DENY) {
-                        for (Map.Entry<Integer, ItemStack> dslot : draggedSlots.entrySet()) {
-                            view.setItem(dslot.getKey(), CraftItemStack.asBukkitCopy(dslot.getValue()));
+                        for (Int2ObjectMap.Entry<ItemStack> dslot : draggedSlots.int2ObjectEntrySet()) { // NeonPaper - FastUtil optimization
+                            view.setItem(dslot.getIntKey(), CraftItemStack.asBukkitCopy(dslot.getValue())); // NeonPaper - FastUtil optimization
                         }
                         // The only time the carried item will be set to null is if the inventory is closed by the server.
                         // If the inventory is closed by the server, then the cursor items are dropped.  This is why we change the cursor early.
@@ -629,7 +634,7 @@ public abstract class Container {
     }
 
     protected void a(World world, EntityHuman entityhuman, InventoryCrafting inventorycrafting, InventoryCraftResult inventorycraftresult) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             EntityPlayer entityplayer = (EntityPlayer) entityhuman;
             ItemStack itemstack = ItemStack.a;
             IRecipe irecipe = CraftingManager.b(inventorycrafting, world);
diff --git a/src/main/java/net/minecraft/server/ContainerAnvil.java b/src/main/java/net/minecraft/server/ContainerAnvil.java
index 16ec67569446dc3b66ed65890ec6a7bad21392c4..b0d4962bfc16a059672da7a1ae9ce1d355c18889 100644
--- a/src/main/java/net/minecraft/server/ContainerAnvil.java
+++ b/src/main/java/net/minecraft/server/ContainerAnvil.java
@@ -70,7 +70,7 @@ public class ContainerAnvil extends Container {
                 ContainerAnvil.this.levelCost = 0;
                 IBlockData iblockdata = world.getType(blockposition);
 
-                if (!entityhuman.abilities.canInstantlyBuild && !world.isClientSide && iblockdata.getBlock() == Blocks.ANVIL && entityhuman.getRandom().nextFloat() < 0.12F) {
+                if (!entityhuman.abilities.canInstantlyBuild && iblockdata.getBlock() == Blocks.ANVIL && entityhuman.getRandom().nextFloat() < 0.12F) { // NeonPaper - Remove isClientSide check
                     int i = ((Integer) iblockdata.get(BlockAnvil.DAMAGE)).intValue();
 
                     ++i;
@@ -81,7 +81,7 @@ public class ContainerAnvil extends Container {
                         world.setTypeAndData(blockposition, iblockdata.set(BlockAnvil.DAMAGE, Integer.valueOf(i)), 2);
                         world.triggerEffect(1030, blockposition, 0);
                     }
-                } else if (!world.isClientSide) {
+                } else if (true) { // NeonPaper - Remove isClientSide check
                     world.triggerEffect(1030, blockposition, 0);
                 }
 
@@ -184,7 +184,10 @@ public class ContainerAnvil extends Container {
                         Enchantment enchantment = (Enchantment) iterator.next();
 
                         if (enchantment != null) {
-                            int l1 = map.containsKey(enchantment) ? ((Integer) map.get(enchantment)).intValue() : 0;
+                            // NeonPaper start - Optimize
+                            Object l1O = map.get(enchantment);
+                            int l1 = l1O != null ? (Integer) l1O : 0;
+                            // NeonPaper end
                             int i2 = ((Integer) map1.get(enchantment)).intValue();
 
                             i2 = l1 == i2 ? i2 + 1 : Math.max(i2, l1);
@@ -305,7 +308,7 @@ public class ContainerAnvil extends Container {
 
     public void b(EntityHuman entityhuman) {
         super.b(entityhuman);
-        if (!this.i.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             this.a(entityhuman, this.i, this.h);
         }
     }
@@ -330,7 +333,7 @@ public class ContainerAnvil extends Container {
 
                 slot.a(itemstack1, itemstack);
             } else if (i != 0 && i != 1) {
-                if (i >= 3 && i < 39 && !this.a(itemstack1, 0, 2, false)) {
+                if (/*i >= 3*/true && i < 39 && !this.a(itemstack1, 0, 2, false)) { // NeonPaper - Optimize
                     return ItemStack.a;
                 }
             } else if (!this.a(itemstack1, 3, 39, false)) {
diff --git a/src/main/java/net/minecraft/server/ContainerBeacon.java b/src/main/java/net/minecraft/server/ContainerBeacon.java
index 3f76078193b66b7082eff1e955806cf2100aa959..c5746c6c58dec6aa63270c534e921d201fc94218 100644
--- a/src/main/java/net/minecraft/server/ContainerBeacon.java
+++ b/src/main/java/net/minecraft/server/ContainerBeacon.java
@@ -44,7 +44,7 @@ public class ContainerBeacon extends Container {
 
     public void b(EntityHuman entityhuman) {
         super.b(entityhuman);
-        if (!entityhuman.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             ItemStack itemstack = this.f.a(this.f.getMaxStackSize());
 
             if (!itemstack.isEmpty()) {
@@ -77,11 +77,11 @@ public class ContainerBeacon extends Container {
                 if (!this.a(itemstack1, 0, 1, false)) {
                     return ItemStack.a;
                 }
-            } else if (i >= 1 && i < 28) {
+            } else if (/*i >= 1*/true && i < 28) { // NeonPaper - Optimize
                 if (!this.a(itemstack1, 28, 37, false)) {
                     return ItemStack.a;
                 }
-            } else if (i >= 28 && i < 37) {
+            } else if (/*i >= 28*/true && i < 37) { // NeonPaper - Optimize
                 if (!this.a(itemstack1, 1, 28, false)) {
                     return ItemStack.a;
                 }
diff --git a/src/main/java/net/minecraft/server/ContainerBrewingStand.java b/src/main/java/net/minecraft/server/ContainerBrewingStand.java
index 0c7ab47248c89311bc4ee4dd72fc8b8a931235f4..fc9d68d54f6ba8f4221da98207101c0bbf368d6d 100644
--- a/src/main/java/net/minecraft/server/ContainerBrewingStand.java
+++ b/src/main/java/net/minecraft/server/ContainerBrewingStand.java
@@ -77,7 +77,7 @@ public class ContainerBrewingStand extends Container {
             ItemStack itemstack1 = slot.getItem();
 
             itemstack = itemstack1.cloneItemStack();
-            if ((i < 0 || i > 2) && i != 3 && i != 4) {
+            if ((/*i < 0*/false || i > 2) && i != 3 && i != 4) { // NeonPaper - Optimize
                 if (this.f.isAllowed(itemstack1)) {
                     if (!this.a(itemstack1, 3, 4, false)) {
                         return ItemStack.a;
@@ -90,11 +90,11 @@ public class ContainerBrewingStand extends Container {
                     if (!this.a(itemstack1, 4, 5, false)) {
                         return ItemStack.a;
                     }
-                } else if (i >= 5 && i < 32) {
+                } else if (/*i >= 5*/true && i < 32) { // NeonPaper - Optimize
                     if (!this.a(itemstack1, 32, 41, false)) {
                         return ItemStack.a;
                     }
-                } else if (i >= 32 && i < 41) {
+                } else if (/*i >= 32*/true && i < 41) { // NeonPaper - Optimize
                     if (!this.a(itemstack1, 5, 32, false)) {
                         return ItemStack.a;
                     }
diff --git a/src/main/java/net/minecraft/server/ContainerEnchantTable.java b/src/main/java/net/minecraft/server/ContainerEnchantTable.java
index edb929cb9168dadcca1413fbaee4cca5bea1cc33..1fb64160e6d1bed01d927bee46d5fe254bcd5529 100644
--- a/src/main/java/net/minecraft/server/ContainerEnchantTable.java
+++ b/src/main/java/net/minecraft/server/ContainerEnchantTable.java
@@ -118,7 +118,7 @@ public class ContainerEnchantTable extends Container {
             int i;
 
             if (!itemstack.isEmpty()) { // CraftBukkit - relax condition
-                if (!this.world.isClientSide) {
+                if (true) { // NeonPaper - Remove isClientSide check
                     i = 0;
 
                     int j;
@@ -170,7 +170,7 @@ public class ContainerEnchantTable extends Container {
                         if (this.costs[j] > 0) {
                             List list = this.a(itemstack, j, this.costs[j]);
 
-                            if (list != null && !list.isEmpty()) {
+                            if (/*list != null*/true && !list.isEmpty()) { // NeonPaper - Optimize
                                 WeightedRandomEnchant weightedrandomenchant = (WeightedRandomEnchant) list.get(this.l.nextInt(list.size()));
 
                                 this.h[j] = Enchantment.getId(weightedrandomenchant.enchantment);
@@ -235,7 +235,7 @@ public class ContainerEnchantTable extends Container {
         if ((itemstack1.isEmpty() || itemstack1.getCount() < j) && !entityhuman.abilities.canInstantlyBuild) {
             return false;
         } else if (this.costs[i] > 0 && !itemstack.isEmpty() && (entityhuman.expLevel >= j && entityhuman.expLevel >= this.costs[i] || entityhuman.abilities.canInstantlyBuild)) {
-            if (!this.world.isClientSide) {
+            if (true) { // NeonPaper - Remove isClientSide check
                 List list = this.a(itemstack, i, this.costs[i]);
 
                 // CraftBukkit start
@@ -327,7 +327,7 @@ public class ContainerEnchantTable extends Container {
             this.world = entityhuman.getWorld();
         }
         // CraftBukkit end
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             this.a(entityhuman, entityhuman.world, this.enchantSlots);
         }
     }
diff --git a/src/main/java/net/minecraft/server/ContainerFurnace.java b/src/main/java/net/minecraft/server/ContainerFurnace.java
index 0970e5372eef900e873d474971c9be57bd9170c2..45afd16bfaa5c0a256adc0b086f4d6c7d06c0463 100644
--- a/src/main/java/net/minecraft/server/ContainerFurnace.java
+++ b/src/main/java/net/minecraft/server/ContainerFurnace.java
@@ -112,11 +112,11 @@ public class ContainerFurnace extends Container {
                     if (!this.a(itemstack1, 1, 2, false)) {
                         return ItemStack.a;
                     }
-                } else if (i >= 3 && i < 30) {
+                } else if (/*i >= 3*/true && i < 30) { // NeonPaper - Optimize
                     if (!this.a(itemstack1, 30, 39, false)) {
                         return ItemStack.a;
                     }
-                } else if (i >= 30 && i < 39 && !this.a(itemstack1, 3, 30, false)) {
+                } else if (/*i >= 30*/true && i < 39 && !this.a(itemstack1, 3, 30, false)) { // NeonPaper - Optimize
                     return ItemStack.a;
                 }
             } else if (!this.a(itemstack1, 3, 39, false)) {
diff --git a/src/main/java/net/minecraft/server/ContainerMerchant.java b/src/main/java/net/minecraft/server/ContainerMerchant.java
index 8dc071efda61961647f67ffbd082071568fab16d..5656c47116b60f1202dbe06923f365beb4cd77a5 100644
--- a/src/main/java/net/minecraft/server/ContainerMerchant.java
+++ b/src/main/java/net/minecraft/server/ContainerMerchant.java
@@ -76,11 +76,11 @@ public class ContainerMerchant extends Container {
 
                 slot.a(itemstack1, itemstack);
             } else if (i != 0 && i != 1) {
-                if (i >= 3 && i < 30) {
+                if (/*i >= 3*/true && i < 30) { // NeonPaper - Optimize
                     if (!this.a(itemstack1, 30, 39, false)) {
                         return ItemStack.a;
                     }
-                } else if (i >= 30 && i < 39 && !this.a(itemstack1, 3, 30, false)) {
+                } else if (/*i >= 30*/true && i < 39 && !this.a(itemstack1, 3, 30, false)) { // NeonPaper - Optimize
                     return ItemStack.a;
                 }
             } else if (!this.a(itemstack1, 3, 39, false)) {
@@ -107,7 +107,7 @@ public class ContainerMerchant extends Container {
         super.b(entityhuman);
         this.merchant.setTradingPlayer((EntityHuman) null);
         super.b(entityhuman);
-        if (!this.g.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             ItemStack itemstack = this.f.splitWithoutUpdate(0);
 
             if (!itemstack.isEmpty()) {
diff --git a/src/main/java/net/minecraft/server/ContainerPlayer.java b/src/main/java/net/minecraft/server/ContainerPlayer.java
index 2397ebf589c7426e6e6bd41b7bc4fd660da1e22f..60465890d99b2a972c7a9145afaf3e1d16ca7754 100644
--- a/src/main/java/net/minecraft/server/ContainerPlayer.java
+++ b/src/main/java/net/minecraft/server/ContainerPlayer.java
@@ -8,8 +8,8 @@ import org.bukkit.craftbukkit.inventory.CraftInventoryView;
 public class ContainerPlayer extends Container {
 
     private static final EnumItemSlot[] h = new EnumItemSlot[] { EnumItemSlot.HEAD, EnumItemSlot.CHEST, EnumItemSlot.LEGS, EnumItemSlot.FEET};
-    public InventoryCrafting craftInventory = new InventoryCrafting(this, 2, 2);
-    public InventoryCraftResult resultInventory = new InventoryCraftResult();
+    public InventoryCrafting craftInventory; // NeonPaper - Optimize
+    public InventoryCraftResult resultInventory; // NeonPaper - Optimize
     public boolean g;
     private final EntityHuman owner;
     // CraftBukkit start
@@ -78,7 +78,7 @@ public class ContainerPlayer extends Container {
     public void b(EntityHuman entityhuman) {
         super.b(entityhuman);
         this.resultInventory.clear();
-        if (!entityhuman.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             this.a(entityhuman, entityhuman.world, this.craftInventory);
         }
     }
@@ -103,11 +103,11 @@ public class ContainerPlayer extends Container {
                 }
 
                 slot.a(itemstack1, itemstack);
-            } else if (i >= 1 && i < 5) {
+            } else if (/*i >= 1*/true && i < 5) { // NeonPaper - Optimize
                 if (!this.a(itemstack1, 9, 45, false)) {
                     return ItemStack.a;
                 }
-            } else if (i >= 5 && i < 9) {
+            } else if (/*i >= 5*/true && i < 9) { // NeonPaper - Optimize
                 if (!this.a(itemstack1, 9, 45, false)) {
                     return ItemStack.a;
                 }
@@ -121,11 +121,11 @@ public class ContainerPlayer extends Container {
                 if (!this.a(itemstack1, 45, 46, false)) {
                     return ItemStack.a;
                 }
-            } else if (i >= 9 && i < 36) {
+            } else if (/*i >= 9*/true && i < 36) { // NeonPaper - Optimize
                 if (!this.a(itemstack1, 36, 45, false)) {
                     return ItemStack.a;
                 }
-            } else if (i >= 36 && i < 45) {
+            } else if (/*i >= 36*/true && i < 45) { // NeonPaper - Optimize
                 if (!this.a(itemstack1, 9, 36, false)) {
                     return ItemStack.a;
                 }
diff --git a/src/main/java/net/minecraft/server/ContainerWorkbench.java b/src/main/java/net/minecraft/server/ContainerWorkbench.java
index f07e81f8a81351edf8b28488e8b7372fd1ffdf56..3364b19bca7af4b40986ac39ac69b98e168c72be 100644
--- a/src/main/java/net/minecraft/server/ContainerWorkbench.java
+++ b/src/main/java/net/minecraft/server/ContainerWorkbench.java
@@ -56,7 +56,7 @@ public class ContainerWorkbench extends Container {
 
     public void b(EntityHuman entityhuman) {
         super.b(entityhuman);
-        if (!this.g.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             this.a(entityhuman, this.g, this.craftInventory);
         }
     }
diff --git a/src/main/java/net/minecraft/server/CrashReport.java b/src/main/java/net/minecraft/server/CrashReport.java
index 436bbc0ff1e2f062ca1143973783f5c4d5064888..afdf2d48cc35a3e4cea616d9adeae5075b9bdba3 100644
--- a/src/main/java/net/minecraft/server/CrashReport.java
+++ b/src/main/java/net/minecraft/server/CrashReport.java
@@ -187,7 +187,7 @@ public class CrashReport {
             ((Throwable) object).setStackTrace(this.c.getStackTrace());
         }
 
-        String s = ((Throwable) object).toString();
+        String s /*= ((Throwable) object).toString()*/; // NeonPaper - Optimize
 
         try {
             stringwriter = new StringWriter();
@@ -279,7 +279,7 @@ public class CrashReport {
                 System.out.println("Negative index in crash report handler (" + astacktraceelement.length + "/" + j + ")");
             }
 
-            if (astacktraceelement != null && 0 <= k && k < astacktraceelement.length) {
+            if (/*astacktraceelement != null*/true && 0 <= k && k < astacktraceelement.length) { // NeonPaper - Optimize
                 stacktraceelement = astacktraceelement[k];
                 if (astacktraceelement.length + 1 - j < astacktraceelement.length) {
                     stacktraceelement1 = astacktraceelement[astacktraceelement.length + 1 - j];
@@ -291,7 +291,7 @@ public class CrashReport {
                 CrashReportSystemDetails crashreportsystemdetails1 = (CrashReportSystemDetails) this.e.get(this.e.size() - 1);
 
                 crashreportsystemdetails1.b(j);
-            } else if (astacktraceelement != null && astacktraceelement.length >= j && 0 <= k && k < astacktraceelement.length) {
+            } else if (/*astacktraceelement != null*/true && astacktraceelement.length >= j && 0 <= k && k < astacktraceelement.length) { // NeonPaper - Optimize
                 this.h = new StackTraceElement[k];
                 System.arraycopy(astacktraceelement, 0, this.h, 0, this.h.length);
             } else {
diff --git a/src/main/java/net/minecraft/server/DataPaletteBlock.java b/src/main/java/net/minecraft/server/DataPaletteBlock.java
index 2cb462b8e31c9d11147af1db8776054b87fe0831..31459ddd7d8a9bef7a9e6c76407bee7e3eab4d87 100644
--- a/src/main/java/net/minecraft/server/DataPaletteBlock.java
+++ b/src/main/java/net/minecraft/server/DataPaletteBlock.java
@@ -116,7 +116,7 @@ public class DataPaletteBlock implements DataPaletteExpandable {
             IBlockData data = Block.REGISTRY_ID.fromId(j1);
             if (data == null) {
                 Block block = Block.getById(j1 >> 4);
-                if (block != null) {
+                if (/*block != null*/true) { // NeonPaper - Optimize
                     try {
                         data = block.fromLegacyData(j1 & 0xF);
                     } catch (Exception ignored) {
diff --git a/src/main/java/net/minecraft/server/DataWatcher.java b/src/main/java/net/minecraft/server/DataWatcher.java
index fe84844531ab06d20de9ca4988ee12e69ab5f2f7..1d5c727fb360b7cfd6cb7231e6b6e8ee17ce485d 100644
--- a/src/main/java/net/minecraft/server/DataWatcher.java
+++ b/src/main/java/net/minecraft/server/DataWatcher.java
@@ -17,12 +17,17 @@ import org.apache.commons.lang3.ObjectUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+// NeonPaper start - FastUtil optimization
+import it.unimi.dsi.fastutil.objects.Object2IntMap;
+import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
+// NeonPaper end
+
 public class DataWatcher {
 
     private static final Logger a = LogManager.getLogger();
-    private static final Map<Class<? extends Entity>, Integer> b = Maps.newHashMap();
+    private static final Object2IntMap<Class<? extends Entity>> b = new Object2IntOpenHashMap<>(); // NeonPaper - FastUtil optimization
     private final Entity c;
-    private final Map<Integer, DataWatcher.Item<?>> d = new Int2ObjectOpenHashMap<>(); // Paper
+    private final Int2ObjectOpenHashMap<DataWatcher.Item<?>> d = new Int2ObjectOpenHashMap<>(); // Paper // NeonPaper - FastUtil optimization
     private final ReadWriteLock e = new ReentrantReadWriteLock();
     private boolean f = true;
     private boolean g;
@@ -47,7 +52,7 @@ public class DataWatcher {
         int i;
 
         if (DataWatcher.b.containsKey(oclass)) {
-            i = ((Integer) DataWatcher.b.get(oclass)).intValue() + 1;
+            i = DataWatcher.b.getInt(oclass) + 1; // NeonPaper - FastUtil optimization
         } else {
             int j = 0;
             Class oclass2 = oclass;
@@ -55,7 +60,7 @@ public class DataWatcher {
             while (oclass2 != Entity.class) {
                 oclass2 = oclass2.getSuperclass();
                 if (DataWatcher.b.containsKey(oclass2)) {
-                    j = ((Integer) DataWatcher.b.get(oclass2)).intValue() + 1;
+                    j = DataWatcher.b.getInt(oclass2) + 1; // NeonPaper - FastUtil optimization
                     break;
                 }
             }
@@ -76,7 +81,7 @@ public class DataWatcher {
 
         if (i > 254) {
             throw new IllegalArgumentException("Data value id is too big with " + i + "! (Max is " + 254 + ")");
-        } else if (this.d.containsKey(Integer.valueOf(i))) {
+        } else if (this.d.containsKey(i)) { // NeonPaper - FastUtil optimization
             throw new IllegalArgumentException("Duplicate id value for " + i + "!");
         } else if (DataWatcherRegistry.b(datawatcherobject.b()) < 0) {
             throw new IllegalArgumentException("Unregistered serializer " + datawatcherobject.b() + " for " + i + "!");
@@ -89,7 +94,7 @@ public class DataWatcher {
         DataWatcher.Item datawatcher_item = new DataWatcher.Item(datawatcherobject, t0);
 
         this.e.writeLock().lock();
-        this.d.put(Integer.valueOf(datawatcherobject.a()), datawatcher_item);
+        this.d.put(datawatcherobject.a(), datawatcher_item); // NeonPaper - FastUtil optimization
         this.f = false;
         this.e.writeLock().unlock();
     }
@@ -100,7 +105,7 @@ public class DataWatcher {
         DataWatcher.Item datawatcher_item;
 
         try {
-            datawatcher_item = (DataWatcher.Item) this.d.get(Integer.valueOf(datawatcherobject.a()));
+            datawatcher_item = this.d.get(datawatcherobject.a()); // NeonPaper - FastUtil optimization
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.a(throwable, "Getting synched entity data");
             CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Synched entity data");
diff --git a/src/main/java/net/minecraft/server/DedicatedPlayerList.java b/src/main/java/net/minecraft/server/DedicatedPlayerList.java
index 33f8786c894ae2207505316d5af64054896a9f0e..cdb28adbcec0411e161f248d810a96e77fb7989f 100644
--- a/src/main/java/net/minecraft/server/DedicatedPlayerList.java
+++ b/src/main/java/net/minecraft/server/DedicatedPlayerList.java
@@ -14,7 +14,7 @@ public class DedicatedPlayerList extends PlayerList {
         this.a(dedicatedserver.a("view-distance", 10));
         this.maxPlayers = dedicatedserver.a("max-players", 20);
         this.setHasWhitelist(dedicatedserver.a("white-list", false));
-        if (!dedicatedserver.R()) {
+        if (/*!dedicatedserver.R()*/true) { // NeonPaper - Remove singleplayer code
             this.getProfileBans().a(true);
             this.getIPBans().a(true);
         }
diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index d743391e7061059c55774937fc6976bbdb54a30f..e818b71d7bb260e084c154702d2a0fc83cf8fc6c 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -39,7 +39,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
     public final RemoteControlCommandListener remoteControlCommandListener = new RemoteControlCommandListener(this);
     private RemoteControlListener p;
     public PropertyManager propertyManager;
-    private EULA r;
+    // private EULA r; // NeonPaper - Unused
     private boolean generateStructures;
     private EnumGamemode t;
     private boolean u;
@@ -140,7 +140,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
 
         DedicatedServer.LOGGER.info("Loading properties");
         this.propertyManager = new PropertyManager(this.options); // CraftBukkit - CLI argument support
-        this.r = new EULA(new File("eula.txt"));
+        EULA r = new EULA(new File("eula.txt")); // NeonPaper
         // Spigot Start
         boolean eulaAgreed = Boolean.getBoolean( "com.mojang.eula.agree" );
         if ( eulaAgreed )
@@ -150,12 +150,12 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
             System.err.println( "If you do not agree to the above EULA please stop your server and remove this flag immediately." );
         }
         // Spigot End
-        if (!this.r.a() && !eulaAgreed) { // Spigot
+        if (!r.a() && !eulaAgreed) { // NeonPaper // Spigot
             DedicatedServer.LOGGER.info("You need to agree to the EULA in order to run the server. Go to eula.txt for more info.");
-            this.r.b();
+            r.b(); // NeonPaper
             return false;
         } else {
-            if (this.R()) {
+            if (/*this.R()*/false) { // NeonPaper - Remove singleplayer code
                 this.c("127.0.0.1");
             } else {
                 this.setOnlineMode(this.propertyManager.getBoolean("online-mode", true));
diff --git a/src/main/java/net/minecraft/server/DefinedStructure.java b/src/main/java/net/minecraft/server/DefinedStructure.java
index 23da9467ebc82bd25f2c74ddf88ce415dea61775..dd0bcb3173a1d017acaabb7fdde62c94008a8aff 100644
--- a/src/main/java/net/minecraft/server/DefinedStructure.java
+++ b/src/main/java/net/minecraft/server/DefinedStructure.java
@@ -529,7 +529,7 @@ public class DefinedStructure {
         int i = aint.length;
 
         for (int j = 0; j < i; ++j) {
-            int k = aint1[j];
+            int k = aint[j]; // NeonPaper - Inline
 
             nbttaglist.add(new NBTTagInt(k));
         }
@@ -543,7 +543,7 @@ public class DefinedStructure {
         int i = adouble.length;
 
         for (int j = 0; j < i; ++j) {
-            double d0 = adouble1[j];
+            double d0 = adouble[j]; // NeonPaper - Inline
 
             nbttaglist.add(new NBTTagDouble(d0));
         }
diff --git a/src/main/java/net/minecraft/server/DispenseBehaviorItem.java b/src/main/java/net/minecraft/server/DispenseBehaviorItem.java
index e9aaddb4d6b38003bd04eebbed6413a17ed43ba5..646b6d6c3f10d0f1754dfd58e18663264be48130 100644
--- a/src/main/java/net/minecraft/server/DispenseBehaviorItem.java
+++ b/src/main/java/net/minecraft/server/DispenseBehaviorItem.java
@@ -19,7 +19,7 @@ public class DispenseBehaviorItem implements IDispenseBehavior {
 
     protected ItemStack b(ISourceBlock isourceblock, ItemStack itemstack) {
         EnumDirection enumdirection = (EnumDirection) isourceblock.e().get(BlockDispenser.FACING);
-        IPosition iposition = BlockDispenser.a(isourceblock);
+        // IPosition iposition = BlockDispenser.a(isourceblock); // NeonPaper - Unused
         ItemStack itemstack1 = itemstack.cloneAndSubtract(1);
 
         // CraftBukkit start
diff --git a/src/main/java/net/minecraft/server/DispenserRegistry.java b/src/main/java/net/minecraft/server/DispenserRegistry.java
index fb1d640cc3e133c7623d051893fd85324b2c4de4..6087da4d089a8a465cef063a4dca6f5cba888c62 100644
--- a/src/main/java/net/minecraft/server/DispenserRegistry.java
+++ b/src/main/java/net/minecraft/server/DispenserRegistry.java
@@ -146,7 +146,7 @@ public class DispenserRegistry {
                     }
                 }
 
-                itemstack1 = CraftItemStack.asNMSCopy(event.getItem());
+                // itemstack1 = CraftItemStack.asNMSCopy(event.getItem()); // NeonPaper - Unused
 
                 Entity entity = ItemMonsterEgg.spawnCreature(isourceblock.getWorld(), ItemMonsterEgg.h(itemstack), event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ(), org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DISPENSE_EGG);
 
@@ -465,7 +465,7 @@ public class DispenserRegistry {
                     // CraftBukkit end
 
                     if (ItemDye.a(itemstack, world, blockposition)) {
-                        if (!world.isClientSide) {
+                        if (true) { // NeonPaper - Remove isClientSide check
                             world.triggerEffect(2005, blockposition, 0);
                         }
                     } else {
@@ -572,7 +572,7 @@ public class DispenserRegistry {
 
                 this.b = true;
                 if (world.isEmpty(blockposition) && blockskull.b(world, blockposition, itemstack)) {
-                    if (!world.isClientSide) {
+                    if (true) { // NeonPaper - Remove isClientSide check
                         world.setTypeAndData(blockposition, blockskull.getBlockData().set(BlockSkull.FACING, EnumDirection.UP), 3);
                         TileEntity tileentity = world.getTileEntity(blockposition);
 
@@ -644,7 +644,7 @@ public class DispenserRegistry {
 
                 this.b = true;
                 if (world.isEmpty(blockposition) && blockpumpkin.b(world, blockposition)) {
-                    if (!world.isClientSide) {
+                    if (true) { // NeonPaper - Remove isClientSide check
                         world.setTypeAndData(blockposition, blockpumpkin.getBlockData(), 3);
                     }
 
diff --git a/src/main/java/net/minecraft/server/DragonControllerLandedFlame.java b/src/main/java/net/minecraft/server/DragonControllerLandedFlame.java
index deee5c4cce059f1b56685791a6c9cb591978fc61..5d6e1d9759d0b2446a252a22811333619480b219 100644
--- a/src/main/java/net/minecraft/server/DragonControllerLandedFlame.java
+++ b/src/main/java/net/minecraft/server/DragonControllerLandedFlame.java
@@ -11,6 +11,7 @@ public class DragonControllerLandedFlame extends AbstractDragonControllerLanded
     }
 
     public void b() {
+        if (true) return; // NeonPaper - Clientside particles
         ++this.b;
         if (this.b % 2 == 0 && this.b < 10) {
             Vec3D vec3d = this.a.a(1.0F).a();
diff --git a/src/main/java/net/minecraft/server/DragonControllerLanding.java b/src/main/java/net/minecraft/server/DragonControllerLanding.java
index 29c186997686f8a589ec8a18ad939119c281468a..8c754ef287515af9246035f81722629b4ad28070 100644
--- a/src/main/java/net/minecraft/server/DragonControllerLanding.java
+++ b/src/main/java/net/minecraft/server/DragonControllerLanding.java
@@ -11,6 +11,7 @@ public class DragonControllerLanding extends AbstractDragonController {
     }
 
     public void b() {
+        if (true) return; // NeonPaper - Clientside particles
         Vec3D vec3d = this.a.a(1.0F).a();
 
         vec3d.b(-0.7853982F);
diff --git a/src/main/java/net/minecraft/server/DragonControllerManager.java b/src/main/java/net/minecraft/server/DragonControllerManager.java
index 24fe38de5da9bcc1dfc76930649f369595405202..7711a05d1402ea518c9835b31507f6a5235cc2dc 100644
--- a/src/main/java/net/minecraft/server/DragonControllerManager.java
+++ b/src/main/java/net/minecraft/server/DragonControllerManager.java
@@ -39,11 +39,11 @@ public class DragonControllerManager {
             // CraftBukkit end
 
             this.currentDragonController = this.b(dragoncontrollerphase);
-            if (!this.enderDragon.world.isClientSide) {
+            if (true) { // NeonPaper - Remove isClientSide check
                 this.enderDragon.getDataWatcher().set(EntityEnderDragon.PHASE, Integer.valueOf(dragoncontrollerphase.b()));
             }
 
-            DragonControllerManager.a.debug("Dragon is now in phase {} on the {}", dragoncontrollerphase, this.enderDragon.world.isClientSide ? "client" : "server");
+            DragonControllerManager.a.debug("Dragon is now in phase {} on the server", dragoncontrollerphase); // NeonPaper - Remove isClientSide check
             this.currentDragonController.d();
         }
     }
diff --git a/src/main/java/net/minecraft/server/Enchantment.java b/src/main/java/net/minecraft/server/Enchantment.java
index 0a51c1a84fdfda1fc55b54d00f7f466345938c4f..213e5e156bcf0809279388f5186737859a17c126 100644
--- a/src/main/java/net/minecraft/server/Enchantment.java
+++ b/src/main/java/net/minecraft/server/Enchantment.java
@@ -153,8 +153,8 @@ public abstract class Enchantment {
         Enchantment.enchantments.a(51, new MinecraftKey("infinity"), new EnchantmentInfiniteArrows(Enchantment.Rarity.VERY_RARE, new EnumItemSlot[] { EnumItemSlot.MAINHAND}));
         Enchantment.enchantments.a(61, new MinecraftKey("luck_of_the_sea"), new EnchantmentLootBonus(Enchantment.Rarity.RARE, EnchantmentSlotType.FISHING_ROD, new EnumItemSlot[] { EnumItemSlot.MAINHAND}));
         Enchantment.enchantments.a(62, new MinecraftKey("lure"), new EnchantmentLure(Enchantment.Rarity.RARE, EnchantmentSlotType.FISHING_ROD, new EnumItemSlot[] { EnumItemSlot.MAINHAND}));
-        Enchantment.enchantments.a(70, new MinecraftKey("mending"), new EnchantmentMending(Enchantment.Rarity.RARE, EnumItemSlot.values()));
-        Enchantment.enchantments.a(71, new MinecraftKey("vanishing_curse"), new EnchantmentVanishing(Enchantment.Rarity.VERY_RARE, EnumItemSlot.values()));
+        Enchantment.enchantments.a(70, new MinecraftKey("mending"), new EnchantmentMending(Enchantment.Rarity.RARE, EnumItemSlot.VALUES)); // NeonPaper - Single values array
+        Enchantment.enchantments.a(71, new MinecraftKey("vanishing_curse"), new EnchantmentVanishing(Enchantment.Rarity.VERY_RARE, EnumItemSlot.VALUES)); // NeonPaper - Single values array
         // CraftBukkit start
         for (Object enchantment : Enchantment.enchantments) {
             org.bukkit.enchantments.Enchantment.registerEnchantment(new org.bukkit.craftbukkit.enchantments.CraftEnchantment((Enchantment) enchantment));
diff --git a/src/main/java/net/minecraft/server/EnchantmentSlotType.java b/src/main/java/net/minecraft/server/EnchantmentSlotType.java
index a8ff35934793c908605a2b5820cff735e0d03210..560ec6db932b5e1a001682a2aa66855de3b6f9a1 100644
--- a/src/main/java/net/minecraft/server/EnchantmentSlotType.java
+++ b/src/main/java/net/minecraft/server/EnchantmentSlotType.java
@@ -4,7 +4,7 @@ public enum EnchantmentSlotType {
 
     ALL {;
         public boolean canEnchant(Item item) {
-            EnchantmentSlotType[] aenchantmentslottype = EnchantmentSlotType.values();
+            EnchantmentSlotType[] aenchantmentslottype = EnchantmentSlotType.VALUES; // NeonPaper - Single values array
             int i = aenchantmentslottype.length;
 
             for (int j = 0; j < i; ++j) {
@@ -64,6 +64,7 @@ public enum EnchantmentSlotType {
         return item instanceof ItemArmor || item instanceof ItemElytra || item instanceof ItemSkull || flag;
     }
 };
+    public static final EnchantmentSlotType[] VALUES = values(); // NeonPaper - Single values array
 
     private EnchantmentSlotType() {}
 
diff --git a/src/main/java/net/minecraft/server/EnchantmentThorns.java b/src/main/java/net/minecraft/server/EnchantmentThorns.java
index 02240e7991804763ee9ca3f49ee2f63a162ff65d..cd29ad7a7b50cac39fec66c1c6c1d3dcce929b7b 100644
--- a/src/main/java/net/minecraft/server/EnchantmentThorns.java
+++ b/src/main/java/net/minecraft/server/EnchantmentThorns.java
@@ -30,7 +30,7 @@ public class EnchantmentThorns extends Enchantment {
         ItemStack itemstack = EnchantmentManager.b(Enchantments.THORNS, entityliving);
 
         if (entity != null && a(i, random)) { // CraftBukkit
-            if (entity != null) {
+            if (/*entity != null*/true) { // NeonPaper - Optimize
                 entity.damageEntity(DamageSource.a(entityliving), (float) b(i, random));
             }
 
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 74bbba0110094f2fef624ec66288f63124f49dbf..8f860f77aebb16ec914ca61ce5c82abcabbbf077 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -298,7 +298,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
             AxisAlignedBB axisalignedbb = this.getBoundingBox();
 
             this.a(new AxisAlignedBB(axisalignedbb.a, axisalignedbb.b, axisalignedbb.c, axisalignedbb.a + (double) this.width, axisalignedbb.b + (double) this.length, axisalignedbb.c + (double) this.width));
-            if (this.width > f2 && !this.justCreated && !this.world.isClientSide) {
+            if (this.width > f2 && !this.justCreated) { // NeonPaper - Remove isClientSide check
                 this.move(EnumMoveType.SELF, (double) (f2 - this.width), 0.0D, (double) (f2 - this.width));
             }
         }
@@ -349,7 +349,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     }
 
     public void B_() {
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             this.setFlag(6, this.aW());
         }
 
@@ -359,7 +359,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     // CraftBukkit start
     public void postTick() {
         // No clean way to break out of ticking once the entity has been copied to a new world, so instead we move the portalling later in the tick cycle
-        if (!this.world.isClientSide && this.world instanceof WorldServer) {
+        if (this.world instanceof WorldServer) { // NeonPaper - Remove isClientSide check
             this.world.methodProfiler.a("portal");
             if (this.ak) {
                 MinecraftServer minecraftserver = this.world.getMinecraftServer();
@@ -462,7 +462,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
 
         this.as();
         this.aq();
-        if (this.world.isClientSide) {
+        if (false) { // NeonPaper - Remove isClientSide check
             this.extinguish();
         } else if (this.fireTicks > 0) {
             if (this.fireProof) {
@@ -494,7 +494,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
         this.checkAndDoHeightDamage();
         // Paper end
 
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             this.setFlag(0, this.fireTicks > 0);
         }
 
@@ -1170,7 +1170,17 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     }
 
     protected void ar() {
-        Entity entity = this.isVehicle() && this.bE() != null ? this.bE() : this;
+        // NeonPaper start - Optimize
+        Entity entity;
+        if (this.isVehicle()) {
+            entity = this.bE();
+            if (entity == null) {
+                entity = this;
+            }
+        } else {
+            entity = this;
+        }
+        // NeonPaper end
         float f = entity == this ? 0.2F : 0.9F;
         float f1 = MathHelper.sqrt(entity.motX * entity.motX * 0.20000000298023224D + entity.motY * entity.motY + entity.motZ * entity.motZ * 0.20000000298023224D) * f;
 
@@ -1179,6 +1189,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
         }
 
         this.a(this.af(), f1, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.4F);
+        /* // NeonPaper start - Clientside particles
         float f2 = (float) MathHelper.floor(this.getBoundingBox().b);
 
         int i;
@@ -1196,10 +1207,12 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
             f4 = (this.random.nextFloat() * 2.0F - 1.0F) * this.width;
             this.world.addParticle(EnumParticle.WATER_SPLASH, this.locX + (double) f3, (double) (f2 + 1.0F), this.locZ + (double) f4, this.motX, this.motY, this.motZ, new int[0]);
         }
+        */ // NeonPaper end
 
     }
 
     public void as() {
+        if (true) return; // NeonPaper - Clientside particles
         if (this.isSprinting() && !this.isInWater()) {
             this.at();
         }
@@ -1207,6 +1220,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     }
 
     protected void at() {
+        if (true) return; // NeonPaper - Clientside particles
         int i = MathHelper.floor(this.locX);
         int j = MathHelper.floor(this.locY - 0.20000000298023224D);
         int k = MathHelper.floor(this.locZ);
@@ -1569,7 +1583,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
             }
 
             if (this.glowing) {
-                nbttagcompound.setBoolean("Glowing", this.glowing);
+                nbttagcompound.setBoolean("Glowing", /*this.glowing*/true); // NeonPaper - Optimize
             }
 
             NBTTagList nbttaglist;
@@ -1738,7 +1752,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
             // CraftBukkit start - Reset world
             if (this instanceof EntityPlayer) {
                 Server server = Bukkit.getServer();
-                org.bukkit.World bworld = null;
+                org.bukkit.World bworld /*= null*/; // NeonPaper - Optimize
 
                 // TODO: Remove World related checks, replaced with WorldUID
                 String worldName = nbttagcompound.getString("world");
@@ -1848,7 +1862,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
         int i = adouble.length;
 
         for (int j = 0; j < i; ++j) {
-            double d0 = adouble1[j];
+            double d0 = adouble[j]; // NeonPaper - Inline
 
             nbttaglist.add(new NBTTagDouble(d0));
         }
@@ -1862,7 +1876,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
         int i = afloat.length;
 
         for (int j = 0; j < i; ++j) {
-            float f = afloat1[j];
+            float f = afloat[j]; // NeonPaper - Inline
 
             nbttaglist.add(new NBTTagFloat(f));
         }
@@ -2043,7 +2057,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
                 return;
             }
             // Spigot end
-            if (!this.world.isClientSide && entity instanceof EntityHuman && !(this.bE() instanceof EntityHuman)) {
+            if (entity instanceof EntityHuman && !(this.bE() instanceof EntityHuman)) { // NeonPaper - Remove isClientSide check
                 this.passengers.add(0, entity);
             } else {
                 this.passengers.add(entity);
@@ -2101,7 +2115,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
         if (this.portalCooldown > 0) {
             this.portalCooldown = this.aM();
         } else {
-            if (!this.world.isClientSide && !blockposition.equals(this.an)) {
+            if (!blockposition.equals(this.an)) { // NeonPaper - Remove isClientSide check
                 this.an = new BlockPosition(blockposition);
                 ShapeDetector.ShapeDetectorCollection shapedetector_shapedetectorcollection = Blocks.PORTAL.c(this.world, this.an);
                 double d0 = shapedetector_shapedetectorcollection.getFacing().k() == EnumDirection.EnumAxis.X ? (double) shapedetector_shapedetectorcollection.a().getZ() : (double) shapedetector_shapedetectorcollection.a().getX();
@@ -2137,7 +2151,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     public void setEquipment(EnumItemSlot enumitemslot, ItemStack itemstack) {}
 
     public boolean isBurning() {
-        boolean flag = this.world != null && this.world.isClientSide;
+        boolean flag = false; // NeonPaper - Remove isClientSide check
 
         return !this.fireProof && (this.fireTicks > 0 || flag && this.getFlag(0));
     }
@@ -2167,12 +2181,12 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     }
 
     public boolean aW() {
-        return this.glowing || this.world.isClientSide && this.getFlag(6);
+        return this.glowing || false && this.getFlag(6); // NeonPaper - Remove isClientSide check
     }
 
     public void g(boolean flag) {
         this.glowing = flag;
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             this.setFlag(6, this.glowing);
         }
 
@@ -2406,7 +2420,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
 
     @Nullable
     public Entity b(int i) {
-        if (!this.world.isClientSide && !this.dead) {
+        if (!this.dead) { // NeonPaper - Remove isClientSide check
             this.world.methodProfiler.a("changeDimension");
             MinecraftServer minecraftserver = this.C_();
             // CraftBukkit start - Move logic into new function "teleportTo(Location,boolean)"
@@ -2785,7 +2799,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     }
 
     public void a(CommandObjectiveExecutor.EnumCommandResult commandobjectiveexecutor_enumcommandresult, int i) {
-        if (this.world != null && !this.world.isClientSide) {
+        if (this.world != null) { // NeonPaper - Remove isClientSide check
             this.aG.a(this.world.getMinecraftServer(), this, commandobjectiveexecutor_enumcommandresult, i);
         }
 
@@ -2955,7 +2969,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     public boolean bI() {
         Entity entity = this.bE();
 
-        return entity instanceof EntityHuman ? ((EntityHuman) entity).cZ() : !this.world.isClientSide;
+        return entity instanceof EntityHuman ? ((EntityHuman) entity).cZ() : true; // NeonPaper - Remove isClientSide check
     }
 
     @Nullable Entity getVehicleDirect() { return this.bJ(); } // Paper - OBFHELPER
diff --git a/src/main/java/net/minecraft/server/EntityAgeable.java b/src/main/java/net/minecraft/server/EntityAgeable.java
index db23aedc478967b79f3777ed4347aa2ee8580184..f89bce9dba8a902d5c9a3d08617f5a4ce946744e 100644
--- a/src/main/java/net/minecraft/server/EntityAgeable.java
+++ b/src/main/java/net/minecraft/server/EntityAgeable.java
@@ -17,7 +17,7 @@ public abstract class EntityAgeable extends EntityCreature {
     public void inactiveTick()
     {
         super.inactiveTick();
-        if ( this.world.isClientSide || this.ageLocked )
+        if ( this.ageLocked ) // NeonPaper - Remove isClientSide check
         { // CraftBukkit
             this.a( this.isBaby() );
         } else
@@ -48,7 +48,7 @@ public abstract class EntityAgeable extends EntityCreature {
         ItemStack itemstack = entityhuman.b(enumhand);
 
         if (itemstack.getItem() == Items.SPAWN_EGG) {
-            if (!this.world.isClientSide) {
+            if (true) { // NeonPaper - Remove isClientSide check
                 Class oclass = (Class) EntityTypes.b.get(ItemMonsterEgg.h(itemstack));
 
                 if (oclass != null && this.getClass() == oclass) {
@@ -91,7 +91,7 @@ public abstract class EntityAgeable extends EntityCreature {
     }
 
     public int getAge() {
-        return this.world.isClientSide ? (((Boolean) this.datawatcher.get(EntityAgeable.bx)).booleanValue() ? -1 : 1) : this.a;
+        return false ? (((Boolean) this.datawatcher.get(EntityAgeable.bx)).booleanValue() ? -1 : 1) : this.a; // NeonPaper - Remove isClientSide check
     }
 
     public void setAge(int i, boolean flag) {
@@ -156,11 +156,13 @@ public abstract class EntityAgeable extends EntityCreature {
 
     public void n() {
         super.n();
-        if (this.world.isClientSide || ageLocked) { // CraftBukkit
+        if (ageLocked) { // CraftBukkit // NeonPaper - Remove isClientSide check
             if (this.c > 0) {
+                /* // NeonPaper start - Clientside particles
                 if (this.c % 4 == 0) {
                     this.world.addParticle(EnumParticle.VILLAGER_HAPPY, this.locX + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, this.locY + 0.5D + (double) (this.random.nextFloat() * this.length), this.locZ + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, 0.0D, 0.0D, 0.0D, new int[0]);
                 }
+                */ // NeonPaper end
 
                 --this.c;
             }
diff --git a/src/main/java/net/minecraft/server/EntityAnimal.java b/src/main/java/net/minecraft/server/EntityAnimal.java
index b768434eda0a5c2d693ef41236b53405a1c0ace2..54697148c6fefbaf94a243d3da72ebc3a2741199 100644
--- a/src/main/java/net/minecraft/server/EntityAnimal.java
+++ b/src/main/java/net/minecraft/server/EntityAnimal.java
@@ -31,6 +31,7 @@ public abstract class EntityAnimal extends EntityAgeable implements IAnimal {
 
         if (this.bx > 0) {
             --this.bx;
+            /* // NeonPaper start - Clientside particles
             if (this.bx % 10 == 0) {
                 double d0 = this.random.nextGaussian() * 0.02D;
                 double d1 = this.random.nextGaussian() * 0.02D;
@@ -38,6 +39,7 @@ public abstract class EntityAnimal extends EntityAgeable implements IAnimal {
 
                 this.world.addParticle(EnumParticle.HEART, this.locX + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, this.locY + 0.5D + (double) (this.random.nextFloat() * this.length), this.locZ + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, d0, d1, d2, new int[0]);
             }
+            */ // NeonPaper end
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/EntityAreaEffectCloud.java b/src/main/java/net/minecraft/server/EntityAreaEffectCloud.java
index 836d368b40440f1b129612675ed022dbf751909b..8b4260acfd1443f690e5d61f2870ca6444adc40c 100644
--- a/src/main/java/net/minecraft/server/EntityAreaEffectCloud.java
+++ b/src/main/java/net/minecraft/server/EntityAreaEffectCloud.java
@@ -70,7 +70,7 @@ public class EntityAreaEffectCloud extends Entity {
 
         this.setSize(f * 2.0F, 0.5F);
         this.setPosition(d0, d1, d2);
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             this.getDataWatcher().set(EntityAreaEffectCloud.a, Float.valueOf(f));
         }
 
@@ -181,7 +181,7 @@ public class EntityAreaEffectCloud extends Entity {
         }
         // Paper end
 
-        if (this.world.isClientSide) {
+        if (false) { // NeonPaper - Remove isClientSide check
             EnumParticle enumparticle = this.getParticle();
             int[] aint = new int[enumparticle.d()];
 
diff --git a/src/main/java/net/minecraft/server/EntityArmorStand.java b/src/main/java/net/minecraft/server/EntityArmorStand.java
index 907499248b6db60f3cc9b30291656ed13cd10e07..5533d8fb77aef22c5b898a9aca92b4bfa97a7df0 100644
--- a/src/main/java/net/minecraft/server/EntityArmorStand.java
+++ b/src/main/java/net/minecraft/server/EntityArmorStand.java
@@ -91,7 +91,7 @@ public class EntityArmorStand extends EntityLiving {
     }
 
     public boolean cC() {
-        return super.cC() && !this.isNoGravity();
+        return /*super.cC() &&*/ !this.isNoGravity(); // NeonPaper - Remove isClientSide check
     }
 
     protected void i() {
@@ -328,7 +328,7 @@ public class EntityArmorStand extends EntityLiving {
         ItemStack itemstack = entityhuman.b(enumhand);
 
         if (!this.isMarker() && itemstack.getItem() != Items.NAME_TAG) {
-            if (!this.world.isClientSide && !entityhuman.isSpectator()) {
+            if (!entityhuman.isSpectator()) { // NeonPaper - Remove isClientSide check
                 EnumItemSlot enumitemslot = EntityInsentient.d(itemstack);
 
                 if (itemstack.isEmpty()) {
@@ -429,7 +429,7 @@ public class EntityArmorStand extends EntityLiving {
             return false;
         }
         // CraftBukkit end
-        if (!this.world.isClientSide && !this.dead) {
+        if (!this.dead) { // NeonPaper - Remove isClientSide check
             if (DamageSource.OUT_OF_WORLD.equals(damagesource)) {
                 this.killEntity(); // CraftBukkit - this.die() -> this.killEntity()
                 return false;
diff --git a/src/main/java/net/minecraft/server/EntityArrow.java b/src/main/java/net/minecraft/server/EntityArrow.java
index 8a9e16ad61c92ada45d36ce2b97e55f69aa10850..57130ae2425c80d261d6bcdeab308789a5a2d6d9 100644
--- a/src/main/java/net/minecraft/server/EntityArrow.java
+++ b/src/main/java/net/minecraft/server/EntityArrow.java
@@ -203,11 +203,13 @@ public abstract class EntityArrow extends Entity implements IProjectile {
                 this.a(movingobjectposition);
             }
 
+            /* // NeonPaper start - Clientside particles
             if (this.isCritical()) {
                 for (int j = 0; j < 4; ++j) {
                     this.world.addParticle(EnumParticle.CRIT, this.locX + this.motX * (double) j / 4.0D, this.locY + this.motY * (double) j / 4.0D, this.locZ + this.motZ * (double) j / 4.0D, -this.motX, -this.motY + 0.2D, -this.motZ, new int[0]);
                 }
             }
+            */ // NeonPaper end
 
             this.locX += this.motX;
             this.locY += this.motY;
@@ -238,11 +240,13 @@ public abstract class EntityArrow extends Entity implements IProjectile {
             float f3 = 0.05F;
 
             if (this.isInWater()) {
+                /* // NeonPaper start - Clientside particles
                 for (int k = 0; k < 4; ++k) {
                     float f4 = 0.25F;
 
                     this.world.addParticle(EnumParticle.WATER_BUBBLE, this.locX - this.motX * 0.25D, this.locY - this.motY * 0.25D, this.locZ - this.motZ * 0.25D, this.motX, this.motY, this.motZ, new int[0]);
                 }
+                */ // NeonPaper end
 
                 f2 = 0.6F;
             }
@@ -296,7 +300,7 @@ public abstract class EntityArrow extends Entity implements IProjectile {
                 if (entity instanceof EntityLiving) {
                     EntityLiving entityliving = (EntityLiving) entity;
 
-                    if (!this.world.isClientSide) {
+                    if (true) { // NeonPaper - Remove isClientSide check
                         entityliving.setArrowCount(entityliving.getArrowCount() + 1);
                     }
 
@@ -330,7 +334,7 @@ public abstract class EntityArrow extends Entity implements IProjectile {
                 this.yaw += 180.0F;
                 this.lastYaw += 180.0F;
                 this.ay = 0;
-                if (!this.world.isClientSide && this.motX * this.motX + this.motY * this.motY + this.motZ * this.motZ < 0.0010000000474974513D) {
+                if (this.motX * this.motX + this.motY * this.motY + this.motZ * this.motZ < 0.0010000000474974513D) { // NeonPaper - Remove isClientSide check
                     if (this.fromPlayer == EntityArrow.PickupStatus.ALLOWED) {
                         this.a(this.j(), 0.1F);
                     }
@@ -419,7 +423,7 @@ public abstract class EntityArrow extends Entity implements IProjectile {
         nbttagcompound.setShort("life", (short) this.ax);
         MinecraftKey minecraftkey = (MinecraftKey) Block.REGISTRY.b(this.av);
 
-        nbttagcompound.setString("inTile", minecraftkey == null ? "" : minecraftkey.toString());
+        nbttagcompound.setString("inTile", /*minecraftkey == null*/false ? "" : minecraftkey.toString()); // NeonPaper - Optimize
         nbttagcompound.setByte("inData", (byte) this.aw);
         nbttagcompound.setByte("shake", (byte) this.shake);
         nbttagcompound.setByte("inGround", (byte) (this.inGround ? 1 : 0));
@@ -456,7 +460,7 @@ public abstract class EntityArrow extends Entity implements IProjectile {
     }
 
     public void d(EntityHuman entityhuman) {
-        if (!this.world.isClientSide && this.inGround && this.shake <= 0) {
+        if (this.inGround && this.shake <= 0) { // NeonPaper - Remove isClientSide check
             // CraftBukkit start
             ItemStack itemstack = this.j(); // PAIL: rename
             EntityItem item = new EntityItem(this.world, this.locX, this.locY, this.locZ, itemstack);
@@ -556,15 +560,16 @@ public abstract class EntityArrow extends Entity implements IProjectile {
     public static enum PickupStatus {
 
         DISALLOWED, ALLOWED, CREATIVE_ONLY;
+        public static final EntityArrow.PickupStatus[] VALUES = values(); // NeonPaper - Single values array
 
         private PickupStatus() {}
 
         public static EntityArrow.PickupStatus a(int i) {
-            if (i < 0 || i > values().length) {
+            if (i < 0 || i > VALUES.length) { // NeonPaper - Single values array
                 i = 0;
             }
 
-            return values()[i];
+            return VALUES[i]; // NeonPaper - Single values array
         }
     }
 }
diff --git a/src/main/java/net/minecraft/server/EntityBat.java b/src/main/java/net/minecraft/server/EntityBat.java
index 721a26cb78b7a8b1b0810ee6ec841f41b7583420..30763d0706af76d488350a4a3cc47369d71a14f5 100644
--- a/src/main/java/net/minecraft/server/EntityBat.java
+++ b/src/main/java/net/minecraft/server/EntityBat.java
@@ -144,7 +144,7 @@ public class EntityBat extends EntityAmbient {
         if (this.isInvulnerable(damagesource)) {
             return false;
         } else {
-            if (!this.world.isClientSide && this.isAsleep()) {
+            if (this.isAsleep()) { // NeonPaper - Remove isClientSide check
                 this.setAsleep(false);
             }
 
diff --git a/src/main/java/net/minecraft/server/EntityBoat.java b/src/main/java/net/minecraft/server/EntityBoat.java
index 164e21fe81b3fec3aa1b3c303ebe44d83869f951..369d2b8f4165e92b273ca0133c900e5bc802557e 100644
--- a/src/main/java/net/minecraft/server/EntityBoat.java
+++ b/src/main/java/net/minecraft/server/EntityBoat.java
@@ -26,6 +26,7 @@ public class EntityBoat extends Entity {
     private float h;
     private float at;
     private int au;
+    /* // NeonPaper start - Optimize unused
     private double av;
     private double aw;
     private double ax;
@@ -35,6 +36,7 @@ public class EntityBoat extends Entity {
     private boolean aB;
     private boolean aC;
     private boolean aD;
+    */ // NeonPaper end
     private double aE;
     private float aF;
     private EntityBoat.EnumStatus aG;
@@ -108,7 +110,7 @@ public class EntityBoat extends Entity {
     public boolean damageEntity(DamageSource damagesource, float f) {
         if (this.isInvulnerable(damagesource)) {
             return false;
-        } else if (!this.world.isClientSide && !this.dead) {
+        } else if (!this.dead) { // NeonPaper - Remove isClientSide check
             if (damagesource instanceof EntityDamageSourceIndirect && damagesource.getEntity() != null && this.w(damagesource.getEntity())) {
                 return false;
             } else {
@@ -223,7 +225,7 @@ public class EntityBoat extends Entity {
             ++this.h;
         }
 
-        if (!this.world.isClientSide && this.h >= 60.0F) {
+        if (this.h >= 60.0F) { // NeonPaper - Remove isClientSide check
             this.ejectPassengers();
         }
 
@@ -245,7 +247,7 @@ public class EntityBoat extends Entity {
             }
 
             this.x();
-            if (this.world.isClientSide) {
+            if (false) { // NeonPaper - Remove isClientSide check
                 this.y();
                 this.world.a((Packet) (new PacketPlayInBoatMove(this.a(0), this.a(1))));
             }
@@ -297,7 +299,7 @@ public class EntityBoat extends Entity {
         List list = this.world.getEntities(this, this.getBoundingBox().grow(0.20000000298023224D, -0.009999999776482582D, 0.20000000298023224D), IEntitySelector.a(this));
 
         if (!list.isEmpty()) {
-            boolean flag = !this.world.isClientSide && !(this.bE() instanceof EntityHuman);
+            boolean flag = !(this.bE() instanceof EntityHuman); // NeonPaper - Remove isClientSide check
 
             for (int j = 0; j < list.size(); ++j) {
                 Entity entity = (Entity) list.get(j);
@@ -333,13 +335,15 @@ public class EntityBoat extends Entity {
 
     private void t() {
         if (this.au > 0 && !this.bI()) {
-            double d0 = this.locX + (this.av - this.locX) / (double) this.au;
-            double d1 = this.locY + (this.aw - this.locY) / (double) this.au;
-            double d2 = this.locZ + (this.ax - this.locZ) / (double) this.au;
-            double d3 = MathHelper.g(this.ay - (double) this.yaw);
+            // NeonPaper start - Optimize unused
+            double d0 = this.locX + (this.locX) / (double) this.au;
+            double d1 = this.locY + (this.locY) / (double) this.au;
+            double d2 = this.locZ + (this.locZ) / (double) this.au;
+            double d3 = MathHelper.g((double) this.yaw);
 
             this.yaw = (float) ((double) this.yaw + d3 / (double) this.au);
-            this.pitch = (float) ((double) this.pitch + (this.az - (double) this.pitch) / (double) this.au);
+            this.pitch = (float) ((double) this.pitch + ((double) this.pitch) / (double) this.au);
+            // NeonPaper end
             --this.au;
             this.setPosition(d0, d1, d2);
             this.setYawPitch(this.yaw, this.pitch);
@@ -347,8 +351,10 @@ public class EntityBoat extends Entity {
     }
 
     public void a(boolean flag, boolean flag1) {
+        /* // NeonPaper start - Optimize unused
         this.datawatcher.set(EntityBoat.e[0], Boolean.valueOf(flag));
         this.datawatcher.set(EntityBoat.e[1], Boolean.valueOf(flag1));
+        */ // NeonPaper end
     }
 
     private EntityBoat.EnumStatus u() {
@@ -548,23 +554,31 @@ public class EntityBoat extends Entity {
             this.aI = 0.0D;
             this.aG = EntityBoat.EnumStatus.IN_WATER;
         } else {
-            if (this.aG == EntityBoat.EnumStatus.IN_WATER) {
+            // NeonPaper start - Replace 'if' with 'switch'
+            switch (this.aG) {
+            case IN_WATER:
                 d2 = (this.aE - this.getBoundingBox().b) / (double) this.length;
                 this.g = 0.9F;
-            } else if (this.aG == EntityBoat.EnumStatus.UNDER_FLOWING_WATER) {
+                break;
+            case UNDER_FLOWING_WATER:
                 d1 = -7.0E-4D;
                 this.g = 0.9F;
-            } else if (this.aG == EntityBoat.EnumStatus.UNDER_WATER) {
+                break;
+            case UNDER_WATER:
                 d2 = 0.009999999776482582D;
                 this.g = 0.45F;
-            } else if (this.aG == EntityBoat.EnumStatus.IN_AIR) {
+                break;
+            case IN_AIR:
                 this.g = 0.9F;
-            } else if (this.aG == EntityBoat.EnumStatus.ON_LAND) {
+                break;
+            case ON_LAND:
                 this.g = this.aF;
                 if (this.bE() instanceof EntityHuman) {
                     this.aF /= 2.0F;
                 }
+                break;
             }
+            // NeonPaper end
 
             this.motX *= (double) this.g;
             this.motZ *= (double) this.g;
@@ -586,6 +600,8 @@ public class EntityBoat extends Entity {
         if (this.isVehicle()) {
             float f = 0.0F;
 
+            // NeonPaper start - Optimize unused
+            /*
             if (this.aA) {
                 this.at += -1.0F;
             }
@@ -597,8 +613,10 @@ public class EntityBoat extends Entity {
             if (this.aB != this.aA && !this.aC && !this.aD) {
                 f += 0.005F;
             }
+            */
 
             this.yaw += this.at;
+            /*
             if (this.aC) {
                 f += 0.04F;
             }
@@ -606,10 +624,12 @@ public class EntityBoat extends Entity {
             if (this.aD) {
                 f -= 0.005F;
             }
+            */
 
             this.motX += (double) (MathHelper.sin(-this.yaw * 0.017453292F) * f);
             this.motZ += (double) (MathHelper.cos(this.yaw * 0.017453292F) * f);
-            this.a(this.aB && !this.aA || this.aC, this.aA && !this.aB || this.aC);
+            this.a(false, false);
+            // NeonPaper end
         }
     }
 
@@ -673,7 +693,7 @@ public class EntityBoat extends Entity {
         if (entityhuman.isSneaking()) {
             return false;
         } else {
-            if (!this.world.isClientSide && this.h < 60.0F) {
+            if (this.h < 60.0F) { // NeonPaper - Remove isClientSide check
                 entityhuman.startRiding(this);
             }
 
@@ -692,7 +712,7 @@ public class EntityBoat extends Entity {
                     }
 
                     this.e(this.fallDistance, 1.0F);
-                    if (!this.world.isClientSide && !this.dead) {
+                    if (!this.dead) { // NeonPaper - Remove isClientSide check
                     // CraftBukkit start
                     Vehicle vehicle = (Vehicle) this.getBukkitEntity();
                     VehicleDestroyEvent destroyEvent = new VehicleDestroyEvent(vehicle, null);
@@ -773,6 +793,7 @@ public class EntityBoat extends Entity {
 
         OAK(BlockWood.EnumLogVariant.OAK.a(), "oak"), SPRUCE(BlockWood.EnumLogVariant.SPRUCE.a(), "spruce"), BIRCH(BlockWood.EnumLogVariant.BIRCH.a(), "birch"), JUNGLE(BlockWood.EnumLogVariant.JUNGLE.a(), "jungle"), ACACIA(BlockWood.EnumLogVariant.ACACIA.a(), "acacia"), DARK_OAK(BlockWood.EnumLogVariant.DARK_OAK.a(), "dark_oak");
 
+        public static final EntityBoat.EnumBoatType[] VALUES = values(); // NeonPaper - Single values array
         private final String g;
         private final int h;
 
@@ -794,21 +815,23 @@ public class EntityBoat extends Entity {
         }
 
         public static EntityBoat.EnumBoatType a(int i) {
-            if (i < 0 || i >= values().length) {
+            if (i < 0 || i >= VALUES.length) { // NeonPaper - Single values array
                 i = 0;
             }
 
-            return values()[i];
+            return VALUES[i]; // NeonPaper - Single values array
         }
 
         public static EntityBoat.EnumBoatType a(String s) {
-            for (int i = 0; i < values().length; ++i) {
-                if (values()[i].a().equals(s)) {
-                    return values()[i];
+            // NeonPaper start - Single values array
+            for (int i = 0; i < VALUES.length; ++i) {
+                if (VALUES[i].a().equals(s)) {
+                    return VALUES[i];
                 }
             }
 
-            return values()[0];
+            return VALUES[0];
+            // NeonPaper end
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityChicken.java b/src/main/java/net/minecraft/server/EntityChicken.java
index 55f026386d24682f4c01f72b1286b65ad26ff8b3..1acd7d42cc8325b563efb5a9391b881706ebd21d 100644
--- a/src/main/java/net/minecraft/server/EntityChicken.java
+++ b/src/main/java/net/minecraft/server/EntityChicken.java
@@ -64,7 +64,7 @@ public class EntityChicken extends EntityAnimal {
         }
 
         this.bx += this.bC * 2.0F;
-        if (!this.world.isClientSide && !this.isBaby() && !this.isChickenJockey() && --this.bD <= 0) {
+        if (!this.isBaby() && !this.isChickenJockey() && --this.bD <= 0) { // NeonPaper - Remove isClientSide check
             this.a(SoundEffects.af, 1.0F, (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
             this.forceDrops = true; // CraftBukkit
             this.a(Items.EGG, 1);
diff --git a/src/main/java/net/minecraft/server/EntityCreeper.java b/src/main/java/net/minecraft/server/EntityCreeper.java
index 67ba72fc10683d5539b2abab6bc010569f9a591d..3fa88d7d3d3e2927e98a86339a03a2ee99f6750a 100644
--- a/src/main/java/net/minecraft/server/EntityCreeper.java
+++ b/src/main/java/net/minecraft/server/EntityCreeper.java
@@ -188,7 +188,7 @@ public class EntityCreeper extends EntityMonster {
         if (itemstack.getItem() == Items.FLINT_AND_STEEL) {
             this.world.a(entityhuman, this.locX, this.locY, this.locZ, SoundEffects.bO, this.bK(), 1.0F, this.random.nextFloat() * 0.4F + 0.8F);
             entityhuman.a(enumhand);
-            if (!this.world.isClientSide) {
+            if (true) { // NeonPaper - Remove isClientSide check
                 this.do_();
                 itemstack.damage(1, entityhuman);
                 return true;
@@ -199,7 +199,7 @@ public class EntityCreeper extends EntityMonster {
     }
 
     private void dr() {
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             boolean flag = this.world.getGameRules().getBoolean("mobGriefing");
             float f = this.isPowered() ? 2.0F : 1.0F;
 
diff --git a/src/main/java/net/minecraft/server/EntityEgg.java b/src/main/java/net/minecraft/server/EntityEgg.java
index 08131afc961fc7834ea0347e2220487bdfca1c63..3fd73f595aa6ea5bff373b7685dbdbd5c5029c6f 100644
--- a/src/main/java/net/minecraft/server/EntityEgg.java
+++ b/src/main/java/net/minecraft/server/EntityEgg.java
@@ -30,7 +30,7 @@ public class EntityEgg extends EntityProjectile {
             movingobjectposition.entity.damageEntity(DamageSource.projectile(this, this.getShooter()), 0.0F);
         }
 
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             boolean hatching = this.random.nextInt(8) == 0; // CraftBukkit
             if (true) {
                 byte b0 = 1;
diff --git a/src/main/java/net/minecraft/server/EntityEnderCrystal.java b/src/main/java/net/minecraft/server/EntityEnderCrystal.java
index 9e77fb63340ea0c827fd66a5536835123f97f30f..64e3ebaffa048b2c96814e41bd1a221c809a7f3d 100644
--- a/src/main/java/net/minecraft/server/EntityEnderCrystal.java
+++ b/src/main/java/net/minecraft/server/EntityEnderCrystal.java
@@ -40,7 +40,7 @@ public class EntityEnderCrystal extends Entity {
         this.lastY = this.locY;
         this.lastZ = this.locZ;
         ++this.a;
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             BlockPosition blockposition = new BlockPosition(this);
 
             if (this.world.worldProvider instanceof WorldProviderTheEnd && this.world.getType(blockposition).getBlock() != Blocks.FIRE) {
@@ -83,14 +83,14 @@ public class EntityEnderCrystal extends Entity {
         } else if (damagesource.getEntity() instanceof EntityEnderDragon) {
             return false;
         } else {
-            if (!this.dead && !this.world.isClientSide) {
+            if (!this.dead) { // NeonPaper - Remove isClientSide check
                 // CraftBukkit start - All non-living entities need this
                 if (CraftEventFactory.handleNonLivingEntityDamageEvent(this, damagesource, f)) {
                     return false;
                 }
                 // CraftBukkit end
                 this.die();
-                if (!this.world.isClientSide) {
+                if (true) { // NeonPaper - Remove isClientSide check
                     if (!damagesource.isExplosion()) {
                         // CraftBukkit start
                         ExplosionPrimeEvent event = new ExplosionPrimeEvent(this.getBukkitEntity(), 6.0F, true);
diff --git a/src/main/java/net/minecraft/server/EntityEnderDragon.java b/src/main/java/net/minecraft/server/EntityEnderDragon.java
index c925de971fcf105fe63f32e739e0cfbe5e6668d5..f782463cc6bc20e58da1ac88a42809c78a891ae5 100644
--- a/src/main/java/net/minecraft/server/EntityEnderDragon.java
+++ b/src/main/java/net/minecraft/server/EntityEnderDragon.java
@@ -33,7 +33,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
     public EntityEnderCrystal currentEnderCrystal;
     private final EnderDragonBattle bK;
     private final DragonControllerManager bL;
-    private int bM = 200;
+    // private int bM = 200; // NeonPaper - Clientside code
     private int bN;
     private final PathPoint[] bO = new PathPoint[24];
     private final int[] bP = new int[24];
@@ -47,9 +47,9 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
         this.setSize(16.0F, 8.0F);
         this.noclip = true;
         this.fireProof = true;
-        this.bM = 100;
+        // this.bM = 100; // NeonPaper - Clientside code
         this.ah = true;
-        if (!world.isClientSide && world.worldProvider instanceof WorldProviderTheEnd) {
+        if (world.worldProvider instanceof WorldProviderTheEnd) { // NeonPaper - Remove isClientSide check
             this.bK = ((WorldProviderTheEnd) world.worldProvider).t();
         } else {
             this.bK = null;
@@ -92,6 +92,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
         float f;
         float f1;
 
+        /* // NeonPaper start - Clientside code
         if (this.world.isClientSide) {
             this.setHealth(this.getHealth());
             if (!this.isSilent()) {
@@ -107,15 +108,18 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
                 }
             }
         }
+        */ // NeonPaper end
 
         this.bE = this.bF;
         float f2;
 
         if (this.getHealth() <= 0.0F) {
+            /* // NeonPaper start - Clientside particles
             f = (this.random.nextFloat() - 0.5F) * 8.0F;
             f1 = (this.random.nextFloat() - 0.5F) * 4.0F;
             f2 = (this.random.nextFloat() - 0.5F) * 8.0F;
             this.world.addParticle(EnumParticle.EXPLOSION_LARGE, this.locX + (double) f, this.locY + 2.0D + (double) f1, this.locZ + (double) f2, 0.0D, 0.0D, 0.0D, new int[0]);
+            */ // NeonPaper end
         } else {
             this.dg();
             f = 0.2F / (MathHelper.sqrt(this.motX * this.motX + this.motZ * this.motZ) * 10.0F + 1.0F);
@@ -151,7 +155,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
                 float f3;
                 float f4;
 
-                if (this.world.isClientSide) {
+                if (false) { // NeonPaper - Remove isClientSide check
                     if (this.bi > 0) {
                         double d3 = this.locX + (this.bj - this.locX) / (double) this.bi;
 
@@ -251,7 +255,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
                 this.bC.setPositionRotation(this.locX + (double) (f12 * 4.5F), this.locY + 2.0D, this.locZ + (double) (f11 * 4.5F), 0.0F, 0.0F);
                 this.bD.B_();
                 this.bD.setPositionRotation(this.locX - (double) (f12 * 4.5F), this.locY + 2.0D, this.locZ - (double) (f11 * 4.5F), 0.0F, 0.0F);
-                if (!this.world.isClientSide && this.hurtTicks == 0) {
+                if (this.hurtTicks == 0) { // NeonPaper - Remove isClientSide check
                     this.a(this.world.getEntities(this, this.bC.getBoundingBox().grow(4.0D, 2.0D, 4.0D).d(0.0D, -2.0D, 0.0D)));
                     this.a(this.world.getEntities(this, this.bD.getBoundingBox().grow(4.0D, 2.0D, 4.0D).d(0.0D, -2.0D, 0.0D)));
                     this.b(this.world.getEntities(this, this.bw.getBoundingBox().g(1.0D)));
@@ -296,7 +300,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
                     entitycomplexpart.setPositionRotation(this.locX - (double) ((f11 * 1.5F + f16 * f4) * f8), this.locY + (adouble1[1] - adouble[1]) - (double) ((f4 + 1.5F) * f9) + 1.5D, this.locZ + (double) ((f12 * 1.5F + f17 * f4) * f8), 0.0F, 0.0F);
                 }
 
-                if (!this.world.isClientSide) {
+                if (true) { // NeonPaper - Remove isClientSide check
                     this.bG = this.b(this.bw.getBoundingBox()) | this.b(this.bx.getBoundingBox()) | this.b(this.by.getBoundingBox());
                     if (this.bK != null) {
                         this.bK.b(this);
@@ -481,6 +485,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
         }
         // CraftBukkit end
 
+        /* // NeonPaper start - Clientside particles
         if (flag1) {
             double d0 = axisalignedbb.a + (axisalignedbb.d - axisalignedbb.a) * (double) this.random.nextFloat();
             double d1 = axisalignedbb.b + (axisalignedbb.e - axisalignedbb.b) * (double) this.random.nextFloat();
@@ -488,6 +493,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
 
             this.world.addParticle(EnumParticle.EXPLOSION_LARGE, d0, d1, d2, 0.0D, 0.0D, 0.0D, new int[0]);
         }
+        */ // NeonPaper end
 
         return flag;
     }
@@ -550,6 +556,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
         }
 
         ++this.bH;
+        /* // NeonPaper start - Clientside particles
         if (this.bH >= 180 && this.bH <= 200) {
             float f = (this.random.nextFloat() - 0.5F) * 8.0F;
             float f1 = (this.random.nextFloat() - 0.5F) * 4.0F;
@@ -557,6 +564,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
 
             this.world.addParticle(EnumParticle.EXPLOSION_HUGE, this.locX + (double) f, this.locY + 2.0D + (double) f1, this.locZ + (double) f2, 0.0D, 0.0D, 0.0D, new int[0]);
         }
+        */ // NeonPaper end
 
         boolean flag = this.world.getGameRules().getBoolean("doMobLoot");
         short short0 = 500;
@@ -565,7 +573,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
             short0 = 12000;
         }
 
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             if (this.bH > 150 && this.bH % 5 == 0 && flag) {
                 this.a(MathHelper.d((float) short0 * 0.08F));
             }
@@ -599,7 +607,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
         this.move(EnumMoveType.SELF, 0.0D, 0.10000000149011612D, 0.0D);
         this.yaw += 20.0F;
         this.aN = this.yaw;
-        if (this.bH == 200 && !this.world.isClientSide) {
+        if (this.bH == 200) { // NeonPaper - Remove isClientSide check
             if (flag) {
                 this.a(MathHelper.d((float) short0 * 0.2F));
             }
@@ -935,7 +943,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
     }
 
     public void a(DataWatcherObject<?> datawatcherobject) {
-        if (EntityEnderDragon.PHASE.equals(datawatcherobject) && this.world.isClientSide) {
+        if (false) { // NeonPaper - Remove isClientSide check
             this.bL.setControllerPhase(DragonControllerPhase.getById(((Integer) this.getDataWatcher().get(EntityEnderDragon.PHASE)).intValue()));
         }
 
diff --git a/src/main/java/net/minecraft/server/EntityEnderPearl.java b/src/main/java/net/minecraft/server/EntityEnderPearl.java
index 20c495cbd0e5d6226d70a77f1d71106e9a05654e..9dc8a8af10e117c4806f95b529c2c500350d683e 100644
--- a/src/main/java/net/minecraft/server/EntityEnderPearl.java
+++ b/src/main/java/net/minecraft/server/EntityEnderPearl.java
@@ -58,11 +58,13 @@ public class EntityEnderPearl extends EntityProjectile {
             }
         }
 
+        /* // NeonPaper start - Clientside particles
         for (int i = 0; i < 32; ++i) {
             this.world.addParticle(EnumParticle.PORTAL, this.locX, this.locY + this.random.nextDouble() * 2.0D, this.locZ, this.random.nextGaussian(), 0.0D, this.random.nextGaussian(), new int[0]);
         }
+        */ // NeonPaper end
 
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             if (entityliving instanceof EntityPlayer) {
                 EntityPlayer entityplayer = (EntityPlayer) entityliving;
 
@@ -110,7 +112,7 @@ public class EntityEnderPearl extends EntityProjectile {
     public void B_() {
         EntityLiving entityliving = this.getShooter();
 
-        if (entityliving != null && entityliving instanceof EntityHuman && !entityliving.isAlive()) {
+        if (entityliving instanceof EntityHuman && !entityliving.isAlive()) { // NeonPaper - Optimize
             this.die();
         } else {
             super.B_();
diff --git a/src/main/java/net/minecraft/server/EntityEnderSignal.java b/src/main/java/net/minecraft/server/EntityEnderSignal.java
index c8c75445eab5c48e93cdbd737af2892a22d9aca0..11b6ff496ac40b7a8e738eb5171bc70ebe1b433b 100644
--- a/src/main/java/net/minecraft/server/EntityEnderSignal.java
+++ b/src/main/java/net/minecraft/server/EntityEnderSignal.java
@@ -74,7 +74,7 @@ public class EntityEnderSignal extends Entity {
 
         this.pitch = this.lastPitch + (this.pitch - this.lastPitch) * 0.2F;
         this.yaw = this.lastYaw + (this.yaw - this.lastYaw) * 0.2F;
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             double d0 = this.a - this.locX;
             double d1 = this.c - this.locZ;
             float f1 = (float) Math.sqrt(d0 * d0 + d1 * d1);
@@ -97,6 +97,7 @@ public class EntityEnderSignal extends Entity {
 
         float f3 = 0.25F;
 
+        /* // NeonPaper start - Clientside particles
         if (this.isInWater()) {
             for (int i = 0; i < 4; ++i) {
                 this.world.addParticle(EnumParticle.WATER_BUBBLE, this.locX - this.motX * 0.25D, this.locY - this.motY * 0.25D, this.locZ - this.motZ * 0.25D, this.motX, this.motY, this.motZ, new int[0]);
@@ -104,11 +105,12 @@ public class EntityEnderSignal extends Entity {
         } else {
             this.world.addParticle(EnumParticle.PORTAL, this.locX - this.motX * 0.25D + this.random.nextDouble() * 0.6D - 0.3D, this.locY - this.motY * 0.25D - 0.5D, this.locZ - this.motZ * 0.25D + this.random.nextDouble() * 0.6D - 0.3D, this.motX, this.motY, this.motZ, new int[0]);
         }
+        */ // NeonPaper end
 
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             this.setPosition(this.locX, this.locY, this.locZ);
             ++this.d;
-            if (this.d > 80 && !this.world.isClientSide) {
+            if (this.d > 80) { // NeonPaper - Remove isClientSide check
                 this.a(SoundEffects.bb, 1.0F, 1.0F);
                 this.die();
                 if (this.e) {
diff --git a/src/main/java/net/minecraft/server/EntityEnderman.java b/src/main/java/net/minecraft/server/EntityEnderman.java
index 2472edfc9f82783527832bb1396c5b3c5398209c..8472ec9c3884d980f9675a416b47b120a918dd2b 100644
--- a/src/main/java/net/minecraft/server/EntityEnderman.java
+++ b/src/main/java/net/minecraft/server/EntityEnderman.java
@@ -102,15 +102,17 @@ public class EntityEnderman extends EntityMonster {
     public void p() {
         if (this.ticksLived >= this.bz + 400) {
             this.bz = this.ticksLived;
+            /* // NeonPaper start - Clientside particles
             if (!this.isSilent()) {
                 this.world.a(this.locX, this.locY + (double) this.getHeadHeight(), this.locZ, SoundEffects.bh, this.bK(), 2.5F, 1.0F, false);
             }
+            */ // NeonPaper end
         }
 
     }
 
     public void a(DataWatcherObject<?> datawatcherobject) {
-        if (EntityEnderman.by.equals(datawatcherobject) && this.do_() && this.world.isClientSide) {
+        if (false) { // NeonPaper - Remove isClientSide check
             this.p();
         }
 
@@ -179,7 +181,7 @@ public class EntityEnderman extends EntityMonster {
     }
 
     public void n() {
-        if (this.world.isClientSide) {
+        if (false) { // NeonPaper - Remove isClientSide check
             for (int i = 0; i < 2; ++i) {
                 this.world.addParticle(EnumParticle.PORTAL, this.locX + (this.random.nextDouble() - 0.5D) * (double) this.width, this.locY + this.random.nextDouble() * (double) this.length - 0.25D, this.locZ + (this.random.nextDouble() - 0.5D) * (double) this.width, (this.random.nextDouble() - 0.5D) * 2.0D, -this.random.nextDouble(), (this.random.nextDouble() - 0.5D) * 2.0D, new int[0]);
             }
diff --git a/src/main/java/net/minecraft/server/EntityEvokerFangs.java b/src/main/java/net/minecraft/server/EntityEvokerFangs.java
index 1895112269254b345368562a8296dc1802f74010..2dd0e83fa36ed7c8b7c48eaf714904ac09e42c21 100644
--- a/src/main/java/net/minecraft/server/EntityEvokerFangs.java
+++ b/src/main/java/net/minecraft/server/EntityEvokerFangs.java
@@ -63,7 +63,7 @@ public class EntityEvokerFangs extends Entity {
 
     public void B_() {
         super.B_();
-        if (this.world.isClientSide) {
+        if (false) { // NeonPaper - Remove isClientSide check
             if (this.d) {
                 --this.c;
                 if (this.c == 14) {
diff --git a/src/main/java/net/minecraft/server/EntityExperienceOrb.java b/src/main/java/net/minecraft/server/EntityExperienceOrb.java
index becb102c1bf372cc2bcbe7deab08b6d51a0290ff..f3535466a55c397da936c9d1f0ea488ca0247038 100644
--- a/src/main/java/net/minecraft/server/EntityExperienceOrb.java
+++ b/src/main/java/net/minecraft/server/EntityExperienceOrb.java
@@ -205,7 +205,7 @@ public class EntityExperienceOrb extends Entity {
     }
 
     public void d(EntityHuman entityhuman) {
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             if (this.c == 0 && entityhuman.bD == 0 && new com.destroystokyo.paper.event.player.PlayerPickupExperienceEvent(((EntityPlayer) entityhuman).getBukkitEntity(), (org.bukkit.entity.ExperienceOrb) this.getBukkitEntity()).callEvent()) { // Paper
                 entityhuman.bD = 2;
                 entityhuman.receive(this, 1);
diff --git a/src/main/java/net/minecraft/server/EntityFallingBlock.java b/src/main/java/net/minecraft/server/EntityFallingBlock.java
index d0b67d8fd63dfc78a3919fb7fdf35796421d8558..dcf84e6937bfe910539e51c269d80b50f1d52a04 100644
--- a/src/main/java/net/minecraft/server/EntityFallingBlock.java
+++ b/src/main/java/net/minecraft/server/EntityFallingBlock.java
@@ -74,7 +74,7 @@ public class EntityFallingBlock extends Entity {
                 blockposition = new BlockPosition(this);
                 if (this.world.getType(blockposition).getBlock() == block && !CraftEventFactory.callEntityChangeBlockEvent(this, blockposition, Blocks.AIR, 0).isCancelled()) {
                     this.world.setAir(blockposition);
-                } else if (!this.world.isClientSide) {
+                } else if (true) { // NeonPaper - Remove isClientSide check
                     this.die();
                     return;
                 }
@@ -96,7 +96,7 @@ public class EntityFallingBlock extends Entity {
             }
             // Paper end
 
-            if (!this.world.isClientSide) {
+            if (true) { // NeonPaper - Remove isClientSide check
                 blockposition = new BlockPosition(this);
                 boolean flag = this.block.getBlock() == Blocks.dS;
                 boolean flag1 = flag && this.world.getType(blockposition).getMaterial() == Material.WATER;
@@ -112,7 +112,7 @@ public class EntityFallingBlock extends Entity {
                 }
 
                 if (!this.onGround && !flag1) {
-                    if (this.ticksLived > 100 && !this.world.isClientSide && (blockposition.getY() < 1 || blockposition.getY() > 256) || this.ticksLived > 600) {
+                    if (this.ticksLived > 100 && (blockposition.getY() < 1 || blockposition.getY() > 256) || this.ticksLived > 600) { // NeonPaper - Remove isClientSide check
                         if (this.dropItem && this.world.getGameRules().getBoolean("doEntityDrops")) {
                             this.a(new ItemStack(block, 1, block.getDropData(this.block)), 0.0F);
                         }
@@ -247,7 +247,7 @@ public class EntityFallingBlock extends Entity {
         Block block = this.block != null ? this.block.getBlock() : Blocks.AIR;
         MinecraftKey minecraftkey = (MinecraftKey) Block.REGISTRY.b(block);
 
-        nbttagcompound.setString("Block", minecraftkey == null ? "" : minecraftkey.toString());
+        nbttagcompound.setString("Block", /*minecraftkey == null*/false ? "" : minecraftkey.toString()); // NeonPaper - Optimize
         nbttagcompound.setByte("Data", (byte) block.toLegacyData(this.block));
         nbttagcompound.setInt("Time", this.ticksLived);
         nbttagcompound.setBoolean("DropItem", this.dropItem);
diff --git a/src/main/java/net/minecraft/server/EntityFireball.java b/src/main/java/net/minecraft/server/EntityFireball.java
index 657b3b5ac1d985c7d6b653f512b8f5cbf037cd8f..4fcd71c5f9651c4e13a37480c9cd75725424ce3d 100644
--- a/src/main/java/net/minecraft/server/EntityFireball.java
+++ b/src/main/java/net/minecraft/server/EntityFireball.java
@@ -59,7 +59,7 @@ public abstract class EntityFireball extends Entity {
     }
 
     public void B_() {
-        if (!this.world.isClientSide && (this.shooter != null && this.shooter.dead || !this.world.isLoaded(new BlockPosition(this)))) {
+        if (this.shooter != null && this.shooter.dead || !this.world.isLoaded(new BlockPosition(this))) { // NeonPaper - Remove isClientSide check
             this.die();
         } else {
             super.B_();
@@ -96,11 +96,13 @@ public abstract class EntityFireball extends Entity {
             float f = this.l();
 
             if (this.isInWater()) {
+                /* // NeonPaper start - Clientside particles
                 for (int i = 0; i < 4; ++i) {
                     float f1 = 0.25F;
 
                     this.world.addParticle(EnumParticle.WATER_BUBBLE, this.locX - this.motX * 0.25D, this.locY - this.motY * 0.25D, this.locZ - this.motZ * 0.25D, this.motX, this.motY, this.motZ, new int[0]);
                 }
+                */ // NeonPaper end
 
                 f = 0.8F;
             }
@@ -111,7 +113,7 @@ public abstract class EntityFireball extends Entity {
             this.motX *= (double) f;
             this.motY *= (double) f;
             this.motZ *= (double) f;
-            this.world.addParticle(this.j(), this.locX, this.locY + 0.5D, this.locZ, 0.0D, 0.0D, 0.0D, new int[0]);
+            // this.world.addParticle(this.j(), this.locX, this.locY + 0.5D, this.locZ, 0.0D, 0.0D, 0.0D, new int[0]); // NeonPaper - Clientside particles
             this.setPosition(this.locX, this.locY, this.locZ);
         }
     }
diff --git a/src/main/java/net/minecraft/server/EntityFireworks.java b/src/main/java/net/minecraft/server/EntityFireworks.java
index bd0ec95f28448c67384a0360eb4fc36a72e93b69..cd11eadaa4a3fb4d56b9094979d51097087d61a6 100644
--- a/src/main/java/net/minecraft/server/EntityFireworks.java
+++ b/src/main/java/net/minecraft/server/EntityFireworks.java
@@ -124,11 +124,11 @@ public class EntityFireworks extends Entity {
         }
 
         ++this.ticksFlown;
-        if (this.world.isClientSide && this.ticksFlown % 2 < 2) {
+        if (false && this.ticksFlown % 2 < 2) { // NeonPaper - Remove isClientSide check
             this.world.addParticle(EnumParticle.FIREWORKS_SPARK, this.locX, this.locY - 0.3D, this.locZ, this.random.nextGaussian() * 0.05D, -this.motY * 0.5D, this.random.nextGaussian() * 0.05D, new int[0]);
         }
 
-        if (!this.world.isClientSide && this.ticksFlown > this.expectedLifespan) {
+        if (this.ticksFlown > this.expectedLifespan) { // NeonPaper - Remove isClientSide check
             // CraftBukkit start
             if (!org.bukkit.craftbukkit.event.CraftEventFactory.callFireworkExplodeEvent(this).isCancelled()) {
                 this.world.broadcastEntityEffect(this, (byte) 17);
diff --git a/src/main/java/net/minecraft/server/EntityFishingHook.java b/src/main/java/net/minecraft/server/EntityFishingHook.java
index 177d8582f7f8f9350c1f66fc5d1c3c7c9afdf7a4..8ee041670aa6fde88b65ff7fff9e3a78fa87c5f7 100644
--- a/src/main/java/net/minecraft/server/EntityFishingHook.java
+++ b/src/main/java/net/minecraft/server/EntityFishingHook.java
@@ -92,7 +92,7 @@ public class EntityFishingHook extends Entity {
         super.B_();
         if (this.owner == null) {
             this.die();
-        } else if (this.world.isClientSide || !this.p()) {
+        } else if (!this.p()) { // NeonPaper - Remove isClientSide check
             if (this.isInGround) {
                 ++this.d;
                 if (this.d >= 1200) {
@@ -128,7 +128,7 @@ public class EntityFishingHook extends Entity {
                     return;
                 }
 
-                if (!this.world.isClientSide) {
+                if (true) { // NeonPaper - Remove isClientSide check
                     this.r();
                 }
 
@@ -168,7 +168,7 @@ public class EntityFishingHook extends Entity {
                     }
 
                     this.motY -= d0 * (double) this.random.nextFloat() * 0.2D;
-                    if (!this.world.isClientSide && f > 0.0F) {
+                    if (f > 0.0F) { // NeonPaper - Remove isClientSide check
                         this.a(blockposition);
                     }
                 }
@@ -413,7 +413,7 @@ public class EntityFishingHook extends Entity {
     public void a(NBTTagCompound nbttagcompound) {}
 
     public int j() {
-        if (!this.world.isClientSide && this.owner != null) {
+        if (this.owner != null) { // NeonPaper - Remove isClientSide check
             int i = 0;
 
             if (this.hooked != null) {
diff --git a/src/main/java/net/minecraft/server/EntityGhast.java b/src/main/java/net/minecraft/server/EntityGhast.java
index 30ca03977358c997b473b6fb92e2c4ebeb70703a..1173081b0137ce0859f86bf28c8dccdbeb00d9c9 100644
--- a/src/main/java/net/minecraft/server/EntityGhast.java
+++ b/src/main/java/net/minecraft/server/EntityGhast.java
@@ -33,7 +33,7 @@ public class EntityGhast extends EntityFlying implements IMonster {
 
     public void B_() {
         super.B_();
-        if (!this.world.isClientSide && this.world.getDifficulty() == EnumDifficulty.PEACEFUL) {
+        if (this.world.getDifficulty() == EnumDifficulty.PEACEFUL) { // NeonPaper - Remove isClientSide check
             this.die();
         }
 
diff --git a/src/main/java/net/minecraft/server/EntityGuardian.java b/src/main/java/net/minecraft/server/EntityGuardian.java
index 1bd98a7b58ff0c29d3274e09d00c05123dbb8f43..2f718d48c0b05c0651d2ad1bc7f9d0c9c0c30187 100644
--- a/src/main/java/net/minecraft/server/EntityGuardian.java
+++ b/src/main/java/net/minecraft/server/EntityGuardian.java
@@ -87,7 +87,7 @@ public class EntityGuardian extends EntityMonster {
     public EntityLiving dq() {
         if (!this.dp()) {
             return null;
-        } else if (this.world.isClientSide) {
+        } else if (false) { // NeonPaper - Remove isClientSide check
             if (this.bC != null) {
                 return this.bC;
             } else {
@@ -143,7 +143,7 @@ public class EntityGuardian extends EntityMonster {
     }
 
     public void n() {
-        if (this.world.isClientSide) {
+        if (false) { // NeonPaper - Remove isClientSide check
             this.b = this.a;
             if (!this.isInWater()) {
                 this.c = 2.0F;
diff --git a/src/main/java/net/minecraft/server/EntityHanging.java b/src/main/java/net/minecraft/server/EntityHanging.java
index cc903e1ea1fc69196b3b369d241b6be1ec9af38d..db222d8a3004d0edb3fb865e105853f3d76154e6 100644
--- a/src/main/java/net/minecraft/server/EntityHanging.java
+++ b/src/main/java/net/minecraft/server/EntityHanging.java
@@ -100,7 +100,7 @@ public abstract class EntityHanging extends Entity {
         this.lastX = this.locX;
         this.lastY = this.locY;
         this.lastZ = this.locZ;
-        if (this.d++ == this.world.spigotConfig.hangingTickFrequency && !this.world.isClientSide) { // Spigot
+        if (this.d++ == this.world.spigotConfig.hangingTickFrequency) { // Spigot // NeonPaper - Remove isClientSide check
             this.d = 0;
             if (!this.dead && !this.survives()) {
                 // CraftBukkit start - fire break events
@@ -172,7 +172,7 @@ public abstract class EntityHanging extends Entity {
         if (this.isInvulnerable(damagesource)) {
             return false;
         } else {
-            if (!this.dead && !this.world.isClientSide) {
+            if (!this.dead) { // NeonPaper - Remove isClientSide check
                 // CraftBukkit start - fire break events
                 HangingBreakEvent event = new HangingBreakEvent((Hanging) this.getBukkitEntity(), HangingBreakEvent.RemoveCause.DEFAULT);
                 if (damagesource.getEntity() != null) {
@@ -198,8 +198,8 @@ public abstract class EntityHanging extends Entity {
     }
 
     public void move(EnumMoveType enummovetype, double d0, double d1, double d2) {
-        if (!this.world.isClientSide && !this.dead && d0 * d0 + d1 * d1 + d2 * d2 > 0.0D) {
-            if (this.dead) return; // CraftBukkit
+        if (!this.dead && d0 * d0 + d1 * d1 + d2 * d2 > 0.0D) { // NeonPaper - Remove isClientSide check
+            if (/*this.dead*/false) return; // CraftBukkit // NeonPaper - Always false
 
             // CraftBukkit start - fire break events
             // TODO - Does this need its own cause? Seems to only be triggered by pistons
diff --git a/src/main/java/net/minecraft/server/EntityHorse.java b/src/main/java/net/minecraft/server/EntityHorse.java
index f5b5bb3f51c8007d789a1a795cdf40b5bebeca0b..cbc092a91a9f4cd20729c669fa65783e29d27ef0 100644
--- a/src/main/java/net/minecraft/server/EntityHorse.java
+++ b/src/main/java/net/minecraft/server/EntityHorse.java
@@ -8,12 +8,14 @@ public class EntityHorse extends EntityHorseAbstract {
     private static final UUID bH = UUID.fromString("556E1665-8B10-40C8-8F9D-CF9B1667F295");
     private static final DataWatcherObject<Integer> bI = DataWatcher.a(EntityHorse.class, DataWatcherRegistry.b);
     private static final DataWatcherObject<Integer> bJ = DataWatcher.a(EntityHorse.class, DataWatcherRegistry.b);
+    /* // NeonPaper start - Clientside texture fields
     private static final String[] bK = new String[] { "textures/entity/horse/horse_white.png", "textures/entity/horse/horse_creamy.png", "textures/entity/horse/horse_chestnut.png", "textures/entity/horse/horse_brown.png", "textures/entity/horse/horse_black.png", "textures/entity/horse/horse_gray.png", "textures/entity/horse/horse_darkbrown.png"};
     private static final String[] bL = new String[] { "hwh", "hcr", "hch", "hbr", "hbl", "hgr", "hdb"};
     private static final String[] bM = new String[] { null, "textures/entity/horse/horse_markings_white.png", "textures/entity/horse/horse_markings_whitefield.png", "textures/entity/horse/horse_markings_whitedots.png", "textures/entity/horse/horse_markings_blackdots.png"};
     private static final String[] bN = new String[] { "", "wo_", "wmo", "wdo", "bdo"};
     private String bO;
     private final String[] bP = new String[3];
+    */ // NeonPaper end
 
     public EntityHorse(World world) {
         super(world);
@@ -63,7 +65,7 @@ public class EntityHorse extends EntityHorseAbstract {
     }
 
     private void dQ() {
-        this.bO = null;
+        // this.bO = null; // NeonPaper - Clientside texture field
     }
 
     protected void dD() {
@@ -76,7 +78,7 @@ public class EntityHorse extends EntityHorseAbstract {
 
         this.datawatcher.set(EntityHorse.bJ, Integer.valueOf(enumhorsearmor.a()));
         this.dQ();
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             this.getAttributeInstance(GenericAttributes.h).b(EntityHorse.bH);
             int i = enumhorsearmor.c();
 
@@ -120,7 +122,7 @@ public class EntityHorse extends EntityHorseAbstract {
 
     public void B_() {
         super.B_();
-        if (this.world.isClientSide && this.datawatcher.a()) {
+        if (false && this.datawatcher.a()) { // NeonPaper - Remove isClientSide check
             this.datawatcher.e();
             this.dQ();
         }
diff --git a/src/main/java/net/minecraft/server/EntityHorseAbstract.java b/src/main/java/net/minecraft/server/EntityHorseAbstract.java
index dcc39236f0cdfdcecff9b62252e0595178138693..796e71a306c98272b526a3c981f55e67b736dd12 100644
--- a/src/main/java/net/minecraft/server/EntityHorseAbstract.java
+++ b/src/main/java/net/minecraft/server/EntityHorseAbstract.java
@@ -236,7 +236,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
     }
 
     protected void dD() {
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             this.u(!this.inventoryChest.getItem(0).isEmpty() && this.dF());
         }
     }
@@ -368,7 +368,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
     }
 
     public void c(EntityHuman entityhuman) {
-        if (!this.world.isClientSide && (!this.isVehicle() || this.w(entityhuman)) && this.isTamed()) {
+        if ((!this.isVehicle() || this.w(entityhuman)) && this.isTamed()) { // NeonPaper - Remove isClientSide check
             this.inventoryChest.a(this.getName());
             entityhuman.openHorseInventory(this, this.inventoryChest);
         }
@@ -421,8 +421,8 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
         }
 
         if (this.isBaby() && short0 > 0) {
-            this.world.addParticle(EnumParticle.VILLAGER_HAPPY, this.locX + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, this.locY + 0.5D + (double) (this.random.nextFloat() * this.length), this.locZ + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, 0.0D, 0.0D, 0.0D, new int[0]);
-            if (!this.world.isClientSide) {
+            // this.world.addParticle(EnumParticle.VILLAGER_HAPPY, this.locX + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, this.locY + 0.5D + (double) (this.random.nextFloat() * this.length), this.locZ + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, 0.0D, 0.0D, 0.0D, new int[0]); // NeonPaper - Clientside particles
+            if (true) { // NeonPaper - Remove isClientSide check
                 this.setAge(short0);
             }
 
@@ -431,7 +431,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
 
         if (b0 > 0 && (flag || !this.isTamed()) && this.getTemper() < this.getMaxDomestication()) {
             flag = true;
-            if (!this.world.isClientSide) {
+            if (true) { // NeonPaper - Remove isClientSide check
                 this.n(b0);
             }
         }
@@ -448,7 +448,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
         entityhuman.pitch = this.pitch;
         this.v(false);
         this.setStanding(false);
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             entityhuman.startRiding(this);
         }
 
@@ -468,7 +468,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
 
     public void die(DamageSource damagesource) {
         // super.die(damagesource); // Moved down
-        if (!this.world.isClientSide && this.inventoryChest != null) {
+        if (this.inventoryChest != null) { // NeonPaper - Remove isClientSide check
             for (int i = 0; i < this.inventoryChest.getSize(); ++i) {
                 ItemStack itemstack = this.inventoryChest.getItem(i);
 
@@ -487,7 +487,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
         }
 
         super.n();
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             if (this.random.nextInt(900) == 0 && this.deathTicks == 0) {
                 this.heal(1.0F, RegainReason.REGEN); // CraftBukkit
             }
@@ -590,7 +590,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
     }
 
     private void dp() {
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             this.bL = 1;
             this.c(64, true);
         }
diff --git a/src/main/java/net/minecraft/server/EntityHorseChestedAbstract.java b/src/main/java/net/minecraft/server/EntityHorseChestedAbstract.java
index 6c5204961faab9aa2190c215f7aea9b9af290b2f..9a46680932ed05826d5f16bee51c32315fbdd913 100644
--- a/src/main/java/net/minecraft/server/EntityHorseChestedAbstract.java
+++ b/src/main/java/net/minecraft/server/EntityHorseChestedAbstract.java
@@ -45,7 +45,7 @@ public abstract class EntityHorseChestedAbstract extends EntityHorseAbstract {
     public void die(DamageSource damagesource) {
         // super.die(damagesource); // CraftBukkit - moved down
         if (this.isCarryingChest()) {
-            if (!this.world.isClientSide) {
+            if (true) { // NeonPaper - Remove isClientSide check
                 this.a(Item.getItemOf(Blocks.CHEST), 1);
             }
 
diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java
index aa0b27f0e1c6cd5168af02157ce8ce495afc6373..471580f01bb27fe0e4df55e12bce8a1f20ddab0c 100644
--- a/src/main/java/net/minecraft/server/EntityHuman.java
+++ b/src/main/java/net/minecraft/server/EntityHuman.java
@@ -87,7 +87,7 @@ public abstract class EntityHuman extends EntityLiving {
         this.bW = this.l();
         this.a(a(gameprofile));
         this.g = gameprofile;
-        this.defaultContainer = new ContainerPlayer(this.inventory, !world.isClientSide, this);
+        this.defaultContainer = new ContainerPlayer(this.inventory, true, this); // NeonPaper - Remove isClientSide check
         this.activeContainer = this.defaultContainer;
         BlockPosition blockposition = world.getSpawn();
 
@@ -129,7 +129,7 @@ public abstract class EntityHuman extends EntityLiving {
                 this.sleepTicks = 100;
             }
 
-            if (!this.world.isClientSide) {
+            if (true) { // NeonPaper - Remove isClientSide check
                 if (!this.s()) {
                     this.a(true, true, false);
                 } else if (this.world.D()) {
@@ -144,7 +144,7 @@ public abstract class EntityHuman extends EntityLiving {
         }
 
         super.B_();
-        if (!this.world.isClientSide && this.activeContainer != null && !this.activeContainer.canUse(this)) {
+        if (this.activeContainer != null && !this.activeContainer.canUse(this)) { // NeonPaper - Remove isClientSide check
             this.closeInventory(org.bukkit.event.inventory.InventoryCloseEvent.Reason.CANT_USE); // Paper
             this.activeContainer = this.defaultContainer;
         }
@@ -153,8 +153,8 @@ public abstract class EntityHuman extends EntityLiving {
             this.extinguish();
         }
 
-        this.r();
-        if (!this.world.isClientSide) {
+        // this.r(); // NeonPaper - Remove cape animation update
+        if (true) { // NeonPaper - Remove isClientSide check
             this.foodData.a(this);
             this.b(StatisticList.g);
             if (this.isAlive()) {
@@ -190,6 +190,7 @@ public abstract class EntityHuman extends EntityLiving {
     }
 
     private void r() {
+        if (true) return; // NeonPaper - Remove cape animation update
         this.bE = this.bH;
         this.bF = this.bI;
         this.bG = this.bJ;
@@ -306,7 +307,7 @@ public abstract class EntityHuman extends EntityLiving {
     }
 
     public void aE() {
-        if (!this.world.isClientSide && this.isSneaking() && this.isPassenger()) {
+        if (this.isSneaking() && this.isPassenger()) { // NeonPaper - Remove isClientSide check
             this.stopRiding();
             this.setSneaking(false);
         } else {
@@ -356,7 +357,7 @@ public abstract class EntityHuman extends EntityLiving {
         super.n();
         AttributeInstance attributeinstance = this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED);
 
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             attributeinstance.setValue((double) this.abilities.b());
         }
 
@@ -405,7 +406,7 @@ public abstract class EntityHuman extends EntityLiving {
 
         this.j(this.getShoulderEntityLeft());
         this.j(this.getShoulderEntityRight());
-        if (!this.world.isClientSide && (this.fallDistance > 0.5F || this.isInWater() || this.isPassenger()) || this.abilities.isFlying) {
+        if ((this.fallDistance > 0.5F || this.isInWater() || this.isPassenger()) || this.abilities.isFlying) { // NeonPaper - Remove isClientSide check
             if (!this.world.paperConfig.parrotsHangOnBetter) this.releaseShoulderEntities(); // Paper - Hang on!
         }
 
@@ -750,7 +751,7 @@ public abstract class EntityHuman extends EntityLiving {
             if (this.getHealth() <= 0.0F) {
                 return false;
             } else {
-                if (this.isSleeping() && !this.world.isClientSide) {
+                if (this.isSleeping()) { // NeonPaper - Remove isClientSide check
                     this.a(true, true, false);
                 }
 
@@ -1224,7 +1225,7 @@ public abstract class EntityHuman extends EntityLiving {
     public EntityHuman.EnumBedResult a(BlockPosition blockposition) {
         EnumDirection enumdirection = (EnumDirection) this.world.getType(blockposition).get(BlockFacingHorizontal.FACING);
 
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             if (this.isSleeping() || !this.isAlive()) {
                 return EntityHuman.EnumBedResult.OTHER_PROBLEM;
             }
@@ -1274,7 +1275,7 @@ public abstract class EntityHuman extends EntityLiving {
             float f = 0.5F + (float) enumdirection.getAdjacentX() * 0.4F;
             float f1 = 0.5F + (float) enumdirection.getAdjacentZ() * 0.4F;
 
-            this.a(enumdirection);
+            // this.a(enumdirection); // NeonPaper - Clientside sleep render offset
             this.setPosition((double) ((float) blockposition.getX() + f), (double) ((float) blockposition.getY() + 0.6875F), (double) ((float) blockposition.getZ() + f1));
         } else {
             this.setPosition((double) ((float) blockposition.getX() + 0.5F), (double) ((float) blockposition.getY() + 0.6875F), (double) ((float) blockposition.getZ() + 0.5F));
@@ -1286,7 +1287,7 @@ public abstract class EntityHuman extends EntityLiving {
         this.motX = 0.0D;
         this.motY = 0.0D;
         this.motZ = 0.0D;
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             this.world.everyoneSleeping();
         }
 
@@ -1304,6 +1305,7 @@ public abstract class EntityHuman extends EntityLiving {
     }
 
     private void a(EnumDirection enumdirection) {
+        if (true) return; // NeonPaper - Clientside sleep render offset
         this.bM = -1.8F * (float) enumdirection.getAdjacentX();
         this.bN = -1.8F * (float) enumdirection.getAdjacentZ();
     }
@@ -1324,7 +1326,7 @@ public abstract class EntityHuman extends EntityLiving {
         }
 
         this.sleeping = false;
-        if (!this.world.isClientSide && flag1) {
+        if (flag1) { // NeonPaper - Remove isClientSide check
             this.world.everyoneSleeping();
         }
 
@@ -1619,7 +1621,7 @@ public abstract class EntityHuman extends EntityLiving {
 
     public void applyExhaustion(float f) {
         if (!this.abilities.isInvulnerable) {
-            if (!this.world.isClientSide) {
+            if (true) { // NeonPaper - Remove isClientSide check
                 this.foodData.a(f);
             }
 
@@ -1686,7 +1688,18 @@ public abstract class EntityHuman extends EntityLiving {
     }
 
     public ItemStack getEquipment(EnumItemSlot enumitemslot) {
+        // NeonPaper start - Optimize
+        /*
         return enumitemslot == EnumItemSlot.MAINHAND ? this.inventory.getItemInHand() : (enumitemslot == EnumItemSlot.OFFHAND ? (ItemStack) this.inventory.extraSlots.get(0) : (enumitemslot.a() == EnumItemSlot.Function.ARMOR ? (ItemStack) this.inventory.armor.get(enumitemslot.b()) : ItemStack.a));
+        */
+        switch (enumitemslot) {
+            case MAINHAND:
+                return this.inventory.getItemInHand();
+            case OFFHAND:
+                return this.inventory.extraSlots.get(0);
+        }
+        return enumitemslot.a() == EnumItemSlot.Function.ARMOR ? this.inventory.armor.get(enumitemslot.b()) : ItemStack.a;
+        // NeonPaper end
     }
 
     public void setSlot(EnumItemSlot enumitemslot, ItemStack itemstack) {
@@ -1765,7 +1778,7 @@ public abstract class EntityHuman extends EntityLiving {
     }
     // Paper - Moved to new method that now returns entity, and properly null checks
     private Entity spawnEntityFromShoulder0(@Nullable NBTTagCompound nbttagcompound) { // CraftBukkit void->boolean - Paper - return Entity
-        if (!this.world.isClientSide && nbttagcompound != null && !nbttagcompound.isEmpty()) { // Paper - null check
+        if (nbttagcompound != null && !nbttagcompound.isEmpty()) { // Paper - null check // NeonPaper - Remove isClientSide check
             Entity entity = EntityTypes.a(nbttagcompound, this.world);
             if (entity == null) { // Paper - null check
                 return null;
diff --git a/src/main/java/net/minecraft/server/EntityIllagerIllusioner.java b/src/main/java/net/minecraft/server/EntityIllagerIllusioner.java
index ad81bd05932d0ed5c1ee1721737d0ae479455ac1..6c90b11f8644f9b4f459bfb856913a4e6b89f1f0 100644
--- a/src/main/java/net/minecraft/server/EntityIllagerIllusioner.java
+++ b/src/main/java/net/minecraft/server/EntityIllagerIllusioner.java
@@ -4,19 +4,23 @@ import javax.annotation.Nullable;
 
 public class EntityIllagerIllusioner extends EntityIllagerWizard implements IRangedEntity {
 
+    /* // NeonPaper start - Clientside code
     private int c;
     private final Vec3D[][] bx;
+    */ // NeonPaper end
 
     public EntityIllagerIllusioner(World world) {
         super(world);
         this.setSize(0.6F, 1.95F);
         this.b_ = 5;
+        /* // NeonPaper start - Clientside code
         this.bx = new Vec3D[2][4];
 
         for (int i = 0; i < 4; ++i) {
             this.bx[0][i] = new Vec3D(0.0D, 0.0D, 0.0D);
             this.bx[1][i] = new Vec3D(0.0D, 0.0D, 0.0D);
         }
+        */ // NeonPaper end
 
     }
 
@@ -58,6 +62,7 @@ public class EntityIllagerIllusioner extends EntityIllagerWizard implements IRan
 
     public void n() {
         super.n();
+        /* // NeonPaper start - Clientside code
         if (this.world.isClientSide && this.isInvisible()) {
             --this.c;
             if (this.c < 0) {
@@ -92,6 +97,7 @@ public class EntityIllagerIllusioner extends EntityIllagerWizard implements IRan
                 this.world.a(this.locX, this.locY, this.locZ, SoundEffects.dg, this.bK(), 1.0F, 1.0F, false);
             }
         }
+        */ // NeonPaper end
 
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityIllagerWizard.java b/src/main/java/net/minecraft/server/EntityIllagerWizard.java
index cc0787c968fc00bbf41b7699bd515172bbb0bfe6..4376d57c5fb051711e77d88b698d0360261c1c58 100644
--- a/src/main/java/net/minecraft/server/EntityIllagerWizard.java
+++ b/src/main/java/net/minecraft/server/EntityIllagerWizard.java
@@ -29,7 +29,7 @@ public abstract class EntityIllagerWizard extends EntityIllagerAbstract {
     }
 
     public boolean dn() {
-        return this.world.isClientSide ? ((Byte) this.datawatcher.get(EntityIllagerWizard.c)).byteValue() > 0 : this.b > 0;
+        return this.b > 0; // NeonPaper - Remove isClientSide check
     }
 
     public void setSpell(EntityIllagerWizard.Spell entityillagerwizard_spell) {
@@ -38,7 +38,7 @@ public abstract class EntityIllagerWizard extends EntityIllagerAbstract {
     }
 
     public EntityIllagerWizard.Spell getSpell() {
-        return !this.world.isClientSide ? this.bx : EntityIllagerWizard.Spell.a(((Byte) this.datawatcher.get(EntityIllagerWizard.c)).byteValue());
+        return this.bx; // NeonPaper - Remove isClientSide check
     }
 
     protected void M() {
@@ -51,7 +51,7 @@ public abstract class EntityIllagerWizard extends EntityIllagerAbstract {
 
     public void B_() {
         super.B_();
-        if (this.world.isClientSide && this.dn()) {
+        if (false && this.dn()) { // NeonPaper - Remove isClientSide check
             EntityIllagerWizard.Spell entityillagerwizard_spell = this.getSpell();
             double d0 = entityillagerwizard_spell.h[0];
             double d1 = entityillagerwizard_spell.h[1];
@@ -76,6 +76,7 @@ public abstract class EntityIllagerWizard extends EntityIllagerAbstract {
 
         NONE(0, 0.0D, 0.0D, 0.0D), SUMMON_VEX(1, 0.7D, 0.7D, 0.8D), FANGS(2, 0.4D, 0.3D, 0.35D), WOLOLO(3, 0.7D, 0.5D, 0.2D), DISAPPEAR(4, 0.3D, 0.3D, 0.8D), BLINDNESS(5, 0.1D, 0.1D, 0.2D);
 
+        public static final EntityIllagerWizard.Spell[] VALUES = values(); // NeonPaper - Single values array
         private final int g;
         private final double[] h;
 
@@ -85,7 +86,7 @@ public abstract class EntityIllagerWizard extends EntityIllagerAbstract {
         }
 
         public static EntityIllagerWizard.Spell a(int i) {
-            EntityIllagerWizard.Spell[] aentityillagerwizard_spell = values();
+            EntityIllagerWizard.Spell[] aentityillagerwizard_spell = VALUES; // NeonPaper - Single values array
             int j = aentityillagerwizard_spell.length;
 
             for (int k = 0; k < j; ++k) {
diff --git a/src/main/java/net/minecraft/server/EntityInsentient.java b/src/main/java/net/minecraft/server/EntityInsentient.java
index d6a1933ad723c5e73142d96f1080063e25407759..d2bbcbee581a717152ef119d7fc2f117414fe85d 100644
--- a/src/main/java/net/minecraft/server/EntityInsentient.java
+++ b/src/main/java/net/minecraft/server/EntityInsentient.java
@@ -55,8 +55,11 @@ public abstract class EntityInsentient extends EntityLiving {
         this.by = NonNullList.a(4, ItemStack.a);
         this.dropChanceArmor = new float[4];
         this.bB = Maps.newEnumMap(PathType.class);
-        this.goalSelector = new PathfinderGoalSelector(world != null && world.methodProfiler != null ? world.methodProfiler : null);
-        this.targetSelector = new PathfinderGoalSelector(world != null && world.methodProfiler != null ? world.methodProfiler : null);
+        // NeonPaper start - Optimize
+        MethodProfiler profiler = world != null && world.methodProfiler != null ? world.methodProfiler : null;
+        this.goalSelector = new PathfinderGoalSelector(profiler);
+        this.targetSelector = new PathfinderGoalSelector(profiler);
+        // NeonPaper end
         this.lookController = new ControllerLook(this);
         this.moveController = new ControllerMove(this);
         this.g = new ControllerJump(this);
@@ -65,7 +68,7 @@ public abstract class EntityInsentient extends EntityLiving {
         this.bw = new EntitySenses(this);
         Arrays.fill(this.dropChanceArmor, 0.085F);
         Arrays.fill(this.dropChanceHand, 0.085F);
-        if (world != null && !world.isClientSide) {
+        if (world != null) { // NeonPaper - Remove isClientSide check
             this.r();
         }
 
@@ -228,7 +231,7 @@ public abstract class EntityInsentient extends EntityLiving {
     }
 
     public void doSpawnEffect() {
-        if (this.world.isClientSide) {
+        if (false) { // NeonPaper - Remove isClientSide check
             for (int i = 0; i < 20; ++i) {
                 double d0 = this.random.nextGaussian() * 0.02D;
                 double d1 = this.random.nextGaussian() * 0.02D;
@@ -245,7 +248,7 @@ public abstract class EntityInsentient extends EntityLiving {
 
     public void B_() {
         super.B_();
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             this.cZ();
             if (this.ticksLived % 5 == 0) {
                 boolean flag = !(this.bE() instanceof EntityInsentient);
@@ -507,7 +510,7 @@ public abstract class EntityInsentient extends EntityLiving {
     public void n() {
         super.n();
         this.world.methodProfiler.a("looting");
-        if (!this.world.isClientSide && this.cX() && !this.aU && this.world.getGameRules().getBoolean("mobGriefing")) {
+        if (this.cX() && !this.aU && this.world.getGameRules().getBoolean("mobGriefing")) { // NeonPaper - Remove isClientSide check
             List list = this.world.a(EntityItem.class, this.getBoundingBox().grow(1.0D, 0.0D, 1.0D));
             Iterator iterator = list.iterator();
 
@@ -810,7 +813,7 @@ public abstract class EntityInsentient extends EntityLiving {
     }
 
     protected void dropEquipment(boolean flag, int i) {
-        EnumItemSlot[] aenumitemslot = EnumItemSlot.values();
+        EnumItemSlot[] aenumitemslot = EnumItemSlot.VALUES; // NeonPaper - Single values array
         int j = aenumitemslot.length;
 
         for (int k = 0; k < j; ++k) {
@@ -862,7 +865,7 @@ public abstract class EntityInsentient extends EntityLiving {
             }
 
             boolean flag = true;
-            EnumItemSlot[] aenumitemslot = EnumItemSlot.values();
+            EnumItemSlot[] aenumitemslot = EnumItemSlot.VALUES; // NeonPaper - Single values array
             int j = aenumitemslot.length;
 
             for (int k = 0; k < j; ++k) {
@@ -960,7 +963,7 @@ public abstract class EntityInsentient extends EntityLiving {
             this.setSlot(EnumItemSlot.MAINHAND, EnchantmentManager.a(this.random, this.getItemInMainHand(), (int) (5.0F + f * (float) this.random.nextInt(18)), false));
         }
 
-        EnumItemSlot[] aenumitemslot = EnumItemSlot.values();
+        EnumItemSlot[] aenumitemslot = EnumItemSlot.VALUES; // NeonPaper - Single values array
         int i = aenumitemslot.length;
 
         for (int j = 0; j < i; ++j) {
@@ -1076,13 +1079,13 @@ public abstract class EntityInsentient extends EntityLiving {
         if (this.bE) {
             this.bE = false;
             this.leashHolder = null;
-            if (!this.world.isClientSide && flag1) {
+            if (flag1) { // NeonPaper - Remove isClientSide check
                 this.forceDrops = true; // CraftBukkit
                 this.a(Items.LEAD, 1);
                 this.forceDrops = false; // CraftBukkit
             }
 
-            if (!this.world.isClientSide && flag && this.world instanceof WorldServer) {
+            if (flag && this.world instanceof WorldServer) { // NeonPaper - Remove isClientSide check
                 ((WorldServer) this.world).getTracker().a((Entity) this, (Packet) (new PacketPlayOutAttachEntity(this, (Entity) null)));
             }
         }
@@ -1104,7 +1107,7 @@ public abstract class EntityInsentient extends EntityLiving {
     public void setLeashHolder(Entity entity, boolean flag) {
         this.bE = true;
         this.leashHolder = entity;
-        if (!this.world.isClientSide && flag && this.world instanceof WorldServer) {
+        if (flag && this.world instanceof WorldServer) { // NeonPaper - Remove isClientSide check
             ((WorldServer) this.world).getTracker().a((Entity) this, (Packet) (new PacketPlayOutAttachEntity(this, this.leashHolder)));
         }
 
@@ -1197,7 +1200,7 @@ public abstract class EntityInsentient extends EntityLiving {
     }
 
     public boolean cC() {
-        return super.cC() && !this.isNoAI();
+        return /*super.cC() &&*/ !this.isNoAI(); // NeonPaper - Remove isClientSide check
     }
 
     public void setNoAI(boolean flag) {
diff --git a/src/main/java/net/minecraft/server/EntityIronGolem.java b/src/main/java/net/minecraft/server/EntityIronGolem.java
index 072d20bf4c173a2cc6051c65fe2111e736792772..3a27fd9273c4a22be83de7d9bb188d2aeb58ab32 100644
--- a/src/main/java/net/minecraft/server/EntityIronGolem.java
+++ b/src/main/java/net/minecraft/server/EntityIronGolem.java
@@ -89,6 +89,7 @@ public class EntityIronGolem extends EntityGolem {
             --this.by;
         }
 
+        /* // NeonPaper start - Clientside particles
         if (this.motX * this.motX + this.motZ * this.motZ > 2.500000277905201E-7D && this.random.nextInt(5) == 0) {
             int i = MathHelper.floor(this.locX);
             int j = MathHelper.floor(this.locY - 0.20000000298023224D);
@@ -99,6 +100,7 @@ public class EntityIronGolem extends EntityGolem {
                 this.world.addParticle(EnumParticle.BLOCK_CRACK, this.locX + ((double) this.random.nextFloat() - 0.5D) * (double) this.width, this.getBoundingBox().b + 0.1D, this.locZ + ((double) this.random.nextFloat() - 0.5D) * (double) this.width, 4.0D * ((double) this.random.nextFloat() - 0.5D), 0.5D, ((double) this.random.nextFloat() - 0.5D) * 4.0D, new int[] { Block.getCombinedId(iblockdata)});
             }
         }
+        */ // NeonPaper end
 
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityItem.java b/src/main/java/net/minecraft/server/EntityItem.java
index 4fafb4977a40176d88e790924afba8fa9e17867b..6dbb8152acad8060315ebc22d212649f152cd869 100644
--- a/src/main/java/net/minecraft/server/EntityItem.java
+++ b/src/main/java/net/minecraft/server/EntityItem.java
@@ -33,7 +33,7 @@ public class EntityItem extends Entity implements HopperPusher {
     public EntityItem(World world, double d0, double d1, double d2) {
         super(world);
         this.f = 5;
-        this.a = (float) (Math.random() * 3.141592653589793D * 2.0D);
+        // this.a = (float) (Math.random() * 3.141592653589793D * 2.0D); // NeonPaper - Unused
         this.setSize(0.25F, 0.25F);
         this.setPosition(d0, d1, d2);
         this.yaw = (float) (Math.random() * 360.0D);
@@ -54,7 +54,7 @@ public class EntityItem extends Entity implements HopperPusher {
     public EntityItem(World world) {
         super(world);
         this.f = 5;
-        this.a = (float) (Math.random() * 3.141592653589793D * 2.0D);
+        // this.a = (float) (Math.random() * 3.141592653589793D * 2.0D); // NeonPaper - Unused
         this.setSize(0.25F, 0.25F);
         this.setItemStack(ItemStack.a);
     }
@@ -88,7 +88,7 @@ public class EntityItem extends Entity implements HopperPusher {
                 this.motY -= 0.03999999910593033D;
             }
 
-            if (this.world.isClientSide) {
+            if (false) { // NeonPaper - Remove isClientSide check
                 this.noclip = false;
             } else {
                 this.noclip = this.i(this.locX, (this.getBoundingBox().b + this.getBoundingBox().e) / 2.0D, this.locZ);
@@ -105,7 +105,7 @@ public class EntityItem extends Entity implements HopperPusher {
                     this.a(SoundEffects.bR, 0.4F, 2.0F + this.random.nextFloat() * 0.4F);
                 }
 
-                if (!this.world.isClientSide) {
+                if (true) { // NeonPaper - Remove isClientSide check
                     this.x();
                 }
             }
@@ -130,7 +130,7 @@ public class EntityItem extends Entity implements HopperPusher {
             // Craftbukkit end */
 
             this.aq();
-            if (!this.world.isClientSide) {
+            if (true) { // NeonPaper - Remove isClientSide check
                 double d3 = this.motX - d0;
                 double d4 = this.motY - d1;
                 double d5 = this.motZ - d2;
@@ -141,7 +141,7 @@ public class EntityItem extends Entity implements HopperPusher {
                 }
             }
 
-            if (!this.world.isClientSide && this.age >= world.spigotConfig.itemDespawnRate) { // Spigot
+            if (this.age >= world.spigotConfig.itemDespawnRate) { // Spigot // NeonPaper - Remove isClientSide check
                 // CraftBukkit start - fire ItemDespawnEvent
                 if (org.bukkit.craftbukkit.event.CraftEventFactory.callItemDespawnEvent(this).isCancelled()) {
                     this.age = 0;
@@ -166,7 +166,7 @@ public class EntityItem extends Entity implements HopperPusher {
         this.lastTick = MinecraftServer.currentTick;
         // CraftBukkit end
 
-        if (!this.world.isClientSide && this.age >= world.spigotConfig.itemDespawnRate) { // Spigot
+        if (this.age >= world.spigotConfig.itemDespawnRate) { // Spigot // NeonPaper - Remove isClientSide check
             // CraftBukkit start - fire ItemDespawnEvent
             if (org.bukkit.craftbukkit.event.CraftEventFactory.callItemDespawnEvent(this).isCancelled()) {
                 this.age = 0;
@@ -332,7 +332,7 @@ public class EntityItem extends Entity implements HopperPusher {
     }
 
     public void d(EntityHuman entityhuman) {
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             ItemStack itemstack = this.getItemStack();
             Item item = itemstack.getItem();
             int i = itemstack.getCount();
@@ -418,7 +418,7 @@ public class EntityItem extends Entity implements HopperPusher {
     public Entity b(int i) {
         Entity entity = super.b(i);
 
-        if (!this.world.isClientSide && entity instanceof EntityItem) {
+        if (entity instanceof EntityItem) { // NeonPaper - Remove isClientSide check
             ((EntityItem) entity).x();
         }
 
diff --git a/src/main/java/net/minecraft/server/EntityItemFrame.java b/src/main/java/net/minecraft/server/EntityItemFrame.java
index f0d6d6b850ae430e71dff9fd01216287e72e92f4..d075706a3d7db9b05d3515a60e31fec8d7688af1 100644
--- a/src/main/java/net/minecraft/server/EntityItemFrame.java
+++ b/src/main/java/net/minecraft/server/EntityItemFrame.java
@@ -34,7 +34,7 @@ public class EntityItemFrame extends EntityHanging {
         if (this.isInvulnerable(damagesource)) {
             return false;
         } else if (!damagesource.isExplosion() && !this.getItem().isEmpty()) {
-            if (!this.world.isClientSide) {
+            if (true) { // NeonPaper - Remove isClientSide check
                 // CraftBukkit start - fire EntityDamageEvent
                 if (org.bukkit.craftbukkit.event.CraftEventFactory.handleNonLivingEntityDamageEvent(this, damagesource, f, false) || this.dead) {
                     return true;
@@ -195,7 +195,7 @@ public class EntityItemFrame extends EntityHanging {
     public boolean b(EntityHuman entityhuman, EnumHand enumhand) {
         ItemStack itemstack = entityhuman.b(enumhand);
 
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             if (this.getItem().isEmpty()) {
                 if (!itemstack.isEmpty()) {
                     this.setItem(itemstack);
diff --git a/src/main/java/net/minecraft/server/EntityLargeFireball.java b/src/main/java/net/minecraft/server/EntityLargeFireball.java
index b9221689c3deb7c1f0afaebc250b864990a7a8a6..2f8e4184e5a69207f516c2c53787b39836b6e9c7 100644
--- a/src/main/java/net/minecraft/server/EntityLargeFireball.java
+++ b/src/main/java/net/minecraft/server/EntityLargeFireball.java
@@ -17,13 +17,13 @@ public class EntityLargeFireball extends EntityFireball {
     }
 
     protected void a(MovingObjectPosition movingobjectposition) {
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             if (movingobjectposition.entity != null) {
                 movingobjectposition.entity.damageEntity(DamageSource.fireball(this, this.shooter), 6.0F);
                 this.a(this.shooter, movingobjectposition.entity);
             }
 
-            boolean flag = this.world.getGameRules().getBoolean("mobGriefing");
+            // boolean flag = this.world.getGameRules().getBoolean("mobGriefing"); // NeonPaper - Unused
 
             // CraftBukkit start - fire ExplosionPrimeEvent
             ExplosionPrimeEvent event = new ExplosionPrimeEvent((org.bukkit.entity.Explosive) org.bukkit.craftbukkit.entity.CraftEntity.getEntity(this.world.getServer(), this));
diff --git a/src/main/java/net/minecraft/server/EntityLeash.java b/src/main/java/net/minecraft/server/EntityLeash.java
index cdd633f72217e830224ee4f5cf13b465f03b0cf2..41ce95f98e78afb64ddc684878a605760ddd6196 100644
--- a/src/main/java/net/minecraft/server/EntityLeash.java
+++ b/src/main/java/net/minecraft/server/EntityLeash.java
@@ -61,7 +61,7 @@ public class EntityLeash extends EntityHanging {
     public void a(NBTTagCompound nbttagcompound) {}
 
     public boolean b(EntityHuman entityhuman, EnumHand enumhand) {
-        if (this.world.isClientSide) {
+        if (false) { // NeonPaper - Remove isClientSide check
             return true;
         } else {
             boolean flag = false;
diff --git a/src/main/java/net/minecraft/server/EntityLightning.java b/src/main/java/net/minecraft/server/EntityLightning.java
index acb3408d574ee33f82372ff0b4fbd49fc9defb29..28fbbfd6a57345c01b3ca0db8d7ee39d6997cb23 100644
--- a/src/main/java/net/minecraft/server/EntityLightning.java
+++ b/src/main/java/net/minecraft/server/EntityLightning.java
@@ -23,7 +23,7 @@ public class EntityLightning extends EntityWeather {
         this.d = flag;
         BlockPosition blockposition = new BlockPosition(this);
 
-        if (!flag && !world.isClientSide && world.getGameRules().getBoolean("doFireTick") && (world.getDifficulty() == EnumDifficulty.NORMAL || world.getDifficulty() == EnumDifficulty.HARD) && world.areChunksLoaded(blockposition, 10)) {
+        if (!flag && world.getGameRules().getBoolean("doFireTick") && (world.getDifficulty() == EnumDifficulty.NORMAL || world.getDifficulty() == EnumDifficulty.HARD) && world.areChunksLoaded(blockposition, 10)) { // NeonPaper - Remove isClientSide check
             if (world.getType(blockposition).getMaterial() == Material.AIR && Blocks.FIRE.canPlace(world, blockposition)) {
                 // CraftBukkit start
                 if (!CraftEventFactory.callBlockIgniteEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this).isCancelled()) {
@@ -90,7 +90,7 @@ public class EntityLightning extends EntityWeather {
             } else if (this.lifeTicks < -this.random.nextInt(10)) {
                 --this.c;
                 this.lifeTicks = 1;
-                if (!this.d && !this.world.isClientSide) {
+                if (!this.d) { // NeonPaper - Remove isClientSide check
                     this.a = this.random.nextLong();
                     BlockPosition blockposition = new BlockPosition(this);
 
@@ -106,7 +106,7 @@ public class EntityLightning extends EntityWeather {
         }
 
         if (this.lifeTicks >= 0 && !this.isEffect) { // CraftBukkit - add !this.isEffect
-            if (this.world.isClientSide) {
+            if (false) { // NeonPaper - Remove isClientSide check
                 this.world.d(2);
             } else if (!this.d) {
                 double d0 = 3.0D;
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index 82c3a84edd7a9408f99873ef8ea1693674786791..858d0cf1715e6db84ac96c76c97b59bd82ed9341 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -66,8 +66,10 @@ public abstract class EntityLiving extends Entity {
     public int maxNoDamageTicks;
     public float aJ;
     public float aK;
+    /* // NeonPaper start - Optimize unused
     public float aL;
     public float aM;
+    */ // NeonPaper end
     public float aN;
     public float aO;
     public float aP;
@@ -148,9 +150,9 @@ public abstract class EntityLiving extends Entity {
         // CraftBukkit - setHealth(getMaxHealth()) inlined and simplified to skip the instanceof check for EntityPlayer, as getBukkitEntity() is not initialized in constructor
         this.datawatcher.set(EntityLiving.HEALTH, (float) this.getAttributeInstance(GenericAttributes.maxHealth).getValue());
         this.i = true;
-        this.aM = (float) ((Math.random() + 1.0D) * 0.009999999776482582D);
+        // this.aM = (float) ((Math.random() + 1.0D) * 0.009999999776482582D); // NeonPaper - Optimize unused
         this.setPosition(this.locX, this.locY, this.locZ);
-        this.aL = (float) Math.random() * 12398.0F;
+        // this.aL = (float) Math.random() * 12398.0F; // NeonPaper - Optimize unused
         this.yaw = (float) (Math.random() * 6.2831854820251465D);
         this.aP = this.yaw;
         this.P = 0.6F;
@@ -177,7 +179,7 @@ public abstract class EntityLiving extends Entity {
             this.aq();
         }
 
-        if (!this.world.isClientSide && this.fallDistance > 3.0F && flag) {
+        if (this.fallDistance > 3.0F && flag) { // NeonPaper - Remove isClientSide check
             float f = (float) MathHelper.f(this.fallDistance - 3.0F);
 
             if (iblockdata.getMaterial() != Material.AIR) {
@@ -224,7 +226,7 @@ public abstract class EntityLiving extends Entity {
             }
         }
 
-        if (this.isFireProof() || this.world.isClientSide) {
+        if (this.isFireProof()) { // NeonPaper - Remove isClientSide check
             this.extinguish();
         }
 
@@ -237,6 +239,7 @@ public abstract class EntityLiving extends Entity {
                     if (this.getAirTicks() == -20) {
                         this.setAirTicks(0);
 
+                        /* // NeonPaper start - Clientside particles
                         for (int i = 0; i < 8; ++i) {
                             float f = this.random.nextFloat() - this.random.nextFloat();
                             float f1 = this.random.nextFloat() - this.random.nextFloat();
@@ -244,12 +247,13 @@ public abstract class EntityLiving extends Entity {
 
                             this.world.addParticle(EnumParticle.WATER_BUBBLE, this.locX + (double) f, this.locY + (double) f1, this.locZ + (double) f2, this.motX, this.motY, this.motZ, new int[0]);
                         }
+                        */ // NeonPaper end
 
                         this.damageEntity(DamageSource.DROWN, 2.0F);
                     }
                 }
 
-                if (!this.world.isClientSide && this.isPassenger() && this.bJ() instanceof EntityLiving) {
+                if (this.isPassenger() && this.bJ() instanceof EntityLiving) { // NeonPaper - Remove isClientSide check
                     this.stopRiding();
                 }
             } else {
@@ -260,7 +264,7 @@ public abstract class EntityLiving extends Entity {
                 // CraftBukkit end
             }
 
-            if (!this.world.isClientSide) {
+            if (true) { // NeonPaper - Remove isClientSide check
                 BlockPosition blockposition = new BlockPosition(this);
 
                 if (!Objects.equal(this.bF, blockposition)) {
@@ -318,7 +322,7 @@ public abstract class EntityLiving extends Entity {
     public int getExpReward() {
         int exp = this.getExpValue(this.killer);
 
-        if (!this.world.isClientSide && (this.lastDamageByPlayerTime > 0 || this.alwaysGivesExp()) && this.isDropExperience() && this.world.getGameRules().getBoolean("doMobLoot")) {
+        if ((this.lastDamageByPlayerTime > 0 || this.alwaysGivesExp()) && this.isDropExperience() && this.world.getGameRules().getBoolean("doMobLoot")) { // NeonPaper - Remove isClientSide check
             return exp;
         } else {
             return 0;
@@ -358,6 +362,7 @@ public abstract class EntityLiving extends Entity {
 
             this.die();
 
+            /* // NeonPaper start - Clientside particles
             for (i = 0; i < 20; ++i) {
                 double d0 = this.random.nextGaussian() * 0.02D;
                 double d1 = this.random.nextGaussian() * 0.02D;
@@ -365,6 +370,7 @@ public abstract class EntityLiving extends Entity {
 
                 this.world.addParticle(EnumParticle.EXPLOSION_NORMAL, this.locX + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, this.locY + (double) (this.random.nextFloat() * this.length), this.locZ + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, d0, d1, d2, new int[0]);
             }
+            */ // NeonPaper end
         }
 
     }
@@ -448,7 +454,7 @@ public abstract class EntityLiving extends Entity {
         nbttagcompound.setInt("HurtByTimestamp", this.hurtTimestamp);
         nbttagcompound.setShort("DeathTime", (short) this.deathTicks);
         nbttagcompound.setFloat("AbsorptionAmount", this.getAbsorptionHearts());
-        EnumItemSlot[] aenumitemslot = EnumItemSlot.values();
+        EnumItemSlot[] aenumitemslot = EnumItemSlot.VALUES; // NeonPaper - Single values array
         int i = aenumitemslot.length;
 
         int j;
@@ -464,7 +470,7 @@ public abstract class EntityLiving extends Entity {
         }
 
         nbttagcompound.set("Attributes", GenericAttributes.a(this.getAttributeMap()));
-        aenumitemslot = EnumItemSlot.values();
+        aenumitemslot = EnumItemSlot.VALUES; // NeonPaper - Single values array
         i = aenumitemslot.length;
 
         for (j = 0; j < i; ++j) {
@@ -499,7 +505,7 @@ public abstract class EntityLiving extends Entity {
         }
         this.setAbsorptionHearts(absorptionAmount);
         // Paper end
-        if (nbttagcompound.hasKeyOfType("Attributes", 9) && this.world != null && !this.world.isClientSide) {
+        if (nbttagcompound.hasKeyOfType("Attributes", 9) && this.world != null) { // NeonPaper - Remove isClientSide check
             GenericAttributes.a(this.getAttributeMap(), nbttagcompound.getList("Attributes", 10));
         }
 
@@ -564,7 +570,7 @@ public abstract class EntityLiving extends Entity {
                 MobEffect mobeffect = (MobEffect) this.effects.get(mobeffectlist);
 
                 if (!mobeffect.tick(this)) {
-                    if (!this.world.isClientSide) {
+                    if (true) { // NeonPaper - Remove isClientSide check
                         iterator.remove();
                         this.b(mobeffect);
                     }
@@ -588,13 +594,14 @@ public abstract class EntityLiving extends Entity {
         // CraftBukkit end
 
         if (this.updateEffects) {
-            if (!this.world.isClientSide) {
+            if (true) { // NeonPaper - Remove isClientSide check
                 this.G();
             }
 
             this.updateEffects = false;
         }
 
+        /* // NeonPaper start - Clientside particles
         int i = ((Integer) this.datawatcher.get(EntityLiving.g)).intValue();
         boolean flag = ((Boolean) this.datawatcher.get(EntityLiving.h)).booleanValue();
 
@@ -611,7 +618,7 @@ public abstract class EntityLiving extends Entity {
                 flag1 &= this.random.nextInt(5) == 0;
             }
 
-            if (flag1 && i > 0) {
+            if (flag1) { // NeonPaper - Optimize
                 double d0 = (double) (i >> 16 & 255) / 255.0D;
                 double d1 = (double) (i >> 8 & 255) / 255.0D;
                 double d2 = (double) (i >> 0 & 255) / 255.0D;
@@ -619,6 +626,7 @@ public abstract class EntityLiving extends Entity {
                 this.world.addParticle(flag ? EnumParticle.SPELL_MOB_AMBIENT : EnumParticle.SPELL_MOB, this.locX + (this.random.nextDouble() - 0.5D) * (double) this.width, this.locY + this.random.nextDouble() * (double) this.length, this.locZ + (this.random.nextDouble() - 0.5D) * (double) this.width, d0, d1, d2, new int[0]);
             }
         }
+        */ // NeonPaper end
 
     }
 
@@ -658,7 +666,7 @@ public abstract class EntityLiving extends Entity {
     }
 
     public void removeAllEffects() {
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             Iterator iterator = this.effects.values().iterator();
 
             while (iterator.hasNext()) {
@@ -746,7 +754,7 @@ public abstract class EntityLiving extends Entity {
 
     protected void a(MobEffect mobeffect) {
         this.updateEffects = true;
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             mobeffect.getMobEffect().b(this, this.getAttributeMap(), mobeffect.getAmplifier());
         }
 
@@ -754,7 +762,7 @@ public abstract class EntityLiving extends Entity {
 
     protected void a(MobEffect mobeffect, boolean flag) {
         this.updateEffects = true;
-        if (flag && !this.world.isClientSide) {
+        if (flag) { // NeonPaper - Remove isClientSide check
             MobEffectList mobeffectlist = mobeffect.getMobEffect();
 
             mobeffectlist.a(this, this.getAttributeMap(), mobeffect.getAmplifier());
@@ -765,7 +773,7 @@ public abstract class EntityLiving extends Entity {
 
     protected void b(MobEffect mobeffect) {
         this.updateEffects = true;
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             mobeffect.getMobEffect().a(this, this.getAttributeMap(), mobeffect.getAmplifier());
         }
 
@@ -833,7 +841,7 @@ public abstract class EntityLiving extends Entity {
     public boolean damageEntity(DamageSource damagesource, float f) {
         if (this.isInvulnerable(damagesource)) {
             return false;
-        } else if (this.world.isClientSide) {
+        } else if (false) { // NeonPaper - Remove isClientSide check
             return false;
         } else {
             this.ticksFarFromPlayer = 0;
@@ -995,11 +1003,11 @@ public abstract class EntityLiving extends Entity {
                 }
 
                 if (this instanceof EntityPlayer) {
-                    CriterionTriggers.h.a((EntityPlayer) this, damagesource, f1, f, flag);
+                    CriterionTriggers.h.a((EntityPlayer) this, damagesource, f, f, flag); // NeonPaper - Inline
                 }
 
                 if (entity1 instanceof EntityPlayer) {
-                    CriterionTriggers.g.a((EntityPlayer) entity1, this, damagesource, f1, f, flag);
+                    CriterionTriggers.g.a((EntityPlayer) entity1, this, damagesource, f, f, flag); // NeonPaper - Inline
                 }
 
                 return flag2;
@@ -1016,7 +1024,7 @@ public abstract class EntityLiving extends Entity {
             return false;
         } else {
             ItemStack itemstack = null;
-            EnumHand[] aenumhand = EnumHand.values();
+            EnumHand[] aenumhand = EnumHand.VALUES; // NeonPaper - Single values array
             int i = aenumhand.length;
 
             // CraftBukkit start
@@ -1098,6 +1106,7 @@ public abstract class EntityLiving extends Entity {
     public void b(ItemStack itemstack) {
         this.a(SoundEffects.dw, 0.8F, 0.8F + this.world.random.nextFloat() * 0.4F);
 
+        /* // NeonPaper start - Clientside particles
         for (int i = 0; i < 5; ++i) {
             Vec3D vec3d = new Vec3D(((double) this.random.nextFloat() - 0.5D) * 0.1D, Math.random() * 0.1D + 0.1D, 0.0D);
 
@@ -1111,6 +1120,7 @@ public abstract class EntityLiving extends Entity {
             vec3d1 = vec3d1.add(this.locX, this.locY + (double) this.getHeadHeight(), this.locZ);
             this.world.addParticle(EnumParticle.ITEM_CRACK, vec3d1.x, vec3d1.y, vec3d1.z, vec3d.x, vec3d.y + 0.05D, vec3d.z, new int[] { Item.getId(itemstack.getItem())});
         }
+        */ // NeonPaper end
 
     }
 
@@ -1133,7 +1143,7 @@ public abstract class EntityLiving extends Entity {
 
             org.bukkit.event.entity.EntityDeathEvent deathEvent = null;
             //Paper end
-            if (!this.world.isClientSide) {
+            if (true) { // NeonPaper - Remove isClientSide check
                 int i = 0;
 
                 if (entity instanceof EntityHuman) {
@@ -1154,7 +1164,7 @@ public abstract class EntityLiving extends Entity {
             }
 
             // Paper start - cancellable death event
-            if (deathEvent == null || !deathEvent.isCancelled()) {
+            if (/*deathEvent == null*/false || !deathEvent.isCancelled()) { // NeonPaper - Optimize
                 // triggers and stats got moved down
                 if (this.getKillCount() >= 0 && entityliving != null) {
                     entityliving.runKillTrigger(this, this.getKillCount(), damagesource);
@@ -1565,6 +1575,8 @@ public abstract class EntityLiving extends Entity {
     }
 
     public ItemStack b(EnumHand enumhand) {
+        // NeonPaper start - Optimize
+        /*
         if (enumhand == EnumHand.MAIN_HAND) {
             return this.getEquipment(EnumItemSlot.MAINHAND);
         } else if (enumhand == EnumHand.OFF_HAND) {
@@ -1572,6 +1584,16 @@ public abstract class EntityLiving extends Entity {
         } else {
             throw new IllegalArgumentException("Invalid hand " + enumhand);
         }
+        */
+        switch (enumhand) {
+            case MAIN_HAND:
+                return this.getEquipment(EnumItemSlot.MAINHAND);
+            case OFF_HAND:
+                return this.getEquipment(EnumItemSlot.OFFHAND);
+            default:
+                throw new IllegalArgumentException("Invalid hand " + enumhand);
+        }
+        // NeonPaper end
     }
 
     public void a(EnumHand enumhand, ItemStack itemstack) {
@@ -1647,7 +1669,7 @@ public abstract class EntityLiving extends Entity {
                 int i = aint.length;
 
                 for (int j = 0; j < i; ++j) {
-                    int[] aint2 = aint1[j];
+                    int[] aint2 = aint[j]; // NeonPaper - Inline
                     double d7 = (double) (enumdirection.getAdjacentX() * aint2[0] + enumdirection1.getAdjacentX() * aint2[1]);
                     double d8 = (double) (enumdirection.getAdjacentZ() * aint2[0] + enumdirection1.getAdjacentZ() * aint2[1]);
                     double d9 = d3 + d7;
@@ -1830,7 +1852,7 @@ public abstract class EntityLiving extends Entity {
                 this.motY *= 0.9800000190734863D;
                 this.motZ *= 0.9900000095367432D;
                 this.move(EnumMoveType.SELF, this.motX, this.motY, this.motZ);
-                if (this.positionChanged && !this.world.isClientSide) {
+                if (this.positionChanged) { // NeonPaper - Remove isClientSide check
                     d4 = Math.sqrt(this.motX * this.motX + this.motZ * this.motZ);
                     double d5 = d1 - d4;
                     float f8 = (float) (d5 * 10.0D - 3.0D);
@@ -1842,7 +1864,7 @@ public abstract class EntityLiving extends Entity {
                 }
                 } // Paper end - Elyta Wall Damage if statement
 
-                if (this.onGround && !this.world.isClientSide) {
+                if (this.onGround) { // NeonPaper - Remove isClientSide check
                     if (getFlag(7) && !CraftEventFactory.callToggleGlideEvent(this, false).isCancelled()) // CraftBukkit
                     this.setFlag(7, false);
                 }
@@ -1892,7 +1914,7 @@ public abstract class EntityLiving extends Entity {
                     this.motY += (0.05D * (double) (this.getEffect(MobEffects.LEVITATION).getAmplifier() + 1) - this.motY) * 0.2D;
                 } else {
                     blockposition_pooledblockposition.e(this.locX, 0.0D, this.locZ);
-                    if (this.world.isClientSide && (!this.world.isLoaded(blockposition_pooledblockposition) || !this.world.getChunkAtWorldCoords(blockposition_pooledblockposition).p())) {
+                    if (false && (!this.world.isLoaded(blockposition_pooledblockposition) || !this.world.getChunkAtWorldCoords(blockposition_pooledblockposition).p())) { // NeonPaper - Remove isClientSide check
                         if (this.locY > 0.0D) {
                             this.motY = -0.1D;
                         } else {
@@ -1944,7 +1966,7 @@ public abstract class EntityLiving extends Entity {
     public void B_() {
         super.B_();
         this.cI();
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             int i = this.getArrowCount();
 
             if (i > 0) {
@@ -1958,7 +1980,7 @@ public abstract class EntityLiving extends Entity {
                 }
             }
 
-            EnumItemSlot[] aenumitemslot = EnumItemSlot.values();
+            EnumItemSlot[] aenumitemslot = EnumItemSlot.VALUES; // NeonPaper - Single values array
             int j = aenumitemslot.length;
 
             for (int k = 0; k < j; ++k) {
@@ -2208,7 +2230,7 @@ public abstract class EntityLiving extends Entity {
 
             if (itemstack.getItem() == Items.cS && ItemElytra.d(itemstack)) {
                 flag = true;
-                if (!this.world.isClientSide && (this.bq + 1) % 20 == 0) {
+                if ((this.bq + 1) % 20 == 0) { // NeonPaper - Remove isClientSide check
                     itemstack.damage(1, this);
                 }
             } else {
@@ -2218,7 +2240,7 @@ public abstract class EntityLiving extends Entity {
             flag = false;
         }
 
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             if (flag != this.getFlag(7) && !CraftEventFactory.callToggleGlideEvent(this, flag).isCancelled()) // CraftBukkit
             this.setFlag(7, flag);
         }
@@ -2268,7 +2290,7 @@ public abstract class EntityLiving extends Entity {
         Entity entity = this.bJ();
 
         super.stopRiding();
-        if (entity != null && entity != this.bJ() && !this.world.isClientSide) {
+        if (entity != null && entity != this.bJ()) { // NeonPaper - Remove isClientSide check
             this.A(entity);
         }
 
@@ -2286,7 +2308,7 @@ public abstract class EntityLiving extends Entity {
     }
 
     public void receive(Entity entity, int i) {
-        if (!entity.dead && !this.world.isClientSide) {
+        if (!entity.dead) { // NeonPaper - Remove isClientSide check
             EntityTracker entitytracker = ((WorldServer) this.world).getTracker();
 
             if (entity instanceof EntityItem || entity instanceof EntityArrow || entity instanceof EntityExperienceOrb) {
@@ -2312,7 +2334,7 @@ public abstract class EntityLiving extends Entity {
     }
 
     public boolean cC() {
-        return !this.world.isClientSide;
+        return true; // NeonPaper - Remove isClientSide check
     }
 
     public boolean isInteractable() {
@@ -2378,7 +2400,7 @@ public abstract class EntityLiving extends Entity {
                     this.b(this.activeItem, 5);
                 }
 
-                if (--this.bp == 0 && !this.world.isClientSide) {
+                if (--this.bp == 0) { // NeonPaper - Remove isClientSide check
                     this.v();
                 }
             } else {
@@ -2394,7 +2416,7 @@ public abstract class EntityLiving extends Entity {
         if (!itemstack.isEmpty() && !this.isHandRaised()) {
             this.activeItem = itemstack;
             this.bp = itemstack.m();
-            if (!this.world.isClientSide) {
+            if (true) { // NeonPaper - Remove isClientSide check
                 int i = 1;
 
                 if (enumhand == EnumHand.OFF_HAND) {
@@ -2409,7 +2431,7 @@ public abstract class EntityLiving extends Entity {
 
     public void a(DataWatcherObject<?> datawatcherobject) {
         super.a(datawatcherobject);
-        if (EntityLiving.at.equals(datawatcherobject) && this.world.isClientSide) {
+        if (false && EntityLiving.at.equals(datawatcherobject)) { // NeonPaper - Remove isClientSide check
             if (this.isHandRaised() && this.activeItem.isEmpty()) {
                 this.activeItem = this.b(this.cH());
                 if (!this.activeItem.isEmpty()) {
@@ -2430,6 +2452,7 @@ public abstract class EntityLiving extends Entity {
             }
 
             if (itemstack.n() == EnumAnimation.EAT) {
+                /* // NeonPaper start - Clientside particles
                 for (int j = 0; j < i; ++j) {
                     Vec3D vec3d = new Vec3D(((double) this.random.nextFloat() - 0.5D) * 0.1D, Math.random() * 0.1D + 0.1D, 0.0D);
 
@@ -2447,6 +2470,7 @@ public abstract class EntityLiving extends Entity {
                         this.world.addParticle(EnumParticle.ITEM_CRACK, vec3d1.x, vec3d1.y, vec3d1.z, vec3d.x, vec3d.y + 0.05D, vec3d.z, new int[] { Item.getId(itemstack.getItem())});
                     }
                 }
+                */ // NeonPaper end
 
                 this.a(SoundEffects.bU, 0.5F + 0.5F * (float) this.random.nextInt(2), (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
             }
@@ -2520,7 +2544,7 @@ public abstract class EntityLiving extends Entity {
     }
 
     public void cN() {
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             this.datawatcher.set(EntityLiving.at, Byte.valueOf((byte) 0));
         }
 
@@ -2593,6 +2617,7 @@ public abstract class EntityLiving extends Entity {
         } else {
             flag1 = true;
 
+            /* // NeonPaper start - Clientside particles
             for (int i = 0; i < 128; ++i) {
                 double d6 = (double) i / 127.0D;
                 float f = (random.nextFloat() - 0.5F) * 0.2F;
@@ -2604,6 +2629,7 @@ public abstract class EntityLiving extends Entity {
 
                 world.addParticle(EnumParticle.PORTAL, d7, d8, d9, (double) f, (double) f1, (double) f2, new int[0]);
             }
+            */ // NeonPaper end
 
             if (this instanceof EntityCreature) {
                 ((EntityCreature) this).getNavigation().p();
diff --git a/src/main/java/net/minecraft/server/EntityLlama.java b/src/main/java/net/minecraft/server/EntityLlama.java
index af49b727398863ca2ce1b5f7068fd9949834ad17..d2a72f28e3b22cd6af63005f6f85e9c927c7b59f 100644
--- a/src/main/java/net/minecraft/server/EntityLlama.java
+++ b/src/main/java/net/minecraft/server/EntityLlama.java
@@ -139,8 +139,8 @@ public class EntityLlama extends EntityHorseChestedAbstract implements IRangedEn
         }
 
         if (this.isBaby() && b0 > 0) {
-            this.world.addParticle(EnumParticle.VILLAGER_HAPPY, this.locX + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, this.locY + 0.5D + (double) (this.random.nextFloat() * this.length), this.locZ + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, 0.0D, 0.0D, 0.0D, new int[0]);
-            if (!this.world.isClientSide) {
+            // this.world.addParticle(EnumParticle.VILLAGER_HAPPY, this.locX + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, this.locY + 0.5D + (double) (this.random.nextFloat() * this.length), this.locZ + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, 0.0D, 0.0D, 0.0D, new int[0]); // NeonPaper - Clientside particles
+            if (true) { // NeonPaper - Remove isClientSide check
                 this.setAge(b0);
             }
 
@@ -149,7 +149,7 @@ public class EntityLlama extends EntityHorseChestedAbstract implements IRangedEn
 
         if (b1 > 0 && (flag || !this.isTamed()) && this.getTemper() < this.getMaxDomestication()) {
             flag = true;
-            if (!this.world.isClientSide) {
+            if (true) { // NeonPaper - Remove isClientSide check
                 this.n(b1);
             }
         }
@@ -250,7 +250,7 @@ public class EntityLlama extends EntityHorseChestedAbstract implements IRangedEn
     }
 
     protected void dD() {
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             super.dD();
             this.g(this.inventoryChest.getItem(1));
         }
diff --git a/src/main/java/net/minecraft/server/EntityLlamaSpit.java b/src/main/java/net/minecraft/server/EntityLlamaSpit.java
index 11efc789df9a728871f0b72df80ecab8154f2411..639483ee9ffc03bc1a8ad3b5eba7db3be473925f 100644
--- a/src/main/java/net/minecraft/server/EntityLlamaSpit.java
+++ b/src/main/java/net/minecraft/server/EntityLlamaSpit.java
@@ -148,7 +148,7 @@ public class EntityLlamaSpit extends Entity implements IProjectile {
             movingobjectposition.entity.damageEntity(DamageSource.a(this, this.shooter).b(), 1.0F);
         }
 
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             this.die();
         }
 
diff --git a/src/main/java/net/minecraft/server/EntityMinecartAbstract.java b/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
index 1f4025486e09067a232dad6c89272889e97a5ffc..d093057ec195dff861a6d65351d992c0c6e7e8d7 100644
--- a/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
+++ b/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
@@ -25,12 +25,14 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
     private static final DataWatcherObject<Boolean> f = DataWatcher.a(EntityMinecartAbstract.class, DataWatcherRegistry.h);
     private boolean g;
     private static final int[][][] h = new int[][][] { { { 0, 0, -1}, { 0, 0, 1}}, { { -1, 0, 0}, { 1, 0, 0}}, { { -1, -1, 0}, { 1, 0, 0}}, { { -1, 0, 0}, { 1, -1, 0}}, { { 0, 0, -1}, { 0, -1, 1}}, { { 0, -1, -1}, { 0, 0, 1}}, { { 0, 0, 1}, { 1, 0, 0}}, { { 0, 0, 1}, { -1, 0, 0}}, { { 0, 0, -1}, { -1, 0, 0}}, { { 0, 0, -1}, { 1, 0, 0}}};
+    /* // NeonPaper start - Clientside code
     private int at;
     private double au;
     private double av;
     private double aw;
     private double ax;
     private double ay;
+    */ // NeonPaper end
 
     // CraftBukkit start
     public boolean slowWhenEmpty = true;
@@ -117,7 +119,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
     }
 
     public boolean damageEntity(DamageSource damagesource, float f) {
-        if (!this.world.isClientSide && !this.dead) {
+        if (!this.dead) { // NeonPaper - Remove isClientSide check
             if (this.isInvulnerable(damagesource)) {
                 return false;
             } else {
@@ -259,7 +261,8 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
         }
         */
 
-        if (this.world.isClientSide) {
+        if (false) { // NeonPaper - Remove isClientSide check
+            /* // NeonPaper start - Clientside code
             if (this.at > 0) {
                 double d0 = this.locX + (this.au - this.locX) / (double) this.at;
                 double d1 = this.locY + (this.av - this.locY) / (double) this.at;
@@ -275,6 +278,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
                 this.setPosition(this.locX, this.locY, this.locZ);
                 this.setYawPitch(this.yaw, this.pitch);
             }
+            */ // NeonPaper end
 
         } else {
             this.lastX = this.locX;
@@ -706,7 +710,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
             IBlockData iblockdata = this.getDisplayBlock();
             MinecraftKey minecraftkey = (MinecraftKey) Block.REGISTRY.b(iblockdata.getBlock());
 
-            nbttagcompound.setString("DisplayTile", minecraftkey == null ? "" : minecraftkey.toString());
+            nbttagcompound.setString("DisplayTile", /*minecraftkey == null*/false ? "" : minecraftkey.toString()); // NeonPaper - Optimize
             nbttagcompound.setInt("DisplayData", iblockdata.getBlock().toLegacyData(iblockdata));
             nbttagcompound.setInt("DisplayOffset", this.getDisplayBlockOffset());
         }
@@ -714,7 +718,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
     }
 
     public void collide(Entity entity) {
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             if (!entity.noclip && !this.noclip) {
                 if (!this.w(entity)) {
                     // CraftBukkit start
@@ -858,7 +862,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
 
         RIDEABLE(0, "MinecartRideable"), CHEST(1, "MinecartChest"), FURNACE(2, "MinecartFurnace"), TNT(3, "MinecartTNT"), SPAWNER(4, "MinecartSpawner"), HOPPER(5, "MinecartHopper"), COMMAND_BLOCK(6, "MinecartCommandBlock");
 
-        private static final Map<Integer, EntityMinecartAbstract.EnumMinecartType> h = Maps.newHashMap();
+        // private static final Map<Integer, EntityMinecartAbstract.EnumMinecartType> h = Maps.newHashMap(); // NeonPaper - Optimize unused
         private final int i;
         private final String j;
 
@@ -875,6 +879,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
             return this.j;
         }
 
+        /* // NeonPaper start - Optimize unused
         static {
             EntityMinecartAbstract.EnumMinecartType[] aentityminecartabstract_enumminecarttype = values();
             int i = aentityminecartabstract_enumminecarttype.length;
@@ -885,7 +890,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
                 EntityMinecartAbstract.EnumMinecartType.h.put(Integer.valueOf(entityminecartabstract_enumminecarttype.a()), entityminecartabstract_enumminecarttype);
             }
 
-        }
+        } */ // NeonPaper end
     }
 
     // CraftBukkit start - Methods for getting and setting flying and derailed velocity modifiers
diff --git a/src/main/java/net/minecraft/server/EntityMinecartContainer.java b/src/main/java/net/minecraft/server/EntityMinecartContainer.java
index 15f392d235885f7b8b6ee7cb55bd2509b228f7fe..b3797c8ddd76771e9f275539748e4ee3be28253f 100644
--- a/src/main/java/net/minecraft/server/EntityMinecartContainer.java
+++ b/src/main/java/net/minecraft/server/EntityMinecartContainer.java
@@ -213,7 +213,7 @@ public abstract class EntityMinecartContainer extends EntityMinecartAbstract imp
     }
 
     public boolean b(EntityHuman entityhuman, EnumHand enumhand) {
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             entityhuman.openContainer(this);
         }
 
diff --git a/src/main/java/net/minecraft/server/EntityMinecartFurnace.java b/src/main/java/net/minecraft/server/EntityMinecartFurnace.java
index 08e7f7b6c3f075fa0cf9c9352c142c2a2c3f7701..762a7f966de8d1a758f3e517608f94feb0caafcb 100644
--- a/src/main/java/net/minecraft/server/EntityMinecartFurnace.java
+++ b/src/main/java/net/minecraft/server/EntityMinecartFurnace.java
@@ -40,9 +40,11 @@ public class EntityMinecartFurnace extends EntityMinecartAbstract {
         }
 
         this.l(this.d > 0);
+        /* // NeonPaper start - Clientside particles
         if (this.j() && this.random.nextInt(4) == 0) {
             this.world.addParticle(EnumParticle.SMOKE_LARGE, this.locX, this.locY + 0.8D, this.locZ, 0.0D, 0.0D, 0.0D, new int[0]);
         }
+        */ // NeonPaper end
 
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityMinecartHopper.java b/src/main/java/net/minecraft/server/EntityMinecartHopper.java
index ae40759dd417d0d5122b8aaa961b0520ab9ea0a5..56c460b1923fa8352b66f0c9fdadb096eec430ab 100644
--- a/src/main/java/net/minecraft/server/EntityMinecartHopper.java
+++ b/src/main/java/net/minecraft/server/EntityMinecartHopper.java
@@ -35,7 +35,7 @@ public class EntityMinecartHopper extends EntityMinecartContainer implements IHo
     }
 
     public boolean b(EntityHuman entityhuman, EnumHand enumhand) {
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             entityhuman.openContainer(this);
         }
 
@@ -77,7 +77,7 @@ public class EntityMinecartHopper extends EntityMinecartContainer implements IHo
 
     public void B_() {
         super.B_();
-        if (!this.world.isClientSide && this.isAlive() && this.isEnabled()) {
+        if (this.isAlive() && this.isEnabled()) { // NeonPaper - Remove isClientSide check
             BlockPosition blockposition = new BlockPosition(this);
 
             if (blockposition.equals(this.c)) {
diff --git a/src/main/java/net/minecraft/server/EntityMinecartTNT.java b/src/main/java/net/minecraft/server/EntityMinecartTNT.java
index 174a4e43d1bcf2b27c361acd4c559d0ec066b9da..788fdf5fc8f390aaf2d8d62d20e6573e1858dfad 100644
--- a/src/main/java/net/minecraft/server/EntityMinecartTNT.java
+++ b/src/main/java/net/minecraft/server/EntityMinecartTNT.java
@@ -28,7 +28,7 @@ public class EntityMinecartTNT extends EntityMinecartAbstract {
         super.B_();
         if (this.a > 0) {
             --this.a;
-            this.world.addParticle(EnumParticle.SMOKE_NORMAL, this.locX, this.locY + 0.5D, this.locZ, 0.0D, 0.0D, 0.0D, new int[0]);
+            // this.world.addParticle(EnumParticle.SMOKE_NORMAL, this.locX, this.locY + 0.5D, this.locZ, 0.0D, 0.0D, 0.0D, new int[0]); // NeonPaper - Clientside particles
         } else if (this.a == 0) {
             this.c(this.motX * this.motX + this.motZ * this.motZ);
         }
@@ -76,7 +76,7 @@ public class EntityMinecartTNT extends EntityMinecartAbstract {
     }
 
     protected void c(double d0) {
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             double d1 = Math.sqrt(d0);
 
             if (d1 > 5.0D) {
@@ -108,7 +108,7 @@ public class EntityMinecartTNT extends EntityMinecartAbstract {
 
     public void j() {
         this.a = 80;
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             this.world.broadcastEntityEffect(this, (byte) 10);
             if (!this.isSilent()) {
                 this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.hW, SoundCategory.BLOCKS, 1.0F, 1.0F);
diff --git a/src/main/java/net/minecraft/server/EntityMonster.java b/src/main/java/net/minecraft/server/EntityMonster.java
index 8782bce56d2b52a7c2fc69954b54f7c360dd5793..752760fab52727443c75d9584f32f11617c93bcd 100644
--- a/src/main/java/net/minecraft/server/EntityMonster.java
+++ b/src/main/java/net/minecraft/server/EntityMonster.java
@@ -26,7 +26,7 @@ public abstract class EntityMonster extends EntityCreature implements IMonster {
 
     public void B_() {
         super.B_();
-        if (!this.world.isClientSide && this.world.getDifficulty() == EnumDifficulty.PEACEFUL) {
+        if (this.world.getDifficulty() == EnumDifficulty.PEACEFUL) { // NeonPaper - Remove isClientSide check
             this.die();
         }
 
@@ -68,7 +68,7 @@ public abstract class EntityMonster extends EntityCreature implements IMonster {
         boolean flag = entity.damageEntity(DamageSource.mobAttack(this), f);
 
         if (flag) {
-            if (i > 0 && entity instanceof EntityLiving) {
+            if (i > 0 && /*entity instanceof EntityLiving*/true) { // NeonPaper - Optimize
                 ((EntityLiving) entity).a(this, (float) i * 0.5F, (double) MathHelper.sin(this.yaw * 0.017453292F), (double) (-MathHelper.cos(this.yaw * 0.017453292F)));
                 this.motX *= 0.6D;
                 this.motZ *= 0.6D;
diff --git a/src/main/java/net/minecraft/server/EntityMushroomCow.java b/src/main/java/net/minecraft/server/EntityMushroomCow.java
index 5b0f8a988aed914943b592ac4c677c7e76b23dd8..1454dfa31445f381cf7bc0794e82c774288cb78b 100644
--- a/src/main/java/net/minecraft/server/EntityMushroomCow.java
+++ b/src/main/java/net/minecraft/server/EntityMushroomCow.java
@@ -37,8 +37,8 @@ public class EntityMushroomCow extends EntityCow {
             }
             // CraftBukkit end
             this.die();
-            this.world.addParticle(EnumParticle.EXPLOSION_LARGE, this.locX, this.locY + (double) (this.length / 2.0F), this.locZ, 0.0D, 0.0D, 0.0D, new int[0]);
-            if (!this.world.isClientSide) {
+            // this.world.addParticle(EnumParticle.EXPLOSION_LARGE, this.locX, this.locY + (double) (this.length / 2.0F), this.locZ, 0.0D, 0.0D, 0.0D, new int[0]); // NeonPaper - Clientside particles
+            if (true) { // NeonPaper - Remove isClientSide check
                 EntityCow entitycow = new EntityCow(this.world);
 
                 entitycow.setPositionRotation(this.locX, this.locY, this.locZ, this.yaw, this.pitch);
diff --git a/src/main/java/net/minecraft/server/EntityOcelot.java b/src/main/java/net/minecraft/server/EntityOcelot.java
index 858bbef5b42dbfa91e2e17215ecfd7976f3a47e1..cb6a4fb79772aa9c229c0bd2f6a64d029e4553e4 100644
--- a/src/main/java/net/minecraft/server/EntityOcelot.java
+++ b/src/main/java/net/minecraft/server/EntityOcelot.java
@@ -126,7 +126,7 @@ public class EntityOcelot extends EntityTameableAnimal {
         ItemStack itemstack = entityhuman.b(enumhand);
 
         if (this.isTamed()) {
-            if (this.e((EntityLiving) entityhuman) && !this.world.isClientSide && !this.e(itemstack)) {
+            if (this.e((EntityLiving) entityhuman) && !this.e(itemstack)) { // NeonPaper - Remove isClientSide check
                 this.goalSit.setSitting(!this.isSitting());
             }
         } else if ((this.bD == null || this.bD.f()) && itemstack.getItem() == Items.FISH && entityhuman.h(this) < 9.0D) {
@@ -134,7 +134,7 @@ public class EntityOcelot extends EntityTameableAnimal {
                 itemstack.subtract(1);
             }
 
-            if (!this.world.isClientSide) {
+            if (true) { // NeonPaper - Remove isClientSide check
                 // CraftBukkit - added event call and isCancelled check
                 if (this.random.nextInt(3) == 0 && !org.bukkit.craftbukkit.event.CraftEventFactory.callEntityTameEvent(this, entityhuman).isCancelled()) {
                     this.c(entityhuman);
diff --git a/src/main/java/net/minecraft/server/EntityPainting.java b/src/main/java/net/minecraft/server/EntityPainting.java
index 6b1c7bbdfd95fa095b2a4b0c320f4aa979dac730..f5a0e875adb37bb0d00e371d4b846c3559576654 100644
--- a/src/main/java/net/minecraft/server/EntityPainting.java
+++ b/src/main/java/net/minecraft/server/EntityPainting.java
@@ -11,14 +11,14 @@ public class EntityPainting extends EntityHanging {
 
     public EntityPainting(World world) {
         super(world);
-        this.art = EnumArt.values()[this.random.nextInt(EnumArt.values().length)]; // CraftBukkit - generate a non-null painting
+        this.art = EnumArt.VALUES[this.random.nextInt(EnumArt.VALUES.length)]; // NeonPaper - Single values array // CraftBukkit - generate a non-null painting
     }
 
     public EntityPainting(World world, BlockPosition blockposition, EnumDirection enumdirection) {
         super(world, blockposition);
         ArrayList arraylist = Lists.newArrayList();
         int i = 0;
-        EntityPainting.EnumArt[] aentitypainting_enumart = EntityPainting.EnumArt.values();
+        EntityPainting.EnumArt[] aentitypainting_enumart = EntityPainting.EnumArt.VALUES; // NeonPaper - Single values array
         int j = aentitypainting_enumart.length;
 
         for (int k = 0; k < j; ++k) {
@@ -60,7 +60,7 @@ public class EntityPainting extends EntityHanging {
 
     public void a(NBTTagCompound nbttagcompound) {
         String s = nbttagcompound.getString("Motive");
-        EntityPainting.EnumArt[] aentitypainting_enumart = EntityPainting.EnumArt.values();
+        EntityPainting.EnumArt[] aentitypainting_enumart = EntityPainting.EnumArt.VALUES; // NeonPaper - Single values array
         int i = aentitypainting_enumart.length;
 
         for (int j = 0; j < i; ++j) {
@@ -119,6 +119,7 @@ public class EntityPainting extends EntityHanging {
         public final int D;
         public final int E;
         public final int F;
+        public static final EntityPainting.EnumArt[] VALUES = values(); // NeonPaper - Single values array
 
         private EnumArt(String s, int i, int j, int k, int l) {
             this.B = s;
diff --git a/src/main/java/net/minecraft/server/EntityParrot.java b/src/main/java/net/minecraft/server/EntityParrot.java
index f31d9b31b75f5a0ca01769dba3d001dd7d818eac..e9c9ff9d52a3dbdedf82f84822e180735ca4edc5 100644
--- a/src/main/java/net/minecraft/server/EntityParrot.java
+++ b/src/main/java/net/minecraft/server/EntityParrot.java
@@ -139,7 +139,7 @@ public class EntityParrot extends EntityPerchable implements EntityBird {
                 this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.eJ, this.bK(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
             }
 
-            if (!this.world.isClientSide) {
+            if (true) { // NeonPaper - Remove isClientSide check
                 if (this.random.nextInt(10) == 0 && !org.bukkit.craftbukkit.event.CraftEventFactory.callEntityTameEvent(this, entityhuman).isCancelled()) { // CraftBukkit
                     this.c(entityhuman);
                     this.p(true);
@@ -163,7 +163,7 @@ public class EntityParrot extends EntityPerchable implements EntityBird {
 
             return true;
         } else {
-            if (!this.world.isClientSide && !this.a() && this.isTamed() && this.e((EntityLiving) entityhuman)) {
+            if (!this.a() && this.isTamed() && this.e((EntityLiving) entityhuman)) { // NeonPaper - Remove isClientSide check
                 this.goalSit.setSitting(!this.isSitting());
             }
 
@@ -225,7 +225,10 @@ public class EntityParrot extends EntityPerchable implements EntityBird {
     }
 
     public static SoundEffect g(int i) {
-        return EntityParrot.bK.containsKey(i) ? (SoundEffect) EntityParrot.bK.get(i) : SoundEffects.eH;
+        // NeonPaper start - Optimize map get
+        SoundEffect sound = EntityParrot.bK.get(i);
+        return sound != null ? sound : SoundEffects.eH;
+        // NeonPaper end
     }
 
     protected SoundEffect d(DamageSource damagesource) {
diff --git a/src/main/java/net/minecraft/server/EntityPig.java b/src/main/java/net/minecraft/server/EntityPig.java
index fcf99e668fab90369986fc5419242f2bc31174b5..78bca905c1b82b8654d81cd2082c20a617e4fcd8 100644
--- a/src/main/java/net/minecraft/server/EntityPig.java
+++ b/src/main/java/net/minecraft/server/EntityPig.java
@@ -56,7 +56,7 @@ public class EntityPig extends EntityAnimal {
     }
 
     public void a(DataWatcherObject<?> datawatcherobject) {
-        if (EntityPig.by.equals(datawatcherobject) && this.world.isClientSide) {
+        if (false) { // NeonPaper - Remove isClientSide check
             this.bB = true;
             this.bC = 0;
             this.bD = ((Integer) this.datawatcher.get(EntityPig.by)).intValue();
@@ -109,7 +109,7 @@ public class EntityPig extends EntityAnimal {
                 itemstack.a(entityhuman, (EntityLiving) this, enumhand);
                 return true;
             } else if (this.hasSaddle() && !this.isVehicle()) {
-                if (!this.world.isClientSide) {
+                if (true) { // NeonPaper - Remove isClientSide check
                     entityhuman.startRiding(this);
                 }
 
@@ -127,7 +127,7 @@ public class EntityPig extends EntityAnimal {
 
     public void die(DamageSource damagesource) {
         // super.die(damagesource); // CraftBukkit - Moved to end
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             if (this.hasSaddle()) {
                 this.a(Items.SADDLE, 1);
             }
@@ -155,7 +155,7 @@ public class EntityPig extends EntityAnimal {
     }
 
     public void onLightningStrike(EntityLightning entitylightning) {
-        if (!this.world.isClientSide && !this.dead) {
+        if (!this.dead) { // NeonPaper - Remove isClientSide check
             EntityPigZombie entitypigzombie = new EntityPigZombie(this.world);
 
             // Paper start
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index cb2c459ae02898a11732c8b96682f2015bd3b3a9..67ff382f2a6fedbba37097ee331994c8669c82a0 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -221,7 +221,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         if (world == null) {
             this.dead = false;
             BlockPosition position = null;
-            if (this.spawnWorld != null && !this.spawnWorld.equals("")) {
+            if (this.spawnWorld != null && !this.spawnWorld.isEmpty()) { // NeonPaper - Optimize
                 CraftWorld cworld = (CraftWorld) Bukkit.getServer().getWorld(this.spawnWorld);
                 if (cworld != null && this.getBed() != null) {
                     world = cworld.getHandle();
@@ -290,7 +290,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
             containerUpdateDelay = world.paperConfig.containerUpdateTickRate;
         }
         // Paper end
-        if (!this.world.isClientSide && !this.activeContainer.canUse(this)) {
+        if (!this.activeContainer.canUse(this)) { // NeonPaper - Remove isClientSide check
             this.closeInventory(org.bukkit.event.inventory.InventoryCloseEvent.Reason.CANT_USE); // Paper
             this.activeContainer = this.defaultContainer;
         }
@@ -974,7 +974,10 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         this.playerConnection.sendPacket(new PacketPlayOutWindowItems(container.windowId, nonnulllist));
         this.playerConnection.sendPacket(new PacketPlayOutSetSlot(-1, -1, this.inventory.getCarried()));
         // CraftBukkit start - Send a Set Slot to update the crafting result slot
-        if (java.util.EnumSet.of(InventoryType.CRAFTING,InventoryType.WORKBENCH).contains(container.getBukkitView().getType())) {
+        // NeonPaper start - Optimize
+        InventoryType type = container.getBukkitView().getType();
+        if (type == InventoryType.CRAFTING || type == InventoryType.WORKBENCH) {
+            // NeonPaper end
             this.playerConnection.sendPacket(new PacketPlayOutSetSlot(container.windowId, 0, container.getSlot(0).getItem()));
         }
         // CraftBukkit end
@@ -1067,7 +1070,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         int i = aminecraftkey.length;
 
         for (int j = 0; j < i; ++j) {
-            MinecraftKey minecraftkey = aminecraftkey1[j];
+            MinecraftKey minecraftkey = aminecraftkey[j]; // NeonPaper - Inline
 
             // CraftBukkit start
             if (CraftingManager.a(minecraftkey) == null) {
@@ -1285,8 +1288,10 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     public String A() {
         String s = this.playerConnection.networkManager.getSocketAddress().toString();
 
-        s = s.substring(s.indexOf("/") + 1);
-        s = s.substring(0, s.indexOf(":"));
+        // NeonPaper start - Optimize
+        s = s.substring(s.indexOf('/') + 1);
+        s = s.substring(0, s.indexOf(':'));
+        // NeonPaper end
         return s;
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityPotion.java b/src/main/java/net/minecraft/server/EntityPotion.java
index 80d09488e0db1ddb56d8c839570d0fdcb25da162..13d17fc716517c2bb82ef82ba06244a10d47e814 100644
--- a/src/main/java/net/minecraft/server/EntityPotion.java
+++ b/src/main/java/net/minecraft/server/EntityPotion.java
@@ -72,7 +72,7 @@ public class EntityPotion extends EntityProjectile {
     }
 
     protected void a(MovingObjectPosition movingobjectposition) {
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             ItemStack itemstack = this.getItem();
             PotionRegistry potionregistry = PotionUtil.d(itemstack);
             List list = PotionUtil.getEffects(itemstack);
diff --git a/src/main/java/net/minecraft/server/EntityProjectile.java b/src/main/java/net/minecraft/server/EntityProjectile.java
index 8e6428a0cfc5d0d13197d2ce8b90c0962eb2b414..fcfae8c31d6c7ca066a93d997a7b96d92cf569b4 100644
--- a/src/main/java/net/minecraft/server/EntityProjectile.java
+++ b/src/main/java/net/minecraft/server/EntityProjectile.java
@@ -211,11 +211,13 @@ public abstract class EntityProjectile extends Entity implements IProjectile {
         float f2 = this.j();
 
         if (this.isInWater()) {
+            /* // NeonPaper start - Clientside particles
             for (int j = 0; j < 4; ++j) {
                 float f3 = 0.25F;
 
                 this.world.addParticle(EnumParticle.WATER_BUBBLE, this.locX - this.motX * 0.25D, this.locY - this.motY * 0.25D, this.locZ - this.motZ * 0.25D, this.motX, this.motY, this.motZ, new int[0]);
             }
+            */ // NeonPaper end
 
             f1 = 0.8F;
         }
@@ -244,7 +246,7 @@ public abstract class EntityProjectile extends Entity implements IProjectile {
         nbttagcompound.setInt("zTile", this.blockZ);
         MinecraftKey minecraftkey = (MinecraftKey) Block.REGISTRY.b(this.inBlockId);
 
-        nbttagcompound.setString("inTile", minecraftkey == null ? "" : minecraftkey.toString());
+        nbttagcompound.setString("inTile", /*minecraftkey == null*/false ? "" : minecraftkey.toString()); // NeonPaper - Optimize
         nbttagcompound.setByte("shake", (byte) this.shake);
         nbttagcompound.setByte("inGround", (byte) (this.inGround ? 1 : 0));
         if ((this.shooterName == null || this.shooterName.isEmpty()) && this.shooter instanceof EntityHuman) {
diff --git a/src/main/java/net/minecraft/server/EntityRabbit.java b/src/main/java/net/minecraft/server/EntityRabbit.java
index fb56a290178de9329febfa76bf6f8433c5ea878c..2ab94c3c00b055531263cff5fefe32a54d24c810 100644
--- a/src/main/java/net/minecraft/server/EntityRabbit.java
+++ b/src/main/java/net/minecraft/server/EntityRabbit.java
@@ -70,7 +70,7 @@ public class EntityRabbit extends EntityAnimal {
             }
         }
 
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             this.world.broadcastEntityEffect(this, (byte) 1);
         }
 
@@ -327,10 +327,12 @@ public class EntityRabbit extends EntityAnimal {
     }
 
     protected void do_() {
+        /* // NeonPaper start - Clientside particles
         BlockCarrots blockcarrots = (BlockCarrots) Blocks.CARROTS;
         IBlockData iblockdata = blockcarrots.setAge(blockcarrots.g());
 
         this.world.addParticle(EnumParticle.BLOCK_DUST, this.locX + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, this.locY + 0.5D + (double) (this.random.nextFloat() * this.length), this.locZ + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, 0.0D, 0.0D, 0.0D, new int[] { Block.getCombinedId(iblockdata)});
+        */ // NeonPaper end
         this.bD = 40;
     }
 
diff --git a/src/main/java/net/minecraft/server/EntitySheep.java b/src/main/java/net/minecraft/server/EntitySheep.java
index dd2ecc0230b19f30a24c06a9e90046c22940ab70..94486bee4f4afdd38044c6ca6e304b53702bd3db 100644
--- a/src/main/java/net/minecraft/server/EntitySheep.java
+++ b/src/main/java/net/minecraft/server/EntitySheep.java
@@ -64,7 +64,7 @@ public class EntitySheep extends EntityAnimal {
     }
 
     public void n() {
-        if (this.world.isClientSide) {
+        if (false) { // NeonPaper - Remove isClientSide check
             this.bB = Math.max(0, this.bB - 1);
         }
 
@@ -144,7 +144,7 @@ public class EntitySheep extends EntityAnimal {
         ItemStack itemstack = entityhuman.b(enumhand);
 
         if (itemstack.getItem() == Items.SHEARS && !this.isSheared() && !this.isBaby()) {
-            if (!this.world.isClientSide) {
+            if (true) { // NeonPaper - Remove isClientSide check
                 // CraftBukkit start
                 PlayerShearEntityEvent event = new PlayerShearEntityEvent((org.bukkit.entity.Player) entityhuman.getBukkitEntity(), this.getBukkitEntity());
                 this.world.getServer().getPluginManager().callEvent(event);
diff --git a/src/main/java/net/minecraft/server/EntityShulker.java b/src/main/java/net/minecraft/server/EntityShulker.java
index 0887c24074e072e553fa37a700710bb482f44b0f..8776ca60b2b3a31138060336a8e12df5061363fe 100644
--- a/src/main/java/net/minecraft/server/EntityShulker.java
+++ b/src/main/java/net/minecraft/server/EntityShulker.java
@@ -140,7 +140,7 @@ public class EntityShulker extends EntityGolem implements IMonster {
         super.B_();
         BlockPosition blockposition = (BlockPosition) ((Optional) this.datawatcher.get(EntityShulker.b)).orNull();
 
-        if (blockposition == null && !this.world.isClientSide) {
+        if (blockposition == null) { // NeonPaper - Remove isClientSide check
             blockposition = new BlockPosition(this);
             this.datawatcher.set(EntityShulker.b, Optional.of(blockposition));
         }
@@ -154,7 +154,7 @@ public class EntityShulker extends EntityGolem implements IMonster {
             this.aN = f;
             this.aO = f;
             this.bE = 0;
-        } else if (!this.world.isClientSide) {
+        } else if (true) { // NeonPaper - Remove isClientSide check
             IBlockData iblockdata = this.world.getType(blockposition);
 
             if (iblockdata.getMaterial() != Material.AIR) {
@@ -185,7 +185,7 @@ public class EntityShulker extends EntityGolem implements IMonster {
 
             if (!this.world.d(blockposition1, false)) {
                 boolean flag = false;
-                EnumDirection[] aenumdirection = EnumDirection.values();
+                EnumDirection[] aenumdirection = EnumDirection.VALUES; // NeonPaper - Single values array
                 int i = aenumdirection.length;
 
                 for (int j = 0; j < i; ++j) {
@@ -220,7 +220,7 @@ public class EntityShulker extends EntityGolem implements IMonster {
         }
 
         if (blockposition != null) {
-            if (this.world.isClientSide) {
+            if (false) { // NeonPaper - Remove isClientSide check
                 if (this.bE > 0 && this.bD != null) {
                     --this.bE;
                 } else {
@@ -329,7 +329,7 @@ public class EntityShulker extends EntityGolem implements IMonster {
 
                 if (blockposition1.getY() > 0 && this.world.isEmpty(blockposition1) && this.world.g(this) && this.world.getCubes(this, new AxisAlignedBB(blockposition1)).isEmpty()) {
                     boolean flag = false;
-                    EnumDirection[] aenumdirection = EnumDirection.values();
+                    EnumDirection[] aenumdirection = EnumDirection.VALUES; // NeonPaper - Single values array
                     int j = aenumdirection.length;
 
                     for (int k = 0; k < j; ++k) {
@@ -378,7 +378,7 @@ public class EntityShulker extends EntityGolem implements IMonster {
     }
 
     public void a(DataWatcherObject<?> datawatcherobject) {
-        if (EntityShulker.b.equals(datawatcherobject) && this.world.isClientSide && !this.isPassenger()) {
+        if (false) { // NeonPaper - Remove isClientSide check
             BlockPosition blockposition = this.dm();
 
             if (blockposition != null) {
@@ -450,7 +450,7 @@ public class EntityShulker extends EntityGolem implements IMonster {
     }
 
     public void a(int i) {
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             this.getAttributeInstance(GenericAttributes.h).c(EntityShulker.bA);
             if (i == 0) {
                 this.getAttributeInstance(GenericAttributes.h).b(EntityShulker.bA);
diff --git a/src/main/java/net/minecraft/server/EntityShulkerBullet.java b/src/main/java/net/minecraft/server/EntityShulkerBullet.java
index f019729e91152f4f0befbc1ed1092330435697cf..b90bf20b6a61913790d5b4c1c377b2f11212687f 100644
--- a/src/main/java/net/minecraft/server/EntityShulkerBullet.java
+++ b/src/main/java/net/minecraft/server/EntityShulkerBullet.java
@@ -211,11 +211,11 @@ public class EntityShulkerBullet extends Entity {
     }
 
     public void B_() {
-        if (!this.world.isClientSide && this.world.getDifficulty() == EnumDifficulty.PEACEFUL) {
+        if (this.world.getDifficulty() == EnumDifficulty.PEACEFUL) { // NeonPaper - Remove isClientSide check
             this.die();
         } else {
             super.B_();
-            if (!this.world.isClientSide) {
+            if (true) { // NeonPaper - Remove isClientSide check
                 List list;
                 Iterator iterator;
                 EntityLiving entityliving;
@@ -270,7 +270,7 @@ public class EntityShulkerBullet extends Entity {
 
             this.setPosition(this.locX + this.motX, this.locY + this.motY, this.locZ + this.motZ);
             ProjectileHelper.a(this, 0.5F);
-            if (this.world.isClientSide) {
+            if (false) { // NeonPaper - Remove isClientSide check
                 this.world.addParticle(EnumParticle.END_ROD, this.locX - this.motX, this.locY - this.motY + 0.15D, this.locZ - this.motZ, 0.0D, 0.0D, 0.0D, new int[0]);
             } else if (this.target != null && !this.target.dead) {
                 if (this.d > 0) {
@@ -331,7 +331,7 @@ public class EntityShulkerBullet extends Entity {
     }
 
     public boolean damageEntity(DamageSource damagesource, float f) {
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             this.a(SoundEffects.gE, 1.0F, 1.0F);
             ((WorldServer) this.world).a(EnumParticle.CRIT, this.locX, this.locY, this.locZ, 15, 0.2D, 0.2D, 0.2D, 0.0D, new int[0]);
             this.die();
diff --git a/src/main/java/net/minecraft/server/EntitySkeletonAbstract.java b/src/main/java/net/minecraft/server/EntitySkeletonAbstract.java
index 8f4b63c8d216fa754f0849ca5ca5094dd54a70de..f51640d1da21daeeb5fd78c2dc14567939f54821 100644
--- a/src/main/java/net/minecraft/server/EntitySkeletonAbstract.java
+++ b/src/main/java/net/minecraft/server/EntitySkeletonAbstract.java
@@ -60,7 +60,7 @@ public abstract class EntitySkeletonAbstract extends EntityMonster implements IR
     }
 
     public void n() {
-        if (this.world.D() && !this.world.isClientSide) {
+        if (this.world.D()) { // NeonPaper - Remove isClientSide check
             float f = this.aw();
             BlockPosition blockposition = this.bJ() instanceof EntityBoat ? (new BlockPosition(this.locX, (double) Math.round(this.locY), this.locZ)).up() : new BlockPosition(this.locX, (double) Math.round(this.locY), this.locZ);
 
@@ -131,7 +131,7 @@ public abstract class EntitySkeletonAbstract extends EntityMonster implements IR
     }
 
     public void dm() {
-        if (this.world != null && !this.world.isClientSide) {
+        if (this.world != null) { // NeonPaper - Remove isClientSide check
             this.goalSelector.a((PathfinderGoal) this.c);
             this.goalSelector.a((PathfinderGoal) this.b);
             ItemStack itemstack = this.getItemInMainHand();
@@ -189,7 +189,7 @@ public abstract class EntitySkeletonAbstract extends EntityMonster implements IR
 
     public void setSlot(EnumItemSlot enumitemslot, ItemStack itemstack) {
         super.setSlot(enumitemslot, itemstack);
-        if (!this.world.isClientSide && enumitemslot == EnumItemSlot.MAINHAND) {
+        if (enumitemslot == EnumItemSlot.MAINHAND) { // NeonPaper - Remove isClientSide check
             this.dm();
         }
 
diff --git a/src/main/java/net/minecraft/server/EntitySlice.java b/src/main/java/net/minecraft/server/EntitySlice.java
index 4bf08c079016eaef7d376e6d813e86f5f94fe6ae..b711297ffab9c875f903aa1f16f9fe173acd24ac 100644
--- a/src/main/java/net/minecraft/server/EntitySlice.java
+++ b/src/main/java/net/minecraft/server/EntitySlice.java
@@ -93,10 +93,10 @@ public class EntitySlice<T> extends AbstractSet<T> {
         while (iterator.hasNext()) {
             Class oclass = (Class) iterator.next();
 
-            if (oclass.isAssignableFrom(object1.getClass())) {
+            if (oclass.isAssignableFrom(object.getClass())) { // NeonPaper - Inline
                 List list = (List) this.b.get(oclass);
 
-                if (list != null && list.remove(object1)) {
+                if (list != null && list.remove(object)) { // NeonPaper - Inline
                     flag = true;
                 }
             }
diff --git a/src/main/java/net/minecraft/server/EntitySlime.java b/src/main/java/net/minecraft/server/EntitySlime.java
index 3d3a9ca04cffc7b1106b257f1e608c9b2c9897ee..767b74bd6e21e5585ca77ca193ab58e06e7c24a4 100644
--- a/src/main/java/net/minecraft/server/EntitySlime.java
+++ b/src/main/java/net/minecraft/server/EntitySlime.java
@@ -80,7 +80,7 @@ public class EntitySlime extends EntityInsentient implements IMonster {
     }
 
     public void B_() {
-        if (!this.world.isClientSide && this.world.getDifficulty() == EnumDifficulty.PEACEFUL && this.getSize() > 0) {
+        if (this.world.getDifficulty() == EnumDifficulty.PEACEFUL && this.getSize() > 0) { // NeonPaper - Remove isClientSide check
             this.dead = true;
         }
 
@@ -88,6 +88,7 @@ public class EntitySlime extends EntityInsentient implements IMonster {
         this.c = this.b;
         super.B_();
         if (this.onGround && !this.bw) {
+            /* // NeonPaper start - Clientside particles
             int i = this.getSize();
 
             for (int j = 0; j < i * 8; ++j) {
@@ -102,6 +103,7 @@ public class EntitySlime extends EntityInsentient implements IMonster {
 
                 world.addParticle(enumparticle, d0, this.getBoundingBox().b, d1, 0.0D, 0.0D, 0.0D, new int[0]);
             }
+            */ // NeonPaper end
 
             this.a(this.dj(), this.cq(), ((this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F) / 0.8F);
             this.a = -0.5F;
@@ -143,7 +145,7 @@ public class EntitySlime extends EntityInsentient implements IMonster {
     public void die() {
         int i = this.getSize();
 
-        if (!this.world.isClientSide && i > 1 && this.getHealth() <= 0.0F) {
+        if (i > 1 && this.getHealth() <= 0.0F) { // NeonPaper - Remove isClientSide check
             int j = 2 + this.random.nextInt(3);
 
             // CraftBukkit start
diff --git a/src/main/java/net/minecraft/server/EntitySmallFireball.java b/src/main/java/net/minecraft/server/EntitySmallFireball.java
index 3f5fe4e1d04e5c679ad28f1f0804d704c6bb762b..4c8ed6b1f0fb7158a8e02aafb7fd56ce062a2739 100644
--- a/src/main/java/net/minecraft/server/EntitySmallFireball.java
+++ b/src/main/java/net/minecraft/server/EntitySmallFireball.java
@@ -29,7 +29,7 @@ public class EntitySmallFireball extends EntityFireball {
     }
 
     protected void a(MovingObjectPosition movingobjectposition) {
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             boolean flag;
 
             if (movingobjectposition.entity != null) {
diff --git a/src/main/java/net/minecraft/server/EntitySnowman.java b/src/main/java/net/minecraft/server/EntitySnowman.java
index f8a2273c23364211bd3f467f3aa1cfeddedaa233..a35dd384023221c6863ffbdf6a976619a2cb3701 100644
--- a/src/main/java/net/minecraft/server/EntitySnowman.java
+++ b/src/main/java/net/minecraft/server/EntitySnowman.java
@@ -53,7 +53,7 @@ public class EntitySnowman extends EntityGolem implements IRangedEntity {
 
     public void n() {
         super.n();
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             int i = MathHelper.floor(this.locX);
             int j = MathHelper.floor(this.locY);
             int k = MathHelper.floor(this.locZ);
@@ -109,7 +109,7 @@ public class EntitySnowman extends EntityGolem implements IRangedEntity {
     protected boolean a(EntityHuman entityhuman, EnumHand enumhand) {
         ItemStack itemstack = entityhuman.b(enumhand);
 
-        if (itemstack.getItem() == Items.SHEARS && this.hasPumpkin() && !this.world.isClientSide) {
+        if (itemstack.getItem() == Items.SHEARS && this.hasPumpkin()) { // NeonPaper - Remove isClientSide check
             // CraftBukkit start
             PlayerShearEntityEvent event = new PlayerShearEntityEvent((org.bukkit.entity.Player) entityhuman.getBukkitEntity(), this.getBukkitEntity());
             this.world.getServer().getPluginManager().callEvent(event);
diff --git a/src/main/java/net/minecraft/server/EntitySpider.java b/src/main/java/net/minecraft/server/EntitySpider.java
index 957fa5779fcd73e9bdbb84b94ad112e214a13239..ac865e8efce8dbdb89b451cd7ff60464ffdf179f 100644
--- a/src/main/java/net/minecraft/server/EntitySpider.java
+++ b/src/main/java/net/minecraft/server/EntitySpider.java
@@ -43,7 +43,7 @@ public class EntitySpider extends EntityMonster {
 
     public void B_() {
         super.B_();
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             this.a(this.positionChanged);
         }
 
@@ -191,7 +191,7 @@ public class EntitySpider extends EntityMonster {
                 this.a = MobEffects.INCREASE_DAMAGE;
             } else if (i <= 3) {
                 this.a = MobEffects.REGENERATION;
-            } else if (i <= 4) {
+            } else if (/*i <= 4*/true) { // NeonPaper - Optimize
                 this.a = MobEffects.INVISIBILITY;
             }
 
diff --git a/src/main/java/net/minecraft/server/EntitySquid.java b/src/main/java/net/minecraft/server/EntitySquid.java
index 2d8cfb012bcaed4e3639485cf7662d83b66500cc..f1e14ddbc7a4164ffdb8a1bb0c99f5145af88247 100644
--- a/src/main/java/net/minecraft/server/EntitySquid.java
+++ b/src/main/java/net/minecraft/server/EntitySquid.java
@@ -76,7 +76,7 @@ public class EntitySquid extends EntityWaterAnimal {
         this.bz = this.by;
         this.bw += this.bB;
         if ((double) this.bw > 6.283185307179586D) {
-            if (this.world.isClientSide) {
+            if (false) { // NeonPaper - Remove isClientSide check
                 this.bw = 6.2831855F;
             } else {
                 this.bw = (float) ((double) this.bw - 6.283185307179586D);
@@ -106,7 +106,7 @@ public class EntitySquid extends EntityWaterAnimal {
                 this.bC *= 0.99F;
             }
 
-            if (!this.world.isClientSide) {
+            if (true) { // NeonPaper - Remove isClientSide check
                 this.motX = (double) (this.bD * this.bA);
                 this.motY = (double) (this.bE * this.bA);
                 this.motZ = (double) (this.bF * this.bA);
@@ -119,7 +119,7 @@ public class EntitySquid extends EntityWaterAnimal {
             this.a += (-((float) MathHelper.c((double) f, this.motY)) * 57.295776F - this.a) * 0.1F;
         } else {
             this.by = MathHelper.e(MathHelper.sin(this.bw)) * 3.1415927F * 0.25F;
-            if (!this.world.isClientSide) {
+            if (true) { // NeonPaper - Remove isClientSide check
                 this.motX = 0.0D;
                 this.motZ = 0.0D;
                 if (this.hasEffect(MobEffects.LEVITATION)) {
diff --git a/src/main/java/net/minecraft/server/EntityTNTPrimed.java b/src/main/java/net/minecraft/server/EntityTNTPrimed.java
index 50811852a3319895fc08419eb577c54fe9d0bbb8..5b46075299aec5aa572e146f4fcc431a9d7e79d2 100644
--- a/src/main/java/net/minecraft/server/EntityTNTPrimed.java
+++ b/src/main/java/net/minecraft/server/EntityTNTPrimed.java
@@ -77,14 +77,14 @@ public class EntityTNTPrimed extends Entity {
         if (this.c <= 0) {
             // CraftBukkit start - Need to reverse the order of the explosion and the entity death so we have a location for the event
             // this.die();
-            if (!this.world.isClientSide) {
+            if (true) { // NeonPaper - Remove isClientSide check
                 this.explode();
             }
             this.die();
             // CraftBukkit end
         } else {
             this.aq();
-            this.world.addParticle(EnumParticle.SMOKE_NORMAL, this.locX, this.locY + 0.5D, this.locZ, 0.0D, 0.0D, 0.0D, new int[0]);
+            // this.world.addParticle(EnumParticle.SMOKE_NORMAL, this.locX, this.locY + 0.5D, this.locZ, 0.0D, 0.0D, 0.0D, new int[0]); // NeonPaper - Clientside particles
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/EntityTameableAnimal.java b/src/main/java/net/minecraft/server/EntityTameableAnimal.java
index 7b727ac9be358d7a0f18247fb39fc67799ab2a4b..e0e65b614e9bb288a463651db7eab0dbf7218281 100644
--- a/src/main/java/net/minecraft/server/EntityTameableAnimal.java
+++ b/src/main/java/net/minecraft/server/EntityTameableAnimal.java
@@ -65,6 +65,7 @@ public abstract class EntityTameableAnimal extends EntityAnimal implements Entit
     }
 
     protected void p(boolean flag) {
+        if (true) return; // NeonPaper - Clientside particles
         EnumParticle enumparticle = EnumParticle.HEART;
 
         if (!flag) {
@@ -184,7 +185,7 @@ public abstract class EntityTameableAnimal extends EntityAnimal implements Entit
     }
 
     public void die(DamageSource damagesource) {
-        if (!this.world.isClientSide && this.world.getGameRules().getBoolean("showDeathMessages") && this.getOwner() instanceof EntityPlayer) {
+        if (this.world.getGameRules().getBoolean("showDeathMessages") && this.getOwner() instanceof EntityPlayer) { // NeonPaper - Remove isClientSide check
             this.getOwner().sendMessage(this.getCombatTracker().getDeathMessage());
         }
 
diff --git a/src/main/java/net/minecraft/server/EntityThrownExpBottle.java b/src/main/java/net/minecraft/server/EntityThrownExpBottle.java
index e14f614f59eaa9e4d78a5adbfab7d087d7a52469..4a49ea52bc3942119fd7eb615ade255558cb6f2f 100644
--- a/src/main/java/net/minecraft/server/EntityThrownExpBottle.java
+++ b/src/main/java/net/minecraft/server/EntityThrownExpBottle.java
@@ -23,7 +23,7 @@ public class EntityThrownExpBottle extends EntityProjectile {
     }
 
     protected void a(MovingObjectPosition movingobjectposition) {
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             // CraftBukkit - moved to after event
             // this.world.triggerEffect(2002, new BlockPosition(this), PotionUtil.a(Potions.b));
             int i = 3 + this.world.random.nextInt(5) + this.world.random.nextInt(5);
diff --git a/src/main/java/net/minecraft/server/EntityTippedArrow.java b/src/main/java/net/minecraft/server/EntityTippedArrow.java
index 70434a46a4ea34bbfc34d88329f6aeb25cf34239..35c811c76db94e3c6b88c54529b9c855919cf2d8 100644
--- a/src/main/java/net/minecraft/server/EntityTippedArrow.java
+++ b/src/main/java/net/minecraft/server/EntityTippedArrow.java
@@ -84,7 +84,7 @@ public class EntityTippedArrow extends EntityArrow {
 
     public void B_() {
         super.B_();
-        if (this.world.isClientSide) {
+        if (false) { // NeonPaper - Remove isClientSide check
             if (this.inGround) {
                 if (this.b % 5 == 0) {
                     this.c(1);
@@ -102,6 +102,7 @@ public class EntityTippedArrow extends EntityArrow {
     }
 
     private void c(int i) {
+        if (true) return; // NeonPaper - Clientside particles
         int j = this.getColor();
 
         if (j != -1 && i > 0) {
diff --git a/src/main/java/net/minecraft/server/EntityTrackerEntry.java b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
index efc4c79ab717effe2995e155dd29827ff68b8e5e..99e430f3197fdd019530d3ab0719b0f88d104d63 100644
--- a/src/main/java/net/minecraft/server/EntityTrackerEntry.java
+++ b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
@@ -14,6 +14,11 @@ import org.bukkit.entity.Player;
 import org.bukkit.event.player.PlayerVelocityEvent;
 // CraftBukkit end
 
+// NeonPaper start - FastUtil optimization
+import it.unimi.dsi.fastutil.objects.Object2BooleanMap;
+import it.unimi.dsi.fastutil.objects.Object2BooleanOpenHashMap;
+// NeonPaper end
+
 public class EntityTrackerEntry {
 
     private static final Logger c = LogManager.getLogger();
@@ -44,7 +49,7 @@ public class EntityTrackerEntry {
     // Paper start
     // Replace trackedPlayers Set with a Map. The value is true until the player receives
     // their first update (which is forced to have absolute coordinates), false afterward.
-    public java.util.Map<EntityPlayer, Boolean> trackedPlayerMap = new java.util.HashMap<EntityPlayer, Boolean>();
+    public Object2BooleanMap<EntityPlayer> trackedPlayerMap = new Object2BooleanOpenHashMap<>(); // NeonPaper - FastUtil optimization
     public Set<EntityPlayer> trackedPlayers = trackedPlayerMap.keySet();
     // Paper end
 
@@ -214,8 +219,8 @@ public class EntityTrackerEntry {
                     } else {
                         PacketPlayOutEntityTeleport teleportPacket = null;
 
-                        for (java.util.Map.Entry<EntityPlayer, Boolean> viewer : trackedPlayerMap.entrySet()) {
-                            if (viewer.getValue()) {
+                        for (Object2BooleanMap.Entry<EntityPlayer> viewer : trackedPlayerMap.object2BooleanEntrySet()) { // NeonPaper - FastUtil optimization
+                            if (viewer.getBooleanValue()) { // NeonPaper - FastUtil optimization
                                 viewer.setValue(false);
                                 if (teleportPacket == null) {
                                     teleportPacket = new PacketPlayOutEntityTeleport(this.tracker);
@@ -400,7 +405,7 @@ public class EntityTrackerEntry {
                     }
 
                     if (this.tracker instanceof EntityLiving) {
-                        EnumItemSlot[] aenumitemslot = EnumItemSlot.values();
+                        EnumItemSlot[] aenumitemslot = EnumItemSlot.VALUES; // NeonPaper - Single values array
                         int i = aenumitemslot.length;
 
                         for (int j = 0; j < i; ++j) {
@@ -446,7 +451,7 @@ public class EntityTrackerEntry {
                     }
 
                     this.tracker.b(entityplayer);
-                    entityplayer.d(this.tracker);
+                    // entityplayer.d(this.tracker); // NeonPaper - Already removed above
                     updatePassengers(entityplayer); // Paper
                 }
             } else if (this.trackedPlayers.contains(entityplayer)) {
diff --git a/src/main/java/net/minecraft/server/EntityVillager.java b/src/main/java/net/minecraft/server/EntityVillager.java
index a9c4ab10df7113754230b20473f24acfe092c358..a4b9a60eb0a594bcbf263f2229b7747ee17b7648 100644
--- a/src/main/java/net/minecraft/server/EntityVillager.java
+++ b/src/main/java/net/minecraft/server/EntityVillager.java
@@ -185,10 +185,10 @@ public class EntityVillager extends EntityAgeable implements NPC, IMerchant {
                 entityhuman.b(StatisticList.F);
             }
 
-            if (!this.world.isClientSide && !this.trades.isEmpty()) {
+            if (!this.trades.isEmpty()) { // NeonPaper - Remove isClientSide check
                 this.setTradingPlayer(entityhuman);
                 entityhuman.openTrade(this);
-            } else if (this.trades.isEmpty()) {
+            } else if (/*this.trades.isEmpty()*/true) { // NeonPaper - Optimize
                 return super.a(entityhuman, enumhand);
             }
 
@@ -447,7 +447,7 @@ public class EntityVillager extends EntityAgeable implements NPC, IMerchant {
     }
 
     public void a(ItemStack itemstack) {
-        if (!this.world.isClientSide && this.a_ > -this.C() + 20) {
+        if (this.a_ > -this.C() + 20) { // NeonPaper - Remove isClientSide check
             this.a_ = -this.C();
             this.a(itemstack.isEmpty() ? SoundEffects.in : SoundEffects.ip, this.cq(), this.cr());
         }
@@ -489,7 +489,7 @@ public class EntityVillager extends EntityAgeable implements NPC, IMerchant {
                 int k = aentityvillager_imerchantrecipeoption2.length;
 
                 for (int l = 0; l < k; ++l) {
-                    EntityVillager.IMerchantRecipeOption entityvillager_imerchantrecipeoption = aentityvillager_imerchantrecipeoption3[l];
+                    EntityVillager.IMerchantRecipeOption entityvillager_imerchantrecipeoption = aentityvillager_imerchantrecipeoption2[l]; // NeonPaper - Inline
 
                     // CraftBukkit start
                     // this is a hack. this must be done because otherwise, if
@@ -635,7 +635,7 @@ public class EntityVillager extends EntityAgeable implements NPC, IMerchant {
     }
 
     public void onLightningStrike(EntityLightning entitylightning) {
-        if (!this.world.isClientSide && !this.dead) {
+        if (!this.dead) { // NeonPaper - Remove isClientSide check
             EntityWitch entitywitch = new EntityWitch(this.world);
 
             // Paper start
diff --git a/src/main/java/net/minecraft/server/EntityWitch.java b/src/main/java/net/minecraft/server/EntityWitch.java
index 035aa4a901918ab7df5466481ba844e0bb029252..105eccfa3d21d6ea486803626ed90eedf71d6729 100644
--- a/src/main/java/net/minecraft/server/EntityWitch.java
+++ b/src/main/java/net/minecraft/server/EntityWitch.java
@@ -63,7 +63,7 @@ public class EntityWitch extends EntityMonster implements IRangedEntity {
     }
 
     public void n() {
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             if (this.p()) {
                 if (this.bx-- <= 0) {
                     this.a(false);
diff --git a/src/main/java/net/minecraft/server/EntityWither.java b/src/main/java/net/minecraft/server/EntityWither.java
index 9678526059621cd31a9a0dccc8ff803d80e9082a..1bdc599ee7b687113eb8bb486c2213c2875de0c0 100644
--- a/src/main/java/net/minecraft/server/EntityWither.java
+++ b/src/main/java/net/minecraft/server/EntityWither.java
@@ -20,8 +20,10 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
     private static final DataWatcherObject<Integer> by = DataWatcher.a(EntityWither.class, DataWatcherRegistry.b);
     private final float[] bz = new float[2];
     private final float[] bA = new float[2];
+    /* // NeonPaper start - Optimize unused
     private final float[] bB = new float[2];
     private final float[] bC = new float[2];
+    */ // NeonPaper end
     private final int[] bD = new int[2];
     private final int[] bE = new int[2];
     private int bF;
@@ -106,7 +108,7 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
         double d1;
         double d2;
 
-        if (!this.world.isClientSide && this.m(0) > 0) {
+        if (this.m(0) > 0) { // NeonPaper - Remove isClientSide check
             Entity entity = this.world.getEntity(this.m(0));
 
             if (entity != null) {
@@ -138,10 +140,12 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
 
         int i;
 
+        /* // NeonPaper start - Optimize unused
         for (i = 0; i < 2; ++i) {
             this.bC[i] = this.bA[i];
             this.bB[i] = this.bz[i];
         }
+        */ // NeonPaper end
 
         int j;
 
@@ -171,6 +175,7 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
             }
         }
 
+        /* // NeonPaper start - Clientside particles
         boolean flag = this.dn();
 
         for (j = 0; j < 3; ++j) {
@@ -348,6 +353,7 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
 
             this.bG.setProgress(this.getHealth() / this.getMaxHealth());
         }
+        */ // NeonPaper end
     }
 
     public static boolean a(Block block) {
@@ -456,7 +462,7 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
                 }
 
                 entity = damagesource.getEntity();
-                if (entity != null && !(entity instanceof EntityHuman) && entity instanceof EntityLiving && ((EntityLiving) entity).getMonsterType() == this.getMonsterType()) {
+                if (!(entity instanceof EntityHuman) && entity instanceof EntityLiving && ((EntityLiving) entity).getMonsterType() == this.getMonsterType()) { // NeonPaper - Optimize
                     return false;
                 } else {
                     if (this.bF <= 0) {
diff --git a/src/main/java/net/minecraft/server/EntityWitherSkull.java b/src/main/java/net/minecraft/server/EntityWitherSkull.java
index de9eb2d39f04361417d2e538847fd3ecdd975b66..e5deb65e250332d018d0f323d7ea4a360dff4da6 100644
--- a/src/main/java/net/minecraft/server/EntityWitherSkull.java
+++ b/src/main/java/net/minecraft/server/EntityWitherSkull.java
@@ -40,7 +40,7 @@ public class EntityWitherSkull extends EntityFireball {
     }
 
     protected void a(MovingObjectPosition movingobjectposition) {
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             if (movingobjectposition.entity != null) {
                 // Spigot start
                 boolean didDamage = false;
diff --git a/src/main/java/net/minecraft/server/EntityWolf.java b/src/main/java/net/minecraft/server/EntityWolf.java
index f5fd4acadafef6588d53093d3c1607ffc0905aee..1e726d18644a393688ab6618494d8c9365778700 100644
--- a/src/main/java/net/minecraft/server/EntityWolf.java
+++ b/src/main/java/net/minecraft/server/EntityWolf.java
@@ -150,14 +150,14 @@ public class EntityWolf extends EntityTameableAnimal {
 
     public void n() {
         super.n();
-        if (!this.world.isClientSide && this.bG && !this.bH && !this.de() && this.onGround) {
+        if (this.bG && !this.bH && !this.de() && this.onGround) { // NeonPaper - Remove isClientSide check
             this.bH = true;
             this.bI = 0.0F;
             this.bJ = 0.0F;
             this.world.broadcastEntityEffect(this, (byte) 8);
         }
 
-        if (!this.world.isClientSide && this.getGoalTarget() == null && this.isAngry()) {
+        if (this.getGoalTarget() == null && this.isAngry()) { // NeonPaper - Remove isClientSide check
             this.setAngry(false);
         }
 
@@ -191,6 +191,7 @@ public class EntityWolf extends EntityTameableAnimal {
                 this.bI = 0.0F;
             }
 
+            /* // NeonPaper start - Clientside particles
             if (this.bI > 0.4F) {
                 float f = (float) this.getBoundingBox().b;
                 int i = (int) (MathHelper.sin((this.bI - 0.4F) * 3.1415927F) * 7.0F);
@@ -202,6 +203,7 @@ public class EntityWolf extends EntityTameableAnimal {
                     this.world.addParticle(EnumParticle.WATER_SPLASH, this.locX + (double) f1, (double) (f + 0.8F), this.locZ + (double) f2, this.motX, this.motY, this.motZ, new int[0]);
                 }
             }
+            */ // NeonPaper end
         }
 
     }
@@ -283,7 +285,7 @@ public class EntityWolf extends EntityTameableAnimal {
                 }
             }
 
-            if (this.e((EntityLiving) entityhuman) && !this.world.isClientSide && !this.e(itemstack)) {
+            if (this.e((EntityLiving) entityhuman) && !this.e(itemstack)) { // NeonPaper - Remove isClientSide check
                 this.goalSit.setSitting(!this.isSitting());
                 this.bd = false;
                 this.navigation.p();
@@ -294,7 +296,7 @@ public class EntityWolf extends EntityTameableAnimal {
                 itemstack.subtract(1);
             }
 
-            if (!this.world.isClientSide) {
+            if (true) { // NeonPaper - Remove isClientSide check
                 // CraftBukkit - added event call and isCancelled check.
                 if (this.random.nextInt(3) == 0 && !CraftEventFactory.callEntityTameEvent(this, entityhuman).isCancelled()) {
                     this.c(entityhuman);
diff --git a/src/main/java/net/minecraft/server/EntityZombie.java b/src/main/java/net/minecraft/server/EntityZombie.java
index 6111ca0b26c2a88bd56629244712fe7f7cce0db8..9805999042b2c6dd5a9876156ce14a83a2875a55 100644
--- a/src/main/java/net/minecraft/server/EntityZombie.java
+++ b/src/main/java/net/minecraft/server/EntityZombie.java
@@ -99,7 +99,7 @@ public class EntityZombie extends EntityMonster {
 
     public void setBaby(boolean flag) {
         this.getDataWatcher().set(EntityZombie.bx, Boolean.valueOf(flag));
-        if (this.world != null && !this.world.isClientSide) {
+        if (this.world != null) { // NeonPaper - Remove isClientSide check
             AttributeInstance attributeinstance = this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED);
 
             attributeinstance.c(this.c);
@@ -120,7 +120,7 @@ public class EntityZombie extends EntityMonster {
     }
 
     public void n() {
-        if (this.world.D() && !this.world.isClientSide && !this.isBaby() && this.p()) {
+        if (this.world.D() && !this.isBaby() && this.p()) { // NeonPaper - Remove isClientSide check
             float f = this.aw();
 
             if (f > 0.5F && this.random.nextFloat() * 30.0F < (f - 0.4F) * 2.0F && this.world.h(new BlockPosition(this.locX, this.locY + (double) this.getHeadHeight(), this.locZ))) {
diff --git a/src/main/java/net/minecraft/server/EntityZombieVillager.java b/src/main/java/net/minecraft/server/EntityZombieVillager.java
index dde846c616eb74d52dd87c3c75ae2b0c4f8c0cb1..1b919680db980a637531530294fcdde4643379db 100644
--- a/src/main/java/net/minecraft/server/EntityZombieVillager.java
+++ b/src/main/java/net/minecraft/server/EntityZombieVillager.java
@@ -59,7 +59,7 @@ public class EntityZombieVillager extends EntityZombie {
     }
 
     public void B_() {
-        if (!this.world.isClientSide && this.isConverting() && this.isAlive()) { // CraftBukkit
+        if (this.isConverting() && this.isAlive()) { // CraftBukkit // NeonPaper - Remove isClientSide check
             int i = this.du();
             // CraftBukkit start - Use wall time instead of ticks for villager conversion
             int elapsedTicks = MinecraftServer.currentTick - this.lastTick;
@@ -84,7 +84,7 @@ public class EntityZombieVillager extends EntityZombie {
                 itemstack.subtract(1);
             }
 
-            if (!this.world.isClientSide) {
+            if (true) { // NeonPaper - Remove isClientSide check
                 this.a(entityhuman.getUniqueID(), this.random.nextInt(2401) + 3600);
             }
 
diff --git a/src/main/java/net/minecraft/server/EnumBannerPatternType.java b/src/main/java/net/minecraft/server/EnumBannerPatternType.java
index d468ed32e0126da50ceb4125a681a96f57fdd677..e3199dc3f7848694ca4514f218ac01c615971695 100644
--- a/src/main/java/net/minecraft/server/EnumBannerPatternType.java
+++ b/src/main/java/net/minecraft/server/EnumBannerPatternType.java
@@ -8,6 +8,7 @@ public enum EnumBannerPatternType {
     private final String O;
     private final String[] P;
     private ItemStack Q;
+    public static final EnumBannerPatternType[] VALUES = values(); // NeonPaper - Single values array
 
     private EnumBannerPatternType(String s, String s1) {
         this.P = new String[3];
diff --git a/src/main/java/net/minecraft/server/EnumBlockRotation.java b/src/main/java/net/minecraft/server/EnumBlockRotation.java
index 17f8707a7bf7932c4dfb1756a75145976458708b..b40d04df298dec505da0a981797ecc9ec76a2f2f 100644
--- a/src/main/java/net/minecraft/server/EnumBlockRotation.java
+++ b/src/main/java/net/minecraft/server/EnumBlockRotation.java
@@ -6,6 +6,7 @@ public enum EnumBlockRotation {
 
     private final String e;
     private static final String[] f = new String[values().length];
+    public static final EnumBlockRotation[] VALUES = values(); // NeonPaper - Single values array
 
     private EnumBlockRotation(String s) {
         this.e = s;
diff --git a/src/main/java/net/minecraft/server/EnumColor.java b/src/main/java/net/minecraft/server/EnumColor.java
index 2143eac6dfc282f9dcf1187e45921996e47c670d..e570087bbb13dbdc6f974eed7a1acb033adc0f24 100644
--- a/src/main/java/net/minecraft/server/EnumColor.java
+++ b/src/main/java/net/minecraft/server/EnumColor.java
@@ -13,6 +13,7 @@ public enum EnumColor implements INamable {
     private final int w;
     private final float[] x;
     private final EnumChatFormat y;
+    public static final EnumColor[] VALUES = values(); // NeonPaper - Single values array
 
     private EnumColor(int i, int j, String s, String s1, int k, EnumChatFormat enumchatformat) {
         this.s = i;
diff --git a/src/main/java/net/minecraft/server/EnumCreatureType.java b/src/main/java/net/minecraft/server/EnumCreatureType.java
index f02004400c47a4c5a43a9fbfa8bb727b24206842..11c3e85dffee1aaa9036083f5a06d86e6b6088e5 100644
--- a/src/main/java/net/minecraft/server/EnumCreatureType.java
+++ b/src/main/java/net/minecraft/server/EnumCreatureType.java
@@ -9,6 +9,7 @@ public enum EnumCreatureType {
     private final Material g;
     private final boolean h;
     private final boolean i;
+    public static final EnumCreatureType[] VALUES = values(); // NeonPaper - Single values array
 
     private EnumCreatureType(Class<? extends IAnimal> oclass, int i, Material material, boolean flag, boolean flag1) {
         this.e = oclass;
diff --git a/src/main/java/net/minecraft/server/EnumDirection.java b/src/main/java/net/minecraft/server/EnumDirection.java
index 1a2e979e2831bef019d5fb495df413f65bc98477..f3ec1d9e46d355695fd2542b1a87ab1ab46cdbad 100644
--- a/src/main/java/net/minecraft/server/EnumDirection.java
+++ b/src/main/java/net/minecraft/server/EnumDirection.java
@@ -20,9 +20,36 @@ public enum EnumDirection implements INamable {
     private final EnumDirection.EnumAxis k;
     private final EnumDirection.EnumAxisDirection l;
     private final BaseBlockPosition m;
+    // NeonPaper start - Optimize
+    public final int adjacentX;
+    public final int adjacentY;
+    public final int adjacentZ;
+    public EnumDirection opposite;
+    public static final EnumDirection[] HORIZONTALS;
+    public static final EnumDirection[] VERTICALS;
+    // NeonPaper end
     private static final EnumDirection[] n = new EnumDirection[6];
     private static final EnumDirection[] o = new EnumDirection[4];
-    private static final Map<String, EnumDirection> p = Maps.newHashMap();
+    // private static final Map<String, EnumDirection> p = Maps.newHashMap(); // NeonPaper - Optimize unused
+    public static final EnumDirection[] VALUES = values(); // NeonPaper - Single values array
+
+    // NeonPaper start - Optimize
+    static {
+        java.util.List<EnumDirection> horizontals = new java.util.ArrayList<>();
+        java.util.List<EnumDirection> verticals = new java.util.ArrayList<>();
+
+        for (EnumDirection direction : VALUES) {
+            if (direction.k.isHorizontal) {
+                horizontals.add(direction);
+            } else {
+                verticals.add(direction);
+            }
+        }
+
+        HORIZONTALS = horizontals.toArray(new EnumDirection[0]);
+        VERTICALS = verticals.toArray(new EnumDirection[0]);
+    }
+    // NeonPaper end
 
     private EnumDirection(int i, int j, int k, String s, EnumDirection.EnumAxisDirection enumdirection_enumaxisdirection, EnumDirection.EnumAxis enumdirection_enumaxis, BaseBlockPosition baseblockposition) {
         this.g = i;
@@ -32,6 +59,11 @@ public enum EnumDirection implements INamable {
         this.k = enumdirection_enumaxis;
         this.l = enumdirection_enumaxisdirection;
         this.m = baseblockposition;
+        // NeonPaper start - Optimize
+        this.adjacentX = enumdirection_enumaxis == EnumDirection.EnumAxis.X ? enumdirection_enumaxisdirection.a() : 0;
+        this.adjacentY = enumdirection_enumaxis == EnumDirection.EnumAxis.Y ? enumdirection_enumaxisdirection.a() : 0;
+        this.adjacentZ = enumdirection_enumaxis == EnumDirection.EnumAxis.Z ? enumdirection_enumaxisdirection.a() : 0;
+        // NeonPaper end
     }
 
     public int a() {
@@ -47,7 +79,7 @@ public enum EnumDirection implements INamable {
     }
 
     public EnumDirection opposite() {
-        return fromType1(this.h);
+        return this.opposite; // NeonPaper - Optimize
     }
 
     public EnumDirection e() {
@@ -89,15 +121,15 @@ public enum EnumDirection implements INamable {
     }
 
     public int getAdjacentX() {
-        return this.k == EnumDirection.EnumAxis.X ? this.l.a() : 0;
+        return adjacentX; // NeonPaper - Optimize
     }
 
     public int getAdjacentY() {
-        return this.k == EnumDirection.EnumAxis.Y ? this.l.a() : 0;
+        return adjacentY; // NeonPaper - Optimize
     }
 
     public int getAdjacentZ() {
-        return this.k == EnumDirection.EnumAxis.Z ? this.l.a() : 0;
+        return adjacentZ; // NeonPaper - Optimize
     }
 
     public String j() {
@@ -125,7 +157,7 @@ public enum EnumDirection implements INamable {
     }
 
     public static EnumDirection a(Random random) {
-        return values()[random.nextInt(values().length)];
+        return EnumDirection.n[random.nextInt(6)]; // NeonPaper - Single values array
     }
 
     public String toString() {
@@ -137,7 +169,7 @@ public enum EnumDirection implements INamable {
     }
 
     public static EnumDirection a(EnumDirection.EnumAxisDirection enumdirection_enumaxisdirection, EnumDirection.EnumAxis enumdirection_enumaxis) {
-        EnumDirection[] aenumdirection = values();
+        EnumDirection[] aenumdirection = VALUES; // NeonPaper - Single values array
         int i = aenumdirection.length;
 
         for (int j = 0; j < i; ++j) {
@@ -179,7 +211,8 @@ public enum EnumDirection implements INamable {
                 EnumDirection.o[enumdirection.i] = enumdirection;
             }
 
-            EnumDirection.p.put(enumdirection.j().toLowerCase(Locale.ROOT), enumdirection);
+            enumdirection.opposite = values()[enumdirection.h]; // NeonPaper - Optimize
+            // EnumDirection.p.put(enumdirection.j().toLowerCase(Locale.ROOT), enumdirection); // NeonPaper - Optimize unused
         }
 
     }
@@ -193,10 +226,10 @@ public enum EnumDirection implements INamable {
         public EnumDirection[] a() {
             switch (this) {
             case HORIZONTAL:
-                return new EnumDirection[] { EnumDirection.NORTH, EnumDirection.EAST, EnumDirection.SOUTH, EnumDirection.WEST};
+                return HORIZONTALS; // NeonPaper - Optimize
 
             case VERTICAL:
-                return new EnumDirection[] { EnumDirection.UP, EnumDirection.DOWN};
+                return VERTICALS; // NeonPaper - Optimize
 
             default:
                 throw new Error("Someone\'s been tampering with the universe!");
@@ -204,9 +237,26 @@ public enum EnumDirection implements INamable {
         }
 
         public EnumDirection a(Random random) {
-            EnumDirection[] aenumdirection = this.a();
-
-            return aenumdirection[random.nextInt(aenumdirection.length)];
+            // NeonPaper start - Optimize
+            if (this.ordinal() == 0) {
+                switch (random.nextInt(4)) {
+                    case 0:
+                        return NORTH;
+                    case 1:
+                        return SOUTH;
+                    case 2:
+                        return WEST;
+                    default:
+                        return EAST;
+                }
+            } else {
+                if (random.nextInt(2) == 0) {
+                    return DOWN;
+                } else {
+                    return UP;
+                }
+            }
+            // NeonPaper end
         }
 
         public boolean a(@Nullable EnumDirection enumdirection) {
@@ -228,6 +278,7 @@ public enum EnumDirection implements INamable {
 
         private final int c;
         private final String d;
+        public static final EnumDirection.EnumAxisDirection[] VALUES = values(); // NeonPaper - Single values array
 
         private EnumAxisDirection(int i, String s) {
             this.c = i;
@@ -250,10 +301,18 @@ public enum EnumDirection implements INamable {
         private static final Map<String, EnumDirection.EnumAxis> d = Maps.newHashMap();
         private final String e;
         private final EnumDirection.EnumDirectionLimit f;
+        // NeonPaper start - Optimize
+        public final boolean isVertical;
+        public final boolean isHorizontal;
+        // NeonPaper end
 
         private EnumAxis(String s, EnumDirection.EnumDirectionLimit enumdirection_enumdirectionlimit) {
             this.e = s;
             this.f = enumdirection_enumdirectionlimit;
+            // NeonPaper start - Optimize
+            this.isVertical = enumdirection_enumdirectionlimit == EnumDirection.EnumDirectionLimit.VERTICAL;
+            this.isHorizontal = enumdirection_enumdirectionlimit == EnumDirection.EnumDirectionLimit.HORIZONTAL;
+            // NeonPaper end - Optimize
         }
 
         public String a() {
@@ -261,11 +320,11 @@ public enum EnumDirection implements INamable {
         }
 
         public boolean b() {
-            return this.f == EnumDirection.EnumDirectionLimit.VERTICAL;
+            return isVertical; // NeonPaper - Optimize
         }
 
         public boolean c() {
-            return this.f == EnumDirection.EnumDirectionLimit.HORIZONTAL;
+            return isHorizontal; // NeonPaper - Optimize
         }
 
         public String toString() {
diff --git a/src/main/java/net/minecraft/server/EnumGamemode.java b/src/main/java/net/minecraft/server/EnumGamemode.java
index 22894e718c996352117ef73a336fc73de4175e6f..c25c146dd4baa6d80c2520711fee63b96e64f852 100644
--- a/src/main/java/net/minecraft/server/EnumGamemode.java
+++ b/src/main/java/net/minecraft/server/EnumGamemode.java
@@ -7,6 +7,7 @@ public enum EnumGamemode {
     int f;
     String g;
     String h;
+    public static final EnumGamemode[] VALUES = values(); // NeonPaper - Single values array
 
     private EnumGamemode(int i, String s, String s1) {
         this.f = i;
@@ -23,21 +24,27 @@ public enum EnumGamemode {
     }
 
     public void a(PlayerAbilities playerabilities) {
-        if (this == EnumGamemode.CREATIVE) {
+        // NeonPaper start - Replace 'if' with 'switch'
+        switch (this) {
+        case CREATIVE:
             playerabilities.canFly = true;
             playerabilities.canInstantlyBuild = true;
             playerabilities.isInvulnerable = true;
-        } else if (this == EnumGamemode.SPECTATOR) {
+            break;
+        case SPECTATOR:
             playerabilities.canFly = true;
             playerabilities.canInstantlyBuild = false;
             playerabilities.isInvulnerable = true;
             playerabilities.isFlying = true;
-        } else {
+            break;
+        default:
             playerabilities.canFly = false;
             playerabilities.canInstantlyBuild = false;
             playerabilities.isInvulnerable = false;
             playerabilities.isFlying = false;
+            break;
         }
+        // NeonPaper end
 
         playerabilities.mayBuild = !this.c();
     }
@@ -59,7 +66,7 @@ public enum EnumGamemode {
     }
 
     public static EnumGamemode a(int i, EnumGamemode enumgamemode) {
-        EnumGamemode[] aenumgamemode = values();
+        EnumGamemode[] aenumgamemode = VALUES; // NeonPaper - Single values array
         int j = aenumgamemode.length;
 
         for (int k = 0; k < j; ++k) {
@@ -74,7 +81,7 @@ public enum EnumGamemode {
     }
 
     public static EnumGamemode a(String s, EnumGamemode enumgamemode) {
-        EnumGamemode[] aenumgamemode = values();
+        EnumGamemode[] aenumgamemode = VALUES; // NeonPaper - Single values array
         int i = aenumgamemode.length;
 
         for (int j = 0; j < i; ++j) {
diff --git a/src/main/java/net/minecraft/server/EnumHand.java b/src/main/java/net/minecraft/server/EnumHand.java
index a7df410adbf89dcf5339a666c280609c20fa8e55..e7d1b4cfdf10143ac8f626300ee90a687a13b533 100644
--- a/src/main/java/net/minecraft/server/EnumHand.java
+++ b/src/main/java/net/minecraft/server/EnumHand.java
@@ -3,6 +3,7 @@ package net.minecraft.server;
 public enum EnumHand {
 
     MAIN_HAND, OFF_HAND;
+    public static final EnumHand[] VALUES = values(); // NeonPaper - Single values array
 
     private EnumHand() {}
 }
diff --git a/src/main/java/net/minecraft/server/EnumItemSlot.java b/src/main/java/net/minecraft/server/EnumItemSlot.java
index be5d0bf898f224d94eb85f420560488b28c67cad..6afc7a57bac30c502dfb7c826e5a1869cb896f7d 100644
--- a/src/main/java/net/minecraft/server/EnumItemSlot.java
+++ b/src/main/java/net/minecraft/server/EnumItemSlot.java
@@ -8,6 +8,7 @@ public enum EnumItemSlot {
     private final int h;
     private final int i;
     private final String j;
+    public static final EnumItemSlot[] VALUES = values(); // NeonPaper - Single values array
 
     private EnumItemSlot(EnumItemSlot.Function enumitemslot_function, int i, int j, String s) {
         this.g = enumitemslot_function;
@@ -34,7 +35,7 @@ public enum EnumItemSlot {
     }
 
     public static EnumItemSlot a(String s) {
-        EnumItemSlot[] aenumitemslot = values();
+        EnumItemSlot[] aenumitemslot = VALUES; // NeonPaper - Single values array
         int i = aenumitemslot.length;
 
         for (int j = 0; j < i; ++j) {
diff --git a/src/main/java/net/minecraft/server/EnumParticle.java b/src/main/java/net/minecraft/server/EnumParticle.java
index 6e9afd6786f41870a2d6149a70160a9ed1bd6d29..1a141d5fc6689262275368a014d034260ea734c6 100644
--- a/src/main/java/net/minecraft/server/EnumParticle.java
+++ b/src/main/java/net/minecraft/server/EnumParticle.java
@@ -4,6 +4,7 @@ import com.google.common.collect.Maps;
 import java.util.Map;
 import java.util.Set;
 import javax.annotation.Nullable;
+import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap; // NeonPaper - FastUtil optimization
 
 public enum EnumParticle {
 
@@ -13,8 +14,9 @@ public enum EnumParticle {
     private final int Y;
     private final boolean Z;
     private final int aa;
-    private static final Map<Integer, EnumParticle> ab = Maps.newHashMap();
+    private static final Int2ObjectOpenHashMap<EnumParticle> ab = new Int2ObjectOpenHashMap<>(); // NeonPaper - FastUtil optimization
     private static final Map<String, EnumParticle> ac = Maps.newHashMap();
+    public static final EnumParticle[] VALUES = values(); // NeonPaper - Single values array 
 
     private EnumParticle(String s, int i, boolean flag, int j) {
         this.X = s;
@@ -49,7 +51,7 @@ public enum EnumParticle {
 
     @Nullable
     public static EnumParticle a(int i) {
-        return (EnumParticle) EnumParticle.ab.get(Integer.valueOf(i));
+        return EnumParticle.ab.get(i); // NeonPaper - FastUtil optimization
     }
 
     @Nullable
@@ -64,7 +66,7 @@ public enum EnumParticle {
         for (int j = 0; j < i; ++j) {
             EnumParticle enumparticle = aenumparticle[j];
 
-            EnumParticle.ab.put(Integer.valueOf(enumparticle.c()), enumparticle);
+            EnumParticle.ab.put(enumparticle.c(), enumparticle); // NeonPaper - FastUtil optimization
             EnumParticle.ac.put(enumparticle.b(), enumparticle);
         }
 
diff --git a/src/main/java/net/minecraft/server/Explosion.java b/src/main/java/net/minecraft/server/Explosion.java
index e148901e5349ecd2ba99d359906cff38176d7be6..b3febd3bb119a217595cedccdc1514b52d20f547 100644
--- a/src/main/java/net/minecraft/server/Explosion.java
+++ b/src/main/java/net/minecraft/server/Explosion.java
@@ -168,11 +168,13 @@ public class Explosion {
 
     public void a(boolean flag) {
         this.world.a((EntityHuman) null, this.posX, this.posY, this.posZ, SoundEffects.bV, SoundCategory.BLOCKS, 4.0F, (1.0F + (this.world.random.nextFloat() - this.world.random.nextFloat()) * 0.2F) * 0.7F);
+        /* // NeonPaper start - Clientside particles
         if (this.size >= 2.0F && this.b) {
             this.world.addParticle(EnumParticle.EXPLOSION_HUGE, this.posX, this.posY, this.posZ, 1.0D, 0.0D, 0.0D, new int[0]);
         } else {
             this.world.addParticle(EnumParticle.EXPLOSION_LARGE, this.posX, this.posY, this.posZ, 1.0D, 0.0D, 0.0D, new int[0]);
         }
+        */ // NeonPaper end
 
         Iterator iterator;
         BlockPosition blockposition;
@@ -229,6 +231,7 @@ public class Explosion {
                 IBlockData iblockdata = this.world.getType(blockposition);
                 Block block = iblockdata.getBlock();
 
+                /* // NeonPaper start - Clientside particles
                 if (flag) {
                     double d0 = (double) ((float) blockposition.getX() + this.world.random.nextFloat());
                     double d1 = (double) ((float) blockposition.getY() + this.world.random.nextFloat());
@@ -250,6 +253,7 @@ public class Explosion {
                     this.world.addParticle(EnumParticle.EXPLOSION_NORMAL, (d0 + this.posX) / 2.0D, (d1 + this.posY) / 2.0D, (d2 + this.posZ) / 2.0D, d3, d4, d5, new int[0]);
                     this.world.addParticle(EnumParticle.SMOKE_NORMAL, d0, d1, d2, d3, d4, d5, new int[0]);
                 }
+                */ // NeonPaper end
 
                 if (iblockdata.getMaterial() != Material.AIR) {
                     if (block.a(this)) {
diff --git a/src/main/java/net/minecraft/server/HandshakeListener.java b/src/main/java/net/minecraft/server/HandshakeListener.java
index c583ab7d9a481a7df05acf70dc0d7cc341473bb1..3a972199c72b64b4757211eb7ac1a4267aa09a1b 100644
--- a/src/main/java/net/minecraft/server/HandshakeListener.java
+++ b/src/main/java/net/minecraft/server/HandshakeListener.java
@@ -35,7 +35,10 @@ public class HandshakeListener implements PacketHandshakingInListener {
                 InetAddress address = ((java.net.InetSocketAddress) this.b.getSocketAddress()).getAddress();
 
                 synchronized (throttleTracker) {
-                    if (throttleTracker.containsKey(address) && !"127.0.0.1".equals(address.getHostAddress()) && currentTime - throttleTracker.get(address) < connectionThrottle) {
+                    // NeonPaper start - Optimize map get
+                    Long throttleO = throttleTracker.get(address);
+                    if (throttleO != null && !"127.0.0.1".equals(address.getHostAddress()) && currentTime - throttleO < connectionThrottle) {
+                        // NeonPaper end
                         throttleTracker.put(address, currentTime);
                         chatmessage = new ChatMessage("Connection throttled! Please wait before reconnecting.");
                         this.b.sendPacket(new PacketLoginOutDisconnect(chatmessage));
@@ -64,11 +67,11 @@ public class HandshakeListener implements PacketHandshakingInListener {
             // CraftBukkit end
 
             if (packethandshakinginsetprotocol.b() > 340) {
-                chatmessage = new ChatMessage( java.text.MessageFormat.format( org.spigotmc.SpigotConfig.outdatedServerMessage.replaceAll("'", "''"), "1.12.2" ) ); // Spigot
+                chatmessage = new ChatMessage( java.text.MessageFormat.format( org.apache.commons.lang3.StringUtils.replace( org.spigotmc.SpigotConfig.outdatedServerMessage, "'", "''"), "1.12.2" ) ); // Spigot // NeonPaper - Optimize
                 this.b.sendPacket(new PacketLoginOutDisconnect(chatmessage));
                 this.b.close(chatmessage);
             } else if (packethandshakinginsetprotocol.b() < 340) {
-                chatmessage = new ChatMessage( java.text.MessageFormat.format( org.spigotmc.SpigotConfig.outdatedClientMessage.replaceAll("'", "''"), "1.12.2" ) ); // Spigot
+                chatmessage = new ChatMessage( java.text.MessageFormat.format( org.apache.commons.lang3.StringUtils.replace( org.spigotmc.SpigotConfig.outdatedClientMessage, "'", "''"), "1.12.2" ) ); // Spigot // NeonPaper - Optimize
                 this.b.sendPacket(new PacketLoginOutDisconnect(chatmessage));
                 this.b.close(chatmessage);
             } else {
@@ -100,7 +103,7 @@ public class HandshakeListener implements PacketHandshakingInListener {
                 // Paper end
                 // Spigot Start
                 //if (org.spigotmc.SpigotConfig.bungee) { // Paper - comment out, we check above!
-                    String[] split = packethandshakinginsetprotocol.hostname.split("\00");
+                    String[] split = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens(packethandshakinginsetprotocol.hostname, '\00'); // NeonPaper - Optimize
                     if ( split.length == 3 || split.length == 4 ) {
                         packethandshakinginsetprotocol.hostname = split[0];
                         b.l = new java.net.InetSocketAddress(split[1], ((java.net.InetSocketAddress) b.getSocketAddress()).getPort());
diff --git a/src/main/java/net/minecraft/server/IntCache.java b/src/main/java/net/minecraft/server/IntCache.java
index c725f716ee05773c7e229dc230bcceebbc1147ce..0690c844feec62ac80b3b6ae5583e3aa37616711 100644
--- a/src/main/java/net/minecraft/server/IntCache.java
+++ b/src/main/java/net/minecraft/server/IntCache.java
@@ -29,7 +29,7 @@ public class IntCache {
             IntCache.d.clear();
             IntCache.e.clear();
             aint = new int[IntCache.a];
-            if (e.size() < org.spigotmc.SpigotConfig.intCacheLimit) IntCache.e.add(aint);
+            if (/*e.size()*/0 < org.spigotmc.SpigotConfig.intCacheLimit) IntCache.e.add(aint); // NeonPaper - Optimize
             return aint;
         } else if (IntCache.d.isEmpty()) {
             aint = new int[IntCache.a];
diff --git a/src/main/java/net/minecraft/server/ItemBanner.java b/src/main/java/net/minecraft/server/ItemBanner.java
index 05830651361eb6e9e5922b284aebc38fa7913610..8b0024f13effdd9edb88b360e5d2a1cc979b0a86 100644
--- a/src/main/java/net/minecraft/server/ItemBanner.java
+++ b/src/main/java/net/minecraft/server/ItemBanner.java
@@ -21,7 +21,7 @@ public class ItemBanner extends ItemBlock {
             ItemStack itemstack = entityhuman.b(enumhand);
 
             if (entityhuman.a(blockposition, enumdirection, itemstack) && Blocks.STANDING_BANNER.canPlace(world, blockposition)) {
-                if (world.isClientSide) {
+                if (false) { // NeonPaper - Remove isClientSide check
                     return EnumInteractionResult.SUCCESS;
                 } else {
                     blockposition = flag ? blockposition.down() : blockposition;
@@ -64,7 +64,7 @@ public class ItemBanner extends ItemBlock {
 
     public void a(CreativeModeTab creativemodetab, NonNullList<ItemStack> nonnulllist) {
         if (this.a(creativemodetab)) {
-            EnumColor[] aenumcolor = EnumColor.values();
+            EnumColor[] aenumcolor = EnumColor.VALUES; // NeonPaper - Single values array
             int i = aenumcolor.length;
 
             for (int j = 0; j < i; ++j) {
diff --git a/src/main/java/net/minecraft/server/ItemBlock.java b/src/main/java/net/minecraft/server/ItemBlock.java
index a5730d1c7b3dd06e52cc24dd98dccb9d2a9b3fb5..0b8c48e95867476f18f41cdfef30e3d2297a1438 100644
--- a/src/main/java/net/minecraft/server/ItemBlock.java
+++ b/src/main/java/net/minecraft/server/ItemBlock.java
@@ -34,7 +34,7 @@ public class ItemBlock extends Item {
                     }
                 }
 
-                SoundEffectType soundeffecttype = this.a.getStepSound();
+                // SoundEffectType soundeffecttype = this.a.getStepSound(); // NeonPaper - Unused
 
                 // world.a(entityhuman, blockposition, soundeffecttype.e(), SoundCategory.BLOCKS, (soundeffecttype.a() + 1.0F) / 2.0F, soundeffecttype.b() * 0.8F); // CraftBukkit - SPIGOT-1288
                 itemstack.subtract(1);
@@ -58,7 +58,7 @@ public class ItemBlock extends Item {
                 TileEntity tileentity = world.getTileEntity(blockposition);
 
                 if (tileentity != null) {
-                    if (!world.isClientSide && tileentity.isFilteredNBT() && (entityhuman == null || !entityhuman.isCreativeAndOp())) {
+                    if (tileentity.isFilteredNBT() && (entityhuman == null || !entityhuman.isCreativeAndOp())) { // NeonPaper - Remove isClientSide check
                         return false;
                     }
 
diff --git a/src/main/java/net/minecraft/server/ItemBoat.java b/src/main/java/net/minecraft/server/ItemBoat.java
index 680e16acc34ec228d153bc60dbaab7820dbf5398..69734dca22190aa559ef8b83c587b20b149d3bbb 100644
--- a/src/main/java/net/minecraft/server/ItemBoat.java
+++ b/src/main/java/net/minecraft/server/ItemBoat.java
@@ -72,7 +72,7 @@ public class ItemBoat extends Item {
                 if (!world.getCubes(entityboat, entityboat.getBoundingBox().g(-0.1D)).isEmpty()) {
                     return new InteractionResultWrapper(EnumInteractionResult.FAIL, itemstack);
                 } else {
-                    if (!world.isClientSide) {
+                    if (true) { // NeonPaper - Remove isClientSide check
                         if (!world.addEntity(entityboat)) return new InteractionResultWrapper(EnumInteractionResult.PASS, itemstack); // CraftBukkit
                     }
 
diff --git a/src/main/java/net/minecraft/server/ItemBow.java b/src/main/java/net/minecraft/server/ItemBow.java
index 44e7be58e134a6d66c464010c13d4e73b548c160..9cac4e6dd16d515ff81e6609134326d29d4ab574 100644
--- a/src/main/java/net/minecraft/server/ItemBow.java
+++ b/src/main/java/net/minecraft/server/ItemBow.java
@@ -63,7 +63,7 @@ public class ItemBow extends Item {
                     boolean flag1 = flag && itemstack1.getItem() == Items.ARROW;
 
                     boolean consumeArrow = true; // Paper
-                    if (!world.isClientSide) {
+                    if (true) { // NeonPaper - Remove isClientSide check
                         ItemArrow itemarrow = (ItemArrow) ((ItemArrow) (itemstack1.getItem() instanceof ItemArrow ? itemstack1.getItem() : Items.ARROW));
                         EntityArrow entityarrow = itemarrow.a(world, itemstack1, (EntityLiving) entityhuman);
 
@@ -156,7 +156,7 @@ public class ItemBow extends Item {
         boolean flag = !this.a(entityhuman, itemstack).isEmpty(); // Paper
 
         if (!entityhuman.abilities.canInstantlyBuild && !flag) {
-            return flag ? new InteractionResultWrapper(EnumInteractionResult.PASS, itemstack) : new InteractionResultWrapper(EnumInteractionResult.FAIL, itemstack);
+            return /*flag*/false ? new InteractionResultWrapper(EnumInteractionResult.PASS, itemstack) : new InteractionResultWrapper(EnumInteractionResult.FAIL, itemstack); // NeonPaper - Optimize
         } else {
             entityhuman.c(enumhand);
             return new InteractionResultWrapper(EnumInteractionResult.SUCCESS, itemstack);
diff --git a/src/main/java/net/minecraft/server/ItemBucket.java b/src/main/java/net/minecraft/server/ItemBucket.java
index 41fea5bbfb4ecf239b88b1f095b07cfe5f76f31b..6f65c8881e7423aa1c20ec59764086bdcad87c63 100644
--- a/src/main/java/net/minecraft/server/ItemBucket.java
+++ b/src/main/java/net/minecraft/server/ItemBucket.java
@@ -135,17 +135,21 @@ public class ItemBucket extends Item {
                 }
                 // CraftBukkit end
                 if (world.worldProvider.l() && this.a == Blocks.FLOWING_WATER) {
+                    /* // NeonPaper start - Clientside particles
                     int i = blockposition.getX();
                     int j = blockposition.getY();
                     int k = blockposition.getZ();
+                    */
 
                     world.a(entityhuman, blockposition, SoundEffects.bN, SoundCategory.BLOCKS, 0.5F, 2.6F + (world.random.nextFloat() - world.random.nextFloat()) * 0.8F);
 
+                    /*
                     for (int l = 0; l < 8; ++l) {
                         world.addParticle(EnumParticle.SMOKE_LARGE, (double) i + Math.random(), (double) j + Math.random(), (double) k + Math.random(), 0.0D, 0.0D, 0.0D, new int[0]);
                     }
+                    */ // NeonPaper end
                 } else {
-                    if (!world.isClientSide && (flag || flag1) && !material.isLiquid()) {
+                    if ((flag || flag1) && !material.isLiquid()) { // NeonPaper - Remove isClientSide check
                         world.setAir(blockposition, true);
                     }
 
diff --git a/src/main/java/net/minecraft/server/ItemChorusFruit.java b/src/main/java/net/minecraft/server/ItemChorusFruit.java
index 1fb0748bc4287bd28b69b23752434aeb26f9d7ee..de2224ac799371486cca457d3e6a709d0ebd33e8 100644
--- a/src/main/java/net/minecraft/server/ItemChorusFruit.java
+++ b/src/main/java/net/minecraft/server/ItemChorusFruit.java
@@ -15,7 +15,7 @@ public class ItemChorusFruit extends ItemFood {
     public ItemStack a(ItemStack itemstack, World world, EntityLiving entityliving) {
         ItemStack itemstack1 = super.a(itemstack, world, entityliving);
 
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             double d0 = entityliving.locX;
             double d1 = entityliving.locY;
             double d2 = entityliving.locZ;
diff --git a/src/main/java/net/minecraft/server/ItemDye.java b/src/main/java/net/minecraft/server/ItemDye.java
index 2dc18dbed40bb200ac0152277eab1a6711bcc243..ad9fa67c354621f48c33023c159390101ba71948 100644
--- a/src/main/java/net/minecraft/server/ItemDye.java
+++ b/src/main/java/net/minecraft/server/ItemDye.java
@@ -28,7 +28,7 @@ public class ItemDye extends Item {
 
             if (enumcolor == EnumColor.WHITE) {
                 if (a(itemstack, world, blockposition)) {
-                    if (!world.isClientSide) {
+                    if (true) { // NeonPaper - Remove isClientSide check
                         world.triggerEffect(2005, blockposition, 0);
                     }
 
@@ -69,8 +69,8 @@ public class ItemDye extends Item {
         if (iblockdata.getBlock() instanceof IBlockFragilePlantElement) {
             IBlockFragilePlantElement iblockfragileplantelement = (IBlockFragilePlantElement) iblockdata.getBlock();
 
-            if (iblockfragileplantelement.a(world, blockposition, iblockdata, world.isClientSide)) {
-                if (!world.isClientSide) {
+            if (iblockfragileplantelement.a(world, blockposition, iblockdata, false)) { // NeonPaper - Remove isClientSide check
+                if (true) { // NeonPaper - Remove isClientSide check
                     if (iblockfragileplantelement.a(world, world.random, blockposition, iblockdata)) {
                         iblockfragileplantelement.b(world, world.random, blockposition, iblockdata);
                     }
diff --git a/src/main/java/net/minecraft/server/ItemEnderEye.java b/src/main/java/net/minecraft/server/ItemEnderEye.java
index 5327931ee9532dd6612f49b8feb4cb33f7830648..c3a899aa09939202dc1bd97de2e38cd7c21d7e40 100644
--- a/src/main/java/net/minecraft/server/ItemEnderEye.java
+++ b/src/main/java/net/minecraft/server/ItemEnderEye.java
@@ -11,13 +11,14 @@ public class ItemEnderEye extends Item {
         ItemStack itemstack = entityhuman.b(enumhand);
 
         if (entityhuman.a(blockposition.shift(enumdirection), enumdirection, itemstack) && iblockdata.getBlock() == Blocks.END_PORTAL_FRAME && !((Boolean) iblockdata.get(BlockEnderPortalFrame.EYE)).booleanValue()) {
-            if (world.isClientSide) {
+            if (false) { // NeonPaper - Remove isClientSide check
                 return EnumInteractionResult.SUCCESS;
             } else {
                 world.setTypeAndData(blockposition, iblockdata.set(BlockEnderPortalFrame.EYE, Boolean.valueOf(true)), 2);
                 world.updateAdjacentComparators(blockposition, Blocks.END_PORTAL_FRAME);
                 itemstack.subtract(1);
 
+                /* // NeonPaper start - Clientside particles
                 for (int i = 0; i < 16; ++i) {
                     double d0 = (double) ((float) blockposition.getX() + (5.0F + ItemEnderEye.j.nextFloat() * 6.0F) / 16.0F);
                     double d1 = (double) ((float) blockposition.getY() + 0.8125F);
@@ -28,6 +29,7 @@ public class ItemEnderEye extends Item {
 
                     world.addParticle(EnumParticle.SMOKE_NORMAL, d0, d1, d2, 0.0D, 0.0D, 0.0D, new int[0]);
                 }
+                */ // NeonPaper end
 
                 world.a((EntityHuman) null, blockposition, SoundEffects.bp, SoundCategory.BLOCKS, 1.0F, 1.0F);
                 ShapeDetector.ShapeDetectorCollection shapedetector_shapedetectorcollection = BlockEnderPortalFrame.e().a(world, blockposition);
@@ -59,7 +61,7 @@ public class ItemEnderEye extends Item {
             return new InteractionResultWrapper(EnumInteractionResult.PASS, itemstack);
         } else {
             entityhuman.c(enumhand);
-            if (!world.isClientSide) {
+            if (true) { // NeonPaper - Remove isClientSide check
                 BlockPosition blockposition = ((WorldServer) world).getChunkProviderServer().a(world, "Stronghold", new BlockPosition(entityhuman), false);
 
                 if (blockposition != null) {
diff --git a/src/main/java/net/minecraft/server/ItemEnderPearl.java b/src/main/java/net/minecraft/server/ItemEnderPearl.java
index a0bf985da7d27089047f9073f8364947cd4f09d9..65e53127b97a7476eaf3c778b488a0fcd226c83e 100644
--- a/src/main/java/net/minecraft/server/ItemEnderPearl.java
+++ b/src/main/java/net/minecraft/server/ItemEnderPearl.java
@@ -11,7 +11,7 @@ public class ItemEnderPearl extends Item {
         ItemStack itemstack = entityhuman.b(enumhand);
 
         // CraftBukkit start - change order
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             EntityEnderPearl entityenderpearl = new EntityEnderPearl(world, entityhuman);
 
             entityenderpearl.a(entityhuman, entityhuman.pitch, entityhuman.yaw, 0.0F, 1.5F, 1.0F);
diff --git a/src/main/java/net/minecraft/server/ItemFireball.java b/src/main/java/net/minecraft/server/ItemFireball.java
index f51e8e41e7c349edc8bb0f08b57a6b950053e590..f61a39de44e9ec417a007432dc7fa76c89905ffd 100644
--- a/src/main/java/net/minecraft/server/ItemFireball.java
+++ b/src/main/java/net/minecraft/server/ItemFireball.java
@@ -7,7 +7,7 @@ public class ItemFireball extends Item {
     }
 
     public EnumInteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
-        if (world.isClientSide) {
+        if (false) { // NeonPaper - Remove isClientSide check
             return EnumInteractionResult.SUCCESS;
         } else {
             blockposition = blockposition.shift(enumdirection);
diff --git a/src/main/java/net/minecraft/server/ItemFireworks.java b/src/main/java/net/minecraft/server/ItemFireworks.java
index 44a997215912ebafcdc352b47a1610aff00f35f2..ade1db53457b96bbfd381fe4f43c8459e53dd813 100644
--- a/src/main/java/net/minecraft/server/ItemFireworks.java
+++ b/src/main/java/net/minecraft/server/ItemFireworks.java
@@ -5,7 +5,7 @@ public class ItemFireworks extends Item {
     public ItemFireworks() {}
 
     public EnumInteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             ItemStack itemstack = entityhuman.b(enumhand);
             EntityFireworks entityfireworks = new EntityFireworks(world, (double) ((float) blockposition.getX() + f), (double) ((float) blockposition.getY() + f1), (double) ((float) blockposition.getZ() + f2), itemstack);
 
@@ -23,7 +23,7 @@ public class ItemFireworks extends Item {
         if (entityhuman.cP()) {
             ItemStack itemstack = entityhuman.b(enumhand);
 
-            if (!world.isClientSide) {
+            if (true) { // NeonPaper - Remove isClientSide check
                 EntityFireworks entityfireworks = new EntityFireworks(world, itemstack, entityhuman);
 
                 entityfireworks.spawningEntity = entityhuman.getUniqueID(); // Paper
diff --git a/src/main/java/net/minecraft/server/ItemFishingRod.java b/src/main/java/net/minecraft/server/ItemFishingRod.java
index b425baf074e598c047a0b34782a706f53977ad6f..e1ff12f4bd09a587accaafbe461c4020cbe1c0fb 100644
--- a/src/main/java/net/minecraft/server/ItemFishingRod.java
+++ b/src/main/java/net/minecraft/server/ItemFishingRod.java
@@ -23,7 +23,7 @@ public class ItemFishingRod extends Item {
             world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.J, SoundCategory.NEUTRAL, 1.0F, 0.4F / (ItemFishingRod.j.nextFloat() * 0.4F + 0.8F));
         } else {
             // world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.L, SoundCategory.NEUTRAL, 0.5F, 0.4F / (ItemFishingRod.j.nextFloat() * 0.4F + 0.8F)); // CraftBukkit - moved down
-            if (!world.isClientSide) {
+            if (true) { // NeonPaper - Remove isClientSide check
                 EntityFishingHook entityfishinghook = new EntityFishingHook(world, entityhuman);
                 int j = EnchantmentManager.c(itemstack);
 
diff --git a/src/main/java/net/minecraft/server/ItemGoldenApple.java b/src/main/java/net/minecraft/server/ItemGoldenApple.java
index ec7d147a59216cf2c133ef8761622dbc2d50fc65..31c07906fa73bbc5666ad6897ba11a4a2207adfc 100644
--- a/src/main/java/net/minecraft/server/ItemGoldenApple.java
+++ b/src/main/java/net/minecraft/server/ItemGoldenApple.java
@@ -12,7 +12,7 @@ public class ItemGoldenApple extends ItemFood {
     }
 
     protected void a(ItemStack itemstack, World world, EntityHuman entityhuman) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             if (itemstack.getData() > 0) {
                 entityhuman.addEffect(new MobEffect(MobEffects.REGENERATION, 400, 1));
                 entityhuman.addEffect(new MobEffect(MobEffects.RESISTANCE, 6000, 0));
diff --git a/src/main/java/net/minecraft/server/ItemHanging.java b/src/main/java/net/minecraft/server/ItemHanging.java
index 53727459a5fa20edbea383f3d2c34d1729e6608f..824b26704f4d36a9ebd6e9af67667d01351b8b84 100644
--- a/src/main/java/net/minecraft/server/ItemHanging.java
+++ b/src/main/java/net/minecraft/server/ItemHanging.java
@@ -23,9 +23,9 @@ public class ItemHanging extends Item {
             EntityHanging entityhanging = this.a(world, blockposition1, enumdirection);
 
             if (entityhanging != null && entityhanging.survives()) {
-                if (!world.isClientSide) {
+                if (true) { // NeonPaper - Remove isClientSide check
                     // CraftBukkit start - fire HangingPlaceEvent
-                    Player who = (entityhuman == null) ? null : (Player) entityhuman.getBukkitEntity();
+                    Player who = (/*entityhuman == null*/false) ? null : (Player) entityhuman.getBukkitEntity(); // NeonPaper - Optimize
                     org.bukkit.block.Block blockClicked = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
                     org.bukkit.block.BlockFace blockFace = org.bukkit.craftbukkit.block.CraftBlock.notchToBlockFace(enumdirection);
 
diff --git a/src/main/java/net/minecraft/server/ItemLeash.java b/src/main/java/net/minecraft/server/ItemLeash.java
index bec8ae3cd2d076cba833a46616c012a152a228ad..750a34fcd0ea269bf57c464bb4c187e60cc5301b 100644
--- a/src/main/java/net/minecraft/server/ItemLeash.java
+++ b/src/main/java/net/minecraft/server/ItemLeash.java
@@ -17,7 +17,7 @@ public class ItemLeash extends Item {
         if (!(block instanceof BlockFence)) {
             return EnumInteractionResult.PASS;
         } else {
-            if (!world.isClientSide) {
+            if (true) { // NeonPaper - Remove isClientSide check
                 a(entityhuman, world, blockposition);
             }
 
diff --git a/src/main/java/net/minecraft/server/ItemMinecart.java b/src/main/java/net/minecraft/server/ItemMinecart.java
index ac807ced53092d17753a30de4c799bbce755d58d..525dee550be473ca42a0005eb378db4f19fa5c37 100644
--- a/src/main/java/net/minecraft/server/ItemMinecart.java
+++ b/src/main/java/net/minecraft/server/ItemMinecart.java
@@ -103,7 +103,7 @@ public class ItemMinecart extends Item {
         } else {
             ItemStack itemstack = entityhuman.b(enumhand);
 
-            if (!world.isClientSide) {
+            if (true) { // NeonPaper - Remove isClientSide check
                 BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition = iblockdata.getBlock() instanceof BlockMinecartTrackAbstract ? (BlockMinecartTrackAbstract.EnumTrackPosition) iblockdata.get(((BlockMinecartTrackAbstract) iblockdata.getBlock()).g()) : BlockMinecartTrackAbstract.EnumTrackPosition.NORTH_SOUTH;
                 double d0 = 0.0D;
 
diff --git a/src/main/java/net/minecraft/server/ItemMonsterEgg.java b/src/main/java/net/minecraft/server/ItemMonsterEgg.java
index 5a08f6b4e10f064d572bc35bf7f3750d98b096cc..a39c91f8ccc3f4904ced77109b744b14fb0c0e1a 100644
--- a/src/main/java/net/minecraft/server/ItemMonsterEgg.java
+++ b/src/main/java/net/minecraft/server/ItemMonsterEgg.java
@@ -25,7 +25,7 @@ public class ItemMonsterEgg extends Item {
     public EnumInteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
         ItemStack itemstack = entityhuman.b(enumhand);
 
-        if (world.isClientSide) {
+        if (false) { // NeonPaper - Remove isClientSide check
             return EnumInteractionResult.SUCCESS;
         } else if (!entityhuman.a(blockposition.shift(enumdirection), enumdirection, itemstack)) {
             return EnumInteractionResult.FAIL;
@@ -95,7 +95,7 @@ public class ItemMonsterEgg extends Item {
             NBTTagCompound nbttagcompound = itemstack.getTag();
 
             if (nbttagcompound != null && nbttagcompound.hasKeyOfType("EntityTag", 10)) {
-                if (!world.isClientSide && entity.bC() && (entityhuman == null || !minecraftserver.getPlayerList().isOp(entityhuman.getProfile()))) {
+                if (entity.bC() && (entityhuman == null || !minecraftserver.getPlayerList().isOp(entityhuman.getProfile()))) { // NeonPaper - Remove isClientSide check
                     return;
                 }
 
@@ -120,7 +120,7 @@ public class ItemMonsterEgg extends Item {
     public InteractionResultWrapper<ItemStack> a(World world, EntityHuman entityhuman, EnumHand enumhand) {
         ItemStack itemstack = entityhuman.b(enumhand);
 
-        if (world.isClientSide) {
+        if (false) { // NeonPaper - Remove isClientSide check
             return new InteractionResultWrapper(EnumInteractionResult.PASS, itemstack);
         } else {
             MovingObjectPosition movingobjectposition = this.a(world, entityhuman, true);
diff --git a/src/main/java/net/minecraft/server/ItemRecord.java b/src/main/java/net/minecraft/server/ItemRecord.java
index 23363cb1c2e86963e286b538e3403a6dad4a4923..44d6d232d4d2bccf0780e356f1514e01a4c7c468 100644
--- a/src/main/java/net/minecraft/server/ItemRecord.java
+++ b/src/main/java/net/minecraft/server/ItemRecord.java
@@ -5,7 +5,7 @@ import java.util.Map;
 
 public class ItemRecord extends Item {
 
-    private static final Map<SoundEffect, ItemRecord> a = Maps.newHashMap();
+    // private static final Map<SoundEffect, ItemRecord> a = Maps.newHashMap(); // NeonPaper - Optimize unused
     private final SoundEffect b;
     private final String c;
 
@@ -14,14 +14,14 @@ public class ItemRecord extends Item {
         this.b = soundeffect;
         this.maxStackSize = 1;
         this.b(CreativeModeTab.f);
-        ItemRecord.a.put(this.b, this);
+        // ItemRecord.a.put(this.b, this); // NeonPaper - Optimize unused
     }
 
     public EnumInteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
         IBlockData iblockdata = world.getType(blockposition);
 
         if (iblockdata.getBlock() == Blocks.JUKEBOX && !((Boolean) iblockdata.get(BlockJukeBox.HAS_RECORD)).booleanValue()) {
-            if (!world.isClientSide) {
+            if (true) { // NeonPaper - Remove isClientSide check
                 if (true) return EnumInteractionResult.SUCCESS; // CraftBukkit - handled in ItemStack
                 ItemStack itemstack = entityhuman.b(enumhand);
 
diff --git a/src/main/java/net/minecraft/server/ItemSkull.java b/src/main/java/net/minecraft/server/ItemSkull.java
index 299a1a15e29f86ed52680bb01312982e22b7580b..beeaec95eca074c80881e46894ff14f071b20641 100644
--- a/src/main/java/net/minecraft/server/ItemSkull.java
+++ b/src/main/java/net/minecraft/server/ItemSkull.java
@@ -33,7 +33,7 @@ public class ItemSkull extends Item {
             ItemStack itemstack = entityhuman.b(enumhand);
 
             if (entityhuman.a(blockposition, enumdirection, itemstack) && Blocks.SKULL.canPlace(world, blockposition)) {
-                if (world.isClientSide) {
+                if (false) { // NeonPaper - Remove isClientSide check
                     return EnumInteractionResult.SUCCESS;
                 } else {
                     // Spigot Start
diff --git a/src/main/java/net/minecraft/server/ItemSnowball.java b/src/main/java/net/minecraft/server/ItemSnowball.java
index 2e73c93aa0091d91c148efd1f034421d21730855..6bb1106d9dc6ce8fac045f38a0f19041b6652d6b 100644
--- a/src/main/java/net/minecraft/server/ItemSnowball.java
+++ b/src/main/java/net/minecraft/server/ItemSnowball.java
@@ -18,7 +18,7 @@ public class ItemSnowball extends Item {
 
         world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.hp, SoundCategory.NEUTRAL, 0.5F, 0.4F / (ItemSnowball.j.nextFloat() * 0.4F + 0.8F));
         */
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             EntitySnowball entitysnowball = new EntitySnowball(world, entityhuman);
 
             entitysnowball.a(entityhuman, entityhuman.pitch, entityhuman.yaw, 0.0F, 1.5F, 1.0F);
diff --git a/src/main/java/net/minecraft/server/ItemStack.java b/src/main/java/net/minecraft/server/ItemStack.java
index c5f5fa4e74fb1564c638f8d586f15d9606ae372c..34529e40b622e15870f6cf474b31b2368a674879 100644
--- a/src/main/java/net/minecraft/server/ItemStack.java
+++ b/src/main/java/net/minecraft/server/ItemStack.java
@@ -502,7 +502,7 @@ public final class ItemStack {
     public ItemStack cloneItemStack() {
         ItemStack itemstack = new ItemStack(this.item, this.count, this.damage, false); // CraftBukkit
 
-        itemstack.d(this.D());
+        // itemstack.d(this.D()); // NeonPaper - Clientside animation
         if (this.tag != null) {
             itemstack.tag = this.tag.g();
         }
@@ -559,9 +559,11 @@ public final class ItemStack {
     }
 
     public void a(World world, Entity entity, int i, boolean flag) {
+        /* // NeonPaper start - Clientside animation
         if (this.d > 0) {
             --this.d;
         }
+        */ // NeonPaper end
 
         if (this.item != null) {
             this.item.a(this, world, entity, i, flag);
diff --git a/src/main/java/net/minecraft/server/ItemTool.java b/src/main/java/net/minecraft/server/ItemTool.java
index c8b64c01c05f4c3f163939393572dbc7744d6eca..ce2123f345fb53e15d6d4a4a276ed09256803acd 100644
--- a/src/main/java/net/minecraft/server/ItemTool.java
+++ b/src/main/java/net/minecraft/server/ItemTool.java
@@ -37,7 +37,7 @@ public class ItemTool extends Item {
     }
 
     public boolean a(ItemStack itemstack, World world, IBlockData iblockdata, BlockPosition blockposition, EntityLiving entityliving) {
-        if (!world.isClientSide && (double) iblockdata.b(world, blockposition) != 0.0D) {
+        if ((double) iblockdata.b(world, blockposition) != 0.0D) { // NeonPaper - Remove isClientSide check
             itemstack.damage(1, entityliving);
         }
 
diff --git a/src/main/java/net/minecraft/server/ItemWaterLily.java b/src/main/java/net/minecraft/server/ItemWaterLily.java
index 2af53fe0585cea732b67acafecd2ce913eb8c512..8c149bab60d628c3eb45c87113ef924cb79be1bf 100644
--- a/src/main/java/net/minecraft/server/ItemWaterLily.java
+++ b/src/main/java/net/minecraft/server/ItemWaterLily.java
@@ -28,7 +28,7 @@ public class ItemWaterLily extends ItemWithAuxData {
                     org.bukkit.block.BlockState blockstate = org.bukkit.craftbukkit.block.CraftBlockState.getBlockState(world, blockposition1.getX(), blockposition1.getY(), blockposition1.getZ());
                     world.setTypeAndData(blockposition1, Blocks.WATERLILY.getBlockData(), 11);
                     org.bukkit.event.block.BlockPlaceEvent placeEvent = org.bukkit.craftbukkit.event.CraftEventFactory.callBlockPlaceEvent(world, entityhuman, enumhand, blockstate, blockposition.getX(), blockposition.getY(), blockposition.getZ());
-                    if (placeEvent != null && (placeEvent.isCancelled() || !placeEvent.canBuild())) {
+                    if (/*placeEvent != null*/true && (placeEvent.isCancelled() || !placeEvent.canBuild())) { // NeonPaper - Optimize
                         blockstate.update(true, false);
                         return new InteractionResultWrapper(EnumInteractionResult.PASS, itemstack);
                     }
diff --git a/src/main/java/net/minecraft/server/ItemWorldMap.java b/src/main/java/net/minecraft/server/ItemWorldMap.java
index e0799ff00b807ff31f795f7578eb948a004aafdc..9269178738a789764db89980806f93d5c8fc8915 100644
--- a/src/main/java/net/minecraft/server/ItemWorldMap.java
+++ b/src/main/java/net/minecraft/server/ItemWorldMap.java
@@ -39,7 +39,7 @@ public class ItemWorldMap extends ItemWorldMapBase {
         String s = "map_" + itemstack.getData();
         WorldMap worldmap = (WorldMap) worldMain.a(WorldMap.class, s); // CraftBukkit - use primary world for maps
 
-        if (worldmap == null && !world.isClientSide) {
+        if (worldmap == null) { // NeonPaper - Remove isClientSide check
             itemstack.setData(worldMain.b("map")); // CraftBukkit - use primary world for maps
             s = "map_" + itemstack.getData();
             worldmap = new WorldMap(s);
@@ -284,7 +284,7 @@ public class ItemWorldMap extends ItemWorldMapBase {
     }
 
     public void a(ItemStack itemstack, World world, Entity entity, int i, boolean flag) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             WorldMap worldmap = this.getSavedMap(itemstack, world);
 
             if (entity instanceof EntityHuman) {
diff --git a/src/main/java/net/minecraft/server/ItemWrittenBook.java b/src/main/java/net/minecraft/server/ItemWrittenBook.java
index 0e91a152e6fbbc5558bf917c0fbd3dff3d595523..55208c44cb53ce9cc63f76240b0e6a145f6e39b7 100644
--- a/src/main/java/net/minecraft/server/ItemWrittenBook.java
+++ b/src/main/java/net/minecraft/server/ItemWrittenBook.java
@@ -38,7 +38,7 @@ public class ItemWrittenBook extends Item {
     public InteractionResultWrapper<ItemStack> a(World world, EntityHuman entityhuman, EnumHand enumhand) {
         ItemStack itemstack = entityhuman.b(enumhand);
 
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             this.a(itemstack, entityhuman);
         }
 
diff --git a/src/main/java/net/minecraft/server/LegacyPingHandler.java b/src/main/java/net/minecraft/server/LegacyPingHandler.java
index 2762bcc2eb761f0c7153234031f25094e22bec1d..3dfad8778e533edae9291b9d82ed35edbd61630f 100644
--- a/src/main/java/net/minecraft/server/LegacyPingHandler.java
+++ b/src/main/java/net/minecraft/server/LegacyPingHandler.java
@@ -232,7 +232,7 @@ public class LegacyPingHandler extends ChannelInboundHandlerAdapter {
         int i = achar.length;
 
         for (int j = 0; j < i; ++j) {
-            char c0 = achar1[j];
+            char c0 = achar[j]; // NeonPaper - Inline
 
             bytebuf.writeChar(c0);
         }
diff --git a/src/main/java/net/minecraft/server/LoginListener.java b/src/main/java/net/minecraft/server/LoginListener.java
index be43d9292af30f81705c41c6144bc76d08b6eef0..29a2e7e26da789cabaa0b58d0ccad8851df7e4a5 100644
--- a/src/main/java/net/minecraft/server/LoginListener.java
+++ b/src/main/java/net/minecraft/server/LoginListener.java
@@ -242,7 +242,7 @@ public class LoginListener implements PacketLoginInListener, ITickable {
                             }
 
                             new LoginHandler().fireEvents();
-                        } else if (LoginListener.this.server.R()) {
+                        } else if (/*LoginListener.this.server.R()*/false) { // NeonPaper - Remove singleplayer code
                             LoginListener.c.warn("Failed to verify username but will let them in anyway!");
                             LoginListener.this.i = LoginListener.this.a(gameprofile);
                             LoginListener.this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
@@ -251,7 +251,7 @@ public class LoginListener implements PacketLoginInListener, ITickable {
                             LoginListener.c.error("Username \'{}\' tried to join with an invalid session", gameprofile.getName());
                         }
                     } catch (AuthenticationUnavailableException authenticationunavailableexception) {
-                        if (LoginListener.this.server.R()) {
+                        if (/*LoginListener.this.server.R()*/false) { // NeonPaper - Remove singleplayer code
                             LoginListener.c.warn("Authentication servers are down but will let them in anyway!");
                             LoginListener.this.i = LoginListener.this.a(gameprofile);
                             LoginListener.this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
diff --git a/src/main/java/net/minecraft/server/MethodProfiler.java b/src/main/java/net/minecraft/server/MethodProfiler.java
index 480e2ca972bc9dedc6d77c7f2a2621e01c51f21c..3023ec12bbae5bcc32ecadce0f66d4ba82aa06f5 100644
--- a/src/main/java/net/minecraft/server/MethodProfiler.java
+++ b/src/main/java/net/minecraft/server/MethodProfiler.java
@@ -13,6 +13,7 @@ import org.apache.logging.log4j.Logger;
 
 public class MethodProfiler {
 
+    /* // NeonPaper start - Remove MethodProfiler
     public static final boolean ENABLED = Boolean.getBoolean("enableDebugMethodProfiler"); // CraftBukkit - disable unless specified in JVM arguments
     private static final Logger b = LogManager.getLogger();
     private final List<String> c = Lists.newArrayList();
@@ -20,17 +21,21 @@ public class MethodProfiler {
     public boolean a;
     private String e = "";
     private final Map<String, Long> f = Maps.newHashMap();
+    */ // NeonPaper end
 
     public MethodProfiler() {}
 
     public void a() {
+        /* // NeonPaper start - Remove MethodProfiler
         if (!ENABLED) return;  // CraftBukkit
         this.f.clear();
         this.e = "";
         this.c.clear();
+        */ // NeonPaper end
     }
 
     public void a(String s) {
+        /* // NeonPaper start - Remove MethodProfiler
         if (!ENABLED) return;  // CraftBukkit
         if (this.a) {
             if (!this.e.isEmpty()) {
@@ -41,16 +46,20 @@ public class MethodProfiler {
             this.c.add(this.e);
             this.d.add(Long.valueOf(System.nanoTime()));
         }
+        */ // NeonPaper end
     }
 
     public void a(Supplier<String> supplier) {
+        /* // NeonPaper start - Remove MethodProfiler
         if (!ENABLED) return;  // CraftBukkit
         if (this.a) {
             this.a((String) supplier.get());
         }
+        */ // NeonPaper end
     }
 
     public void b() {
+        /* // NeonPaper start - Remove MethodProfiler
         if (!ENABLED) return;  // CraftBukkit
         if (this.a) {
             long i = System.nanoTime();
@@ -71,9 +80,13 @@ public class MethodProfiler {
 
             this.e = this.c.isEmpty() ? "" : (String) this.c.get(this.c.size() - 1);
         }
+        */ // NeonPaper end
     }
 
     public List<MethodProfiler.ProfilerInfo> b(String s) {
+        // NeonPaper start - Remove MethodProfiler
+        return Collections.emptyList();
+        /*
         if (!ENABLED || !this.a) {  // CraftBukkit
             return Collections.emptyList();
         } else {
@@ -137,37 +150,54 @@ public class MethodProfiler {
             arraylist.add(0, new MethodProfiler.ProfilerInfo(s, 100.0D, (double) k * 100.0D / (double) i));
             return arraylist;
         }
+        */ // NeonPaper end
     }
 
     public void c(String s) {
+        /* // NeonPaper start - Remove MethodProfiler
         if (!ENABLED) return;  // CraftBukkit
         this.b();
         this.a(s);
+        */ // NeonPaper end
     }
 
     public String c() {
+        // NeonPaper start - Remove MethodProfiler
+        return "[REMOVED]";
+        /*
         if (!ENABLED) return "[DISABLED]";  // CraftBukkit
         return this.c.isEmpty() ? "[UNKNOWN]" : (String) this.c.get(this.c.size() - 1);
+        */ // NeonPaper end
     }
 
     public static final class ProfilerInfo implements Comparable<MethodProfiler.ProfilerInfo> {
 
+        /* // NeonPaper start - Remove MethodProfiler
         public double a;
         public double b;
         public String c;
+        */ // NeonPaper end
 
         public ProfilerInfo(String s, double d0, double d1) {
+            /* // NeonPaper start - Remove MethodProfiler
             this.c = s;
             this.a = d0;
             this.b = d1;
+            */ // NeonPaper end
         }
 
+        /* // NeonPaper start - Remove MethodProfiler
         public int a(MethodProfiler.ProfilerInfo methodprofiler_profilerinfo) {
             return methodprofiler_profilerinfo.a < this.a ? -1 : (methodprofiler_profilerinfo.a > this.a ? 1 : methodprofiler_profilerinfo.c.compareTo(this.c));
         }
+        */ // NeonPaper end
 
         public int compareTo(MethodProfiler.ProfilerInfo object) { // CraftBukkit: decompile error
+            // NeonPaper start - Remove MethodProfiler
+            return 0;
+            /*
             return this.a((MethodProfiler.ProfilerInfo) object);
+            */ // NeonPaper end
         }
     }
 }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 1e8b3ac0bc7293ed0b6bfa258ead8c44aa4e5521..9e3d3228a02600118a4805feb6530ef9cceff578 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -88,7 +88,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
     public final long[] h = new long[100];
     public long[][] i;
     private KeyPair I;
-    private String J;
+    // private String J; // NeonPaper - Remove singleplayer code
     private String K;
     private boolean demoMode;
     private boolean N;
@@ -328,7 +328,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
             this.server.getPluginManager().callEvent(new org.bukkit.event.world.WorldInitEvent(world.getWorld()));
 
             world.addIWorldAccess(new WorldManager(this, world));
-            if (!this.R()) {
+            if (/*!this.R()*/true) { // NeonPaper - Remove singleplayer code
                 world.getWorldData().setGameType(this.getGamemode());
             }
 
@@ -737,7 +737,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
                 ImageIO.write(bufferedimage, "PNG", new ByteBufOutputStream(bytebuf));
                 /*ByteBuf */ bytebuf1 = Base64.encode(bytebuf); // Paper - cleanup favicon bytebuf
 
-                serverping.setFavicon("data:image/png;base64," + bytebuf1.toString(StandardCharsets.UTF_8).replace("\n", "")); // Paper - Fix encoding for 1.13+ clients, still compat w/ 1.12 clients
+                serverping.setFavicon("data:image/png;base64," + org.apache.commons.lang3.StringUtils.remove(bytebuf1.toString(StandardCharsets.UTF_8), '\n')); // Paper - Fix encoding for 1.13+ clients, still compat w/ 1.12 clients // NeonPaper - Optimize
             } catch (Exception exception) {
                 MinecraftServer.LOGGER.error("Couldn\'t load server icon", exception);
             } finally {
@@ -768,8 +768,10 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
         ++this.ticks;
         if (this.T) {
             this.T = false;
+            /* // NeonPaper start - Remove MethodProfiler
             this.methodProfiler.a = true;
             this.methodProfiler.a();
+            */ // NeonPaper end
         }
 
         this.methodProfiler.a("root");
@@ -834,7 +836,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
         this.methodProfiler.b();
 
         org.spigotmc.WatchdogThread.tick(); // Spigot
-        PaperLightingQueue.processQueue(startTime); // Paper
+        PaperLightingQueue.processQueue(i); // Paper // NeonPaper - Inline
         this.slackActivityAccountant.tickEnded(tickNanos); // Spigot
         co.aikar.timings.TimingsManager.FULL_SERVER_TICK.stopTiming(); // Paper
     }
@@ -1167,7 +1169,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
     public CrashReport b(CrashReport crashreport) {
         crashreport.g().a("Profiler Position", new CrashReportCallable() {
             public String a() throws Exception {
-                return MinecraftServer.this.methodProfiler.a ? MinecraftServer.this.methodProfiler.c() : "N/A (disabled)";
+                return "N/A (disabled)"; // NeonPaper - Remove MethodProfiler
             }
 
             public Object call() throws Exception {
@@ -1272,15 +1274,15 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
     }
 
     public String Q() {
-        return this.J;
+        return /*this.J*/null; // NeonPaper - Remove singleplayer code
     }
 
     public void i(String s) {
-        this.J = s;
+        // this.J = s; // NeonPaper - Remove singleplayer code
     }
 
     public boolean R() {
-        return this.J != null;
+        return /*this.J != null*/false; // NeonPaper - Remove singleplayer code
     }
 
     public String S() {
@@ -1308,7 +1310,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
                 if (worldserver.getWorldData().isHardcore()) {
                     worldserver.getWorldData().setDifficulty(EnumDifficulty.HARD);
                     worldserver.setSpawnFlags(true, true);
-                } else if (this.R()) {
+                } else if (/*this.R()*/false) { // NeonPaper - Remove singleplayer code
                     worldserver.getWorldData().setDifficulty(enumdifficulty);
                     worldserver.setSpawnFlags(worldserver.getDifficulty() != EnumDifficulty.PEACEFUL, true);
                 } else {
diff --git a/src/main/java/net/minecraft/server/MobEffectList.java b/src/main/java/net/minecraft/server/MobEffectList.java
index 461fad973a261f9a72aea3976708bd37ce52d18e..5d8d9746e7fcc361ec72d5ea79ef4da4a68f010f 100644
--- a/src/main/java/net/minecraft/server/MobEffectList.java
+++ b/src/main/java/net/minecraft/server/MobEffectList.java
@@ -67,7 +67,7 @@ public class MobEffectList {
         } else if (this == MobEffects.HUNGER && entityliving instanceof EntityHuman) {
             ((EntityHuman) entityliving).applyExhaustion(0.005F * (float) (i + 1));
         } else if (this == MobEffects.SATURATION && entityliving instanceof EntityHuman) {
-            if (!entityliving.world.isClientSide) {
+            if (true) { // NeonPaper - Remove isClientSide check
                 // CraftBukkit start
                 EntityHuman entityhuman = (EntityHuman) entityliving;
                 int oldFoodLevel = entityhuman.getFoodData().foodLevel;
diff --git a/src/main/java/net/minecraft/server/MobSpawnerAbstract.java b/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
index 94d0b8a3dba5c69736eee336bcdd3f0325629d4d..ba84d528604941bfb9a91a39b1bb9caac29c4b6e 100644
--- a/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
+++ b/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
@@ -55,7 +55,7 @@ public abstract class MobSpawnerAbstract {
         } else {
             BlockPosition blockposition = this.b();
 
-            if (this.a().isClientSide) {
+            if (false) { // NeonPaper - Remove isClientSide check
                 double d0 = (double) ((float) blockposition.getX() + this.a().random.nextFloat());
                 double d1 = (double) ((float) blockposition.getY() + this.a().random.nextFloat());
                 double d2 = (double) ((float) blockposition.getZ() + this.a().random.nextFloat());
@@ -218,9 +218,7 @@ public abstract class MobSpawnerAbstract {
     public NBTTagCompound b(NBTTagCompound nbttagcompound) {
         MinecraftKey minecraftkey = this.getMobName();
 
-        if (minecraftkey == null) {
-            return nbttagcompound;
-        } else {
+        if (minecraftkey != null) {
             nbttagcompound.setShort("Delay", (short) this.spawnDelay);
             nbttagcompound.setShort("MinSpawnDelay", (short) this.minSpawnDelay);
             nbttagcompound.setShort("MaxSpawnDelay", (short) this.maxSpawnDelay);
@@ -244,12 +242,13 @@ public abstract class MobSpawnerAbstract {
             }
 
             nbttagcompound.set("SpawnPotentials", nbttaglist);
-            return nbttagcompound;
         }
+
+        return nbttagcompound;
     }
 
     public boolean b(int i) {
-        if (i == 1 && this.a().isClientSide) {
+        if (false) { // NeonPaper - Remove isClientSide check
             this.spawnDelay = this.minSpawnDelay;
             return true;
         } else {
diff --git a/src/main/java/net/minecraft/server/NBTTagList.java b/src/main/java/net/minecraft/server/NBTTagList.java
index 576c3b7141f74168102c33b57258164c457fc04b..9833f80b170af390530f4d4c7aca535f28295c64 100644
--- a/src/main/java/net/minecraft/server/NBTTagList.java
+++ b/src/main/java/net/minecraft/server/NBTTagList.java
@@ -17,7 +17,7 @@ public class NBTTagList extends NBTBase {
     // Paper start
     public void sort(java.util.Comparator<? extends NBTBase> comparator) {
         //noinspection unchecked
-        java.util.Collections.sort(list, (java.util.Comparator<NBTBase>) comparator);
+        list.sort((java.util.Comparator<NBTBase>) comparator); // NeonPaper - Optimize
     }
     // Paper end
     private byte type = 0;
diff --git a/src/main/java/net/minecraft/server/NameReferencingFileConverter.java b/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
index 8f3b93dc1b269fd07b8bda1e45020722d3411c94..beed783a40a1b39f287e240744172cc28d59065e 100644
--- a/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
+++ b/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
@@ -74,7 +74,7 @@ public class NameReferencingFileConverter {
             int i = astring.length;
 
             for (int j = 0; j < i; ++j) {
-                String s = astring1[j];
+                String s = astring[j]; // NeonPaper - Inline
                 UUID uuid = EntityHuman.a(new GameProfile((UUID) null, s));
                 GameProfile gameprofile = new GameProfile(uuid, s);
 
@@ -281,7 +281,7 @@ public class NameReferencingFileConverter {
 
             if (gameprofile != null && gameprofile.getId() != null) {
                 return gameprofile.getId().toString();
-            } else if (!minecraftserver.R() && minecraftserver.getOnlineMode()) {
+            } else if (/*!minecraftserver.R()*/true && minecraftserver.getOnlineMode()) { // NeonPaper - Remove singleplayer code
                 final ArrayList arraylist = Lists.newArrayList();
                 ProfileLookupCallback profilelookupcallback = new ProfileLookupCallback() {
                     public void onProfileLookupSucceeded(GameProfile gameprofile) {
@@ -306,7 +306,7 @@ public class NameReferencingFileConverter {
 
     public static boolean a(final DedicatedServer dedicatedserver, PropertyManager propertymanager) {
         final File file = d(propertymanager);
-        final File file1 = new File(file.getParentFile(), "playerdata");
+        // final File file1 = new File(file.getParentFile(), "playerdata"); // NeonPaper - Unused
         final File file2 = new File(file.getParentFile(), "unknownplayers");
 
         if (file.exists() && file.isDirectory()) {
@@ -316,7 +316,7 @@ public class NameReferencingFileConverter {
             int i = afile.length;
 
             for (int j = 0; j < i; ++j) {
-                File file3 = afile1[j];
+                File file3 = afile[j]; // NeonPaper - Inline
                 String s = file3.getName();
 
                 if (s.toLowerCase(Locale.ROOT).endsWith(".dat")) {
diff --git a/src/main/java/net/minecraft/server/NavigationAbstract.java b/src/main/java/net/minecraft/server/NavigationAbstract.java
index 935b2e81e5fe67bf03cd006630370599ca0114aa..2de971ee4e381b823c19e5cf8f7b25090a407660 100644
--- a/src/main/java/net/minecraft/server/NavigationAbstract.java
+++ b/src/main/java/net/minecraft/server/NavigationAbstract.java
@@ -228,7 +228,7 @@ public abstract class NavigationAbstract {
         int i1 = k;
 
         for (int j1 = i - 1; j1 >= this.c.e(); --j1) {
-            if (this.a(vec3d, this.c.a(this.a, j1), k, l, i1)) {
+            if (this.a(vec3d, this.c.a(this.a, j1), k, l, k)) { // NeonPaper - Inline
                 this.c.c(j1);
                 break;
             }
diff --git a/src/main/java/net/minecraft/server/PacketDataSerializer.java b/src/main/java/net/minecraft/server/PacketDataSerializer.java
index c1273e988e6a46c20eca54530f928404c03ad947..147ea6d9d803e324edc0ef7269a102ae9d04f4d9 100644
--- a/src/main/java/net/minecraft/server/PacketDataSerializer.java
+++ b/src/main/java/net/minecraft/server/PacketDataSerializer.java
@@ -72,7 +72,7 @@ public class PacketDataSerializer extends ByteBuf {
         int i = aint.length;
 
         for (int j = 0; j < i; ++j) {
-            int k = aint1[j];
+            int k = aint[j]; // NeonPaper - Inline
 
             this.d(k);
         }
@@ -106,7 +106,7 @@ public class PacketDataSerializer extends ByteBuf {
         int i = along.length;
 
         for (int j = 0; j < i; ++j) {
-            long k = along1[j];
+            long k = along[j]; // NeonPaper - Inline
 
             this.writeLong(k);
         }
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutTitle.java b/src/main/java/net/minecraft/server/PacketPlayOutTitle.java
index 4f6c1c2e7a57d87c94be556f8f247bf6cbbae03c..91dd34b3da46122bb9c02dd2634ce9be68432147 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutTitle.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutTitle.java
@@ -83,11 +83,12 @@ public class PacketPlayOutTitle implements Packet<PacketListenerPlayOut> {
     public static enum EnumTitleAction {
 
         TITLE, SUBTITLE, ACTIONBAR, TIMES, CLEAR, RESET;
+        public static final PacketPlayOutTitle.EnumTitleAction[] VALUES = values(); // NeonPaper - Single values array
 
         private EnumTitleAction() {}
 
         public static PacketPlayOutTitle.EnumTitleAction a(String s) {
-            PacketPlayOutTitle.EnumTitleAction[] apacketplayouttitle_enumtitleaction = values();
+            PacketPlayOutTitle.EnumTitleAction[] apacketplayouttitle_enumtitleaction = VALUES; // NeonPaper - Single values array
             int i = apacketplayouttitle_enumtitleaction.length;
 
             for (int j = 0; j < i; ++j) {
@@ -102,9 +103,9 @@ public class PacketPlayOutTitle implements Packet<PacketListenerPlayOut> {
         }
 
         public static String[] a() {
-            String[] astring = new String[values().length];
+            String[] astring = new String[VALUES.length]; // NeonPaper - Single values array
             int i = 0;
-            PacketPlayOutTitle.EnumTitleAction[] apacketplayouttitle_enumtitleaction = values();
+            PacketPlayOutTitle.EnumTitleAction[] apacketplayouttitle_enumtitleaction = VALUES; // NeonPaper - Single values array
             int j = apacketplayouttitle_enumtitleaction.length;
 
             for (int k = 0; k < j; ++k) {
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalBeg.java b/src/main/java/net/minecraft/server/PathfinderGoalBeg.java
index 6d525d16e0f8124f0b1393617587a2e53ae61a9e..89ad99aaf73ebf2038748c62a16a02349f3862de 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalBeg.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalBeg.java
@@ -40,7 +40,7 @@ public class PathfinderGoalBeg extends PathfinderGoal {
     }
 
     private boolean a(EntityHuman entityhuman) {
-        EnumHand[] aenumhand = EnumHand.values();
+        EnumHand[] aenumhand = EnumHand.VALUES; // NeonPaper - Single values array
         int i = aenumhand.length;
 
         for (int j = 0; j < i; ++j) {
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalBreed.java b/src/main/java/net/minecraft/server/PathfinderGoalBreed.java
index 444792ea05b8bcefd3e91b2a3be63358714fa908..f8dc4cbd197d3a8b117d6f97bc78cdd89f2941c5 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalBreed.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalBreed.java
@@ -106,6 +106,7 @@ public class PathfinderGoalBreed extends PathfinderGoal {
             entityageable.setAgeRaw(-24000);
             entityageable.setPositionRotation(this.animal.locX, this.animal.locY, this.animal.locZ, 0.0F, 0.0F);
             this.a.addEntity(entityageable, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.BREEDING); // CraftBukkit - added SpawnReason
+            /* // NeonPaper start - Clientside particles
             Random random = this.animal.getRandom();
 
             for (int i = 0; i < 7; ++i) {
@@ -118,6 +119,7 @@ public class PathfinderGoalBreed extends PathfinderGoal {
 
                 this.a.addParticle(EnumParticle.HEART, this.animal.locX + d3, this.animal.locY + d4, this.animal.locZ + d5, d0, d1, d2, new int[0]);
             }
+            */ // NeonPaper end
 
             if (this.a.getGameRules().getBoolean("doMobLoot")) {
                 // CraftBukkit start - use event experience
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalNearestAttackableTarget.java b/src/main/java/net/minecraft/server/PathfinderGoalNearestAttackableTarget.java
index ebc7ff7885ac38f3be1c8a530d3d0313aa22edd1..6491c1e728b1278e18e2eba5b2fbd2b6cdd043e3 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalNearestAttackableTarget.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalNearestAttackableTarget.java
@@ -49,7 +49,7 @@ public class PathfinderGoalNearestAttackableTarget<T extends EntityLiving> exten
             if (list.isEmpty()) {
                 return false;
             } else {
-                Collections.sort(list, this.b);
+                list.sort(this.b); // NeonPaper - Optimize
                 this.d = (T) list.get(0); // CraftBukkit - fix decompile error
                 return true;
             }
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalNearestAttackableTargetInsentient.java b/src/main/java/net/minecraft/server/PathfinderGoalNearestAttackableTargetInsentient.java
index fd5544f433d3340170f6b0b62afb6a1a0ede7f0b..8ad9e49a4c43955cb87b67aad95c51f7bdffc2a8 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalNearestAttackableTargetInsentient.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalNearestAttackableTargetInsentient.java
@@ -45,7 +45,7 @@ public class PathfinderGoalNearestAttackableTargetInsentient extends PathfinderG
         double d0 = this.f();
         List list = this.b.world.a(this.f, this.b.getBoundingBox().grow(d0, 4.0D, d0), this.c);
 
-        Collections.sort(list, this.d);
+        list.sort(this.d); // NeonPaper - Optimize
         if (list.isEmpty()) {
             return false;
         } else {
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalTargetNearestPlayer.java b/src/main/java/net/minecraft/server/PathfinderGoalTargetNearestPlayer.java
index 63afc4372b3b223efab8272f0bf9dbea94e0aff1..e462dd4f39fd0566474bb549c6892cd10f7f3f42 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalTargetNearestPlayer.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalTargetNearestPlayer.java
@@ -59,7 +59,7 @@ public class PathfinderGoalTargetNearestPlayer extends PathfinderGoal {
         double d0 = this.f();
         List list = this.b.world.a(EntityHuman.class, this.b.getBoundingBox().grow(d0, 4.0D, d0), this.c);
 
-        Collections.sort(list, this.d);
+        list.sort(this.d); // NeonPaper - Optimize
         if (list.isEmpty()) {
             return false;
         } else {
diff --git a/src/main/java/net/minecraft/server/PathfinderWater.java b/src/main/java/net/minecraft/server/PathfinderWater.java
index 79149c4a7c26c64e853eaf02ac71e8d8e734876d..1f0233dff01c5b39fdf26006fb4aee67b9df6243 100644
--- a/src/main/java/net/minecraft/server/PathfinderWater.java
+++ b/src/main/java/net/minecraft/server/PathfinderWater.java
@@ -16,7 +16,7 @@ public class PathfinderWater extends PathfinderAbstract {
 
     public int a(PathPoint[] apathpoint, PathPoint pathpoint, PathPoint pathpoint1, float f) {
         int i = 0;
-        EnumDirection[] aenumdirection = EnumDirection.values();
+        EnumDirection[] aenumdirection = EnumDirection.VALUES; // NeonPaper - Single values array
         int j = aenumdirection.length;
 
         for (int k = 0; k < j; ++k) {
diff --git a/src/main/java/net/minecraft/server/PistonExtendsChecker.java b/src/main/java/net/minecraft/server/PistonExtendsChecker.java
index 35a3216260e3dc5c63ff67741e2bb1ef4c6fc8db..fcdbe2d1ee54645a980ef2d70defac7b4a98c88c 100644
--- a/src/main/java/net/minecraft/server/PistonExtendsChecker.java
+++ b/src/main/java/net/minecraft/server/PistonExtendsChecker.java
@@ -156,7 +156,7 @@ public class PistonExtendsChecker {
     }
 
     private boolean a(BlockPosition blockposition) {
-        EnumDirection[] aenumdirection = EnumDirection.values();
+        EnumDirection[] aenumdirection = EnumDirection.VALUES; // NeonPaper - Single values array
         int i = aenumdirection.length;
 
         for (int j = 0; j < i; ++j) {
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index 99652ae3ed9fffe9a2a8310465b948d504b0595f..83c4411ffc42625656d05eace3e3c68057da66e8 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -134,7 +134,7 @@ public class PlayerChunkMap {
         if (this.l && i % 4L == 0L) {
             this.l = false;
             try (Timing ignored = world.timings.doChunkMapSortMissing.startTiming()) { // Paper
-            Collections.sort(this.h, new Comparator() {
+            this.h.sort(new Comparator() { // NeonPaper - Optimize
                 public int a(PlayerChunk playerchunk, PlayerChunk playerchunk1) {
                     return ComparisonChain.start().compare(playerchunk.g(), playerchunk1.g()).result();
                 }
@@ -149,7 +149,7 @@ public class PlayerChunkMap {
         if (this.m && i % 4L == 2L) {
             this.m = false;
             try (Timing ignored = world.timings.doChunkMapSortSendToPlayers.startTiming()) { // Paper
-            Collections.sort(this.g, new Comparator() {
+            this.g.sort(new Comparator() { // NeonPaper - Optimize
                 public int a(PlayerChunk playerchunk, PlayerChunk playerchunk1) {
                     return ComparisonChain.start().compare(playerchunk.g(), playerchunk1.g()).result();
                 }
@@ -306,7 +306,7 @@ public class PlayerChunkMap {
             }
         }
 
-        Collections.sort(chunkList, new ChunkCoordComparator(entityplayer));
+        chunkList.sort(new ChunkCoordComparator(entityplayer)); // NeonPaper - Optimize
         for (ChunkCoordIntPair pair : chunkList) {
             this.c(pair.x, pair.z).a(entityplayer);
         }
@@ -385,7 +385,7 @@ public class PlayerChunkMap {
                 this.e();
 
                 // CraftBukkit start - send nearest chunks first
-                Collections.sort(chunksToLoad, new ChunkCoordComparator(entityplayer));
+                chunksToLoad.sort(new ChunkCoordComparator(entityplayer)); // NeonPaper - Optimize
                 for (ChunkCoordIntPair pair : chunksToLoad) {
                     this.c(pair.x, pair.z).a(entityplayer);
                 }
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 59d5263295ec57981fb8a9cbab34a00bce904f70..26f881e9f3bc2ec29f19f0cc283221372d847011 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -153,7 +153,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                 return;
             }
         } else {
-            this.B = false;
+            // this.B = false; // NeonPaper - Optimize
             this.C = 0;
         }
 
@@ -350,7 +350,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                 }
                 // Paper end
 
-                if (d10 - d9 > Math.max(100.0D, Math.pow((double) (org.spigotmc.SpigotConfig.movedTooQuicklyMultiplier * (float) i * speed), 2)) && (!this.minecraftServer.R() || !this.minecraftServer.Q().equals(entity.getName()))) { // Spigot
+                if (d10 - d9 > Math.max(100.0D, Math.pow((double) (org.spigotmc.SpigotConfig.movedTooQuicklyMultiplier * (float) i * speed), 2)) /*&& (!this.minecraftServer.R() || !this.minecraftServer.Q().equals(entity.getName()))*/) { // Spigot // NeonPaper - Remove singleplayer code
                 // CraftBukkit end
                     PlayerConnection.LOGGER.warn("{} (vehicle of {}) moved too quickly! {},{},{}", entity.getName(), this.player.getName(), Double.valueOf(d6), Double.valueOf(d7), Double.valueOf(d8));
                     this.networkManager.sendPacket(new PacketPlayOutVehicleMove(entity));
@@ -589,7 +589,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                             }
 
                             // Paper start - Prevent moving into unloaded chunks
-                            if (player.world.paperConfig.preventMovingIntoUnloadedChunks && (this.player.locX != toX || this.player.locZ != toZ) && !worldserver.isChunkLoaded((int) Math.floor(toX) >> 4, (int) Math.floor(toZ) >> 4, false)) {
+                            if (player.world.paperConfig.preventMovingIntoUnloadedChunks && (this.player.locX != /*toX*/d4 || this.player.locZ != /*toZ*/d6) && !worldserver.isChunkLoaded((int) Math.floor(/*toX*/d4) >> 4, (int) Math.floor(/*toZ*/d6) >> 4, false)) { // NeonPaper - Inline
                                 this.internalTeleport(this.player.locX, this.player.locY, this.player.locZ, this.player.yaw, this.player.pitch, Collections.emptySet());
                                 return;
                             }
@@ -598,7 +598,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                             if (!this.player.L() && (!this.player.x().getGameRules().getBoolean("disableElytraMovementCheck") || !this.player.cP())) {
                                 float f2 = this.player.cP() ? 300.0F : 100.0F;
 
-                                if (d11 - d10 > Math.max(f2, Math.pow((double) (org.spigotmc.SpigotConfig.movedTooQuicklyMultiplier * (float) i * speed), 2)) && (!this.minecraftServer.R() || !this.minecraftServer.Q().equals(this.player.getName()))) { // Spigot
+                                if (d11 - d10 > Math.max(f2, Math.pow((double) (org.spigotmc.SpigotConfig.movedTooQuicklyMultiplier * (float) i * speed), 2)) /*&& (!this.minecraftServer.R() || !this.minecraftServer.Q().equals(this.player.getName()))*/) { // Spigot // NeonPaper - Remove singleplayer code
                                 // CraftBukkit end
                                     PlayerConnection.LOGGER.warn("{} moved too quickly! {},{},{}", this.player.getName(), Double.valueOf(d7), Double.valueOf(d8), Double.valueOf(d9));
                                     this.a(this.player.locX, this.player.locY, this.player.locZ, this.player.yaw, this.player.pitch);
@@ -1128,7 +1128,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
         PlayerConnectionUtils.ensureMainThread(packetplayinresourcepackstatus, this, this.player.x());
         // Paper start
         //this.server.getPluginManager().callEvent(new PlayerResourcePackStatusEvent(getPlayer(), PlayerResourcePackStatusEvent.Status.values()[packetplayinresourcepackstatus.status.ordinal()]));
-        final PlayerResourcePackStatusEvent.Status status = PlayerResourcePackStatusEvent.Status.values()[packetplayinresourcepackstatus.status.ordinal()];
+        final PlayerResourcePackStatusEvent.Status status = PlayerResourcePackStatusEvent.Status.VALUES[packetplayinresourcepackstatus.status.ordinal()]; // NeonPaper - Single values array
         this.getPlayer().setResourcePackStatus(status);
         this.server.getPluginManager().callEvent(new PlayerResourcePackStatusEvent(getPlayer(), status));
         // Paper end
@@ -1169,7 +1169,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
             this.minecraftServer.getPlayerList().sendMessage(CraftChatMessage.fromString(quitMessage));
         }
         // CraftBukkit end
-        if (this.minecraftServer.R() && this.player.getName().equals(this.minecraftServer.Q())) {
+        if (/*this.minecraftServer.R() && this.player.getName().equals(this.minecraftServer.Q())*/false) { // NeonPaper - Remove singleplayer code
             PlayerConnection.LOGGER.info("Stopping singleplayer server as player logged out");
             this.minecraftServer.safeShutdown();
         }
@@ -1246,7 +1246,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
         }
 
         boolean isSync = packetplayinchat.a().startsWith("/");
-        if (packetplayinchat.a().startsWith("/")) {
+        if (isSync) { // NeonPaper - Optimize
             PlayerConnectionUtils.ensureMainThread(packetplayinchat, this, this.player.x());
         }
         // CraftBukkit end
@@ -1374,7 +1374,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
             return;
         }
 
-        if (!async && s.startsWith("/")) {
+        if (!async && s.charAt(0) == '/') { // NeonPaper - Optimize
             // Paper Start
             if (!org.spigotmc.AsyncCatcher.shuttingDown && !org.bukkit.Bukkit.isPrimaryThread()) {
                 final String fCommandLine = s;
@@ -1670,7 +1670,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                 if (packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT
                         || packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT_AT) {
                     // CraftBukkit start
-                    boolean triggerLeashUpdate = itemInHand != null && itemInHand.getItem() == Items.LEAD && entity instanceof EntityInsentient;
+                    boolean triggerLeashUpdate = /*itemInHand != null*/true && itemInHand.getItem() == Items.LEAD && entity instanceof EntityInsentient; // NeonPaper - Optimize
                     Item origItem = this.player.inventory.getItemInHand() == null ? null : this.player.inventory.getItemInHand().getItem();
                     PlayerInteractEntityEvent event;
                     if (packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT) {
@@ -1698,7 +1698,9 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                     // CraftBukkit end
                 }
 
-                if (packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT) {
+                // NeonPaper start - Replace 'if' with 'switch'
+                switch (packetplayinuseentity.a()) {
+                case INTERACT:
                     enumhand = packetplayinuseentity.b();
                     this.player.a(entity, enumhand);
                     // CraftBukkit start
@@ -1706,7 +1708,8 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                         this.player.updateInventory(this.player.activeContainer);
                     }
                     // CraftBukkit end
-                } else if (packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT_AT) {
+                    break;
+                case INTERACT_AT:
                     enumhand = packetplayinuseentity.b();
                     entity.a(this.player, packetplayinuseentity.c(), enumhand);
                     // CraftBukkit start
@@ -1714,7 +1717,8 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                         this.player.updateInventory(this.player.activeContainer);
                     }
                     // CraftBukkit end
-                } else if (packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.ATTACK) {
+                    break;
+                case ATTACK:
                     if (entity instanceof EntityItem || entity instanceof EntityExperienceOrb || entity instanceof EntityArrow || (entity == this.player && !player.isSpectator())) { // CraftBukkit
                         this.disconnect(new ChatMessage("multiplayer.disconnect.invalid_entity_attacked", new Object[0]));
                         this.minecraftServer.warning("Player " + this.player.getName() + " tried to attack an invalid entity");
@@ -1728,7 +1732,9 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                         this.player.updateInventory(this.player.activeContainer);
                     }
                     // CraftBukkit end
+                    break;
                 }
+                // NeonPaper end
             }
         }
         // Paper start - fire event
@@ -2273,7 +2279,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
 
             this.player.ping = (this.player.ping * 3 + i) / 4;
             this.g = false;
-        } else if (!this.player.getName().equals(this.minecraftServer.Q())) {
+        } else if (/*!this.player.getName().equals(this.minecraftServer.Q())*/true) { // NeonPaper - Remove singleplayer code
             // Paper start - This needs to be handled on the main thread for plugins
             PlayerConnection.LOGGER.warn("{} sent an invalid keepalive! pending keepalive: {} got id: {} expected id: {}",
                     this.player.getName(), this.isPendingPing(), packetplayinkeepalive.a(), this.getKeepAliveID());
@@ -2736,7 +2742,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                     else if (packetplayincustompayload.a().equals("REGISTER")) {
                         try {
                             String channels = packetplayincustompayload.b().toString(com.google.common.base.Charsets.UTF_8);
-                            for (String channel : channels.split("\0")) {
+                            for (String channel : StringUtils.splitPreserveAllTokens(channels, '\0')) { // NeonPaper - Optimize
                                 getPlayer().addChannel(channel);
                             }
                         } catch (Exception ex) {
@@ -2746,7 +2752,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                     } else if (packetplayincustompayload.a().equals("UNREGISTER")) {
                         try {
                             String channels = packetplayincustompayload.b().toString(com.google.common.base.Charsets.UTF_8);
-                            for (String channel : channels.split("\0")) {
+                            for (String channel : StringUtils.splitPreserveAllTokens(channels, '\0')) { // NeonPaper - Optimize
                                 getPlayer().removeChannel(channel);
                             }
                         } catch (Exception ex) {
diff --git a/src/main/java/net/minecraft/server/PlayerInteractManager.java b/src/main/java/net/minecraft/server/PlayerInteractManager.java
index 91ca480cbfbc22788d0321d27b3afc0544370bea..38b8d88875cb77030f4088bdbd30ca1bab93f989 100644
--- a/src/main/java/net/minecraft/server/PlayerInteractManager.java
+++ b/src/main/java/net/minecraft/server/PlayerInteractManager.java
@@ -282,11 +282,14 @@ public class PlayerInteractManager {
         // CraftBukkit start - fire BlockBreakEvent
         BlockBreakEvent event = null;
 
-        if (this.player instanceof EntityPlayer) {
+        if (this.player != null) { // NeonPaper - Optimize
             org.bukkit.block.Block block = this.world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
 
             // Sword + Creative mode pre-cancel
-            boolean isSwordNoBreak = this.gamemode.isCreative() && !this.player.getItemInMainHand().isEmpty() && this.player.getItemInMainHand().getItem() instanceof ItemSword;
+            // NeonPaper start - Optimize
+            ItemStack itemInMainHand = this.player.getItemInMainHand();
+            boolean isSwordNoBreak = this.gamemode.isCreative() && !itemInMainHand.isEmpty() && itemInMainHand.getItem() instanceof ItemSword;
+            // NeonPaper end
 
             // Tell client the block is gone immediately then process events
             // Don't tell the client if its a creative sword break because its not broken!
@@ -466,7 +469,7 @@ public class PlayerInteractManager {
 
             if (this.gamemode == EnumGamemode.SPECTATOR) {
                 TileEntity tileentity = world.getTileEntity(blockposition);
-                cancelledBlock = !(tileentity instanceof ITileInventory || tileentity instanceof IInventory);
+                cancelledBlock = !(/*tileentity instanceof ITileInventory ||*/ tileentity instanceof IInventory); // NeonPaper - Optimize
             }
 
             if (entityhuman.getCooldownTracker().a(itemstack.getItem())) {
diff --git a/src/main/java/net/minecraft/server/PlayerInventory.java b/src/main/java/net/minecraft/server/PlayerInventory.java
index 84f59b7501b111a3af551f3bcdf2d80fc35f89b1..9cb13774783704251e82d05b6d921cc1a967b0e4 100644
--- a/src/main/java/net/minecraft/server/PlayerInventory.java
+++ b/src/main/java/net/minecraft/server/PlayerInventory.java
@@ -259,7 +259,7 @@ public class PlayerInventory implements IInventory {
         } else {
             j -= k;
             itemstack1.add(k);
-            itemstack1.d(5);
+            // itemstack1.d(5); // NeonPaper - Clientside animation
             return j;
         }
     }
@@ -311,7 +311,7 @@ public class PlayerInventory implements IInventory {
 
                     if (i >= 0) {
                         this.items.set(i, itemstack.cloneItemStack());
-                        ((ItemStack) this.items.get(i)).d(5);
+                        // ((ItemStack) this.items.get(i)).d(5); // NeonPaper - Clientside animation
                         itemstack.setCount(0);
                         return true;
                     } else if (this.player.abilities.canInstantlyBuild) {
@@ -360,7 +360,7 @@ public class PlayerInventory implements IInventory {
     }
 
     public void a(World world, ItemStack itemstack) {
-        if (!world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             while (!itemstack.isEmpty()) {
                 int i = this.firstPartial(itemstack);
 
@@ -512,7 +512,7 @@ public class PlayerInventory implements IInventory {
             ItemStack itemstack = new ItemStack(nbttagcompound);
 
             if (!itemstack.isEmpty()) {
-                if (j >= 0 && j < this.items.size()) {
+                if (/*j >= 0*/true && j < this.items.size()) { // NeonPaper - Optimize
                     this.items.set(j, itemstack);
                 } else if (j >= 100 && j < this.armor.size() + 100) {
                     this.armor.set(j - 100, itemstack);
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index 80e9c9200c2afc3005c6a8bc5f5140eab71f4a40..1cb91fd011b529644c3a0312642c7d7772087491 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -67,8 +67,10 @@ public abstract class PlayerList {
     //private boolean hasWhitelist; // Paper - moved to whitelist object so not duplicated
     protected int maxPlayers;
     private int s;
+    /* // NeonPaper start - Remove singleplayer code
     private EnumGamemode t;
     private boolean u;
+    */ // NeonPaper end
     private int v;
 
     // CraftBukkit start
@@ -827,8 +829,10 @@ public abstract class PlayerList {
         GameProfile gameprofile = entityplayer.getProfile();
         int i = this.isOp(gameprofile) ? this.operators.a(gameprofile) : 0;
 
+        /* // NeonPaper start - Remove singleplayer code
         i = this.server.R() && this.server.worldServer[0].getWorldData().u() ? 4 : i;
         i = this.u ? 4 : i;
+        */ // NeonPaper end
         this.b(entityplayer, i);
     }
 
@@ -1060,7 +1064,7 @@ public abstract class PlayerList {
     public void sendAll(Packet packet, EntityHuman entityhuman) {
         for (int i = 0; i < this.players.size(); ++i) {
             EntityPlayer entityplayer =  this.players.get(i);
-            if (entityhuman != null && entityhuman instanceof EntityPlayer && !entityplayer.getBukkitEntity().canSee(((EntityPlayer) entityhuman).getBukkitEntity())) {
+            if (/*entityhuman != null &&*/ entityhuman instanceof EntityPlayer && !entityplayer.getBukkitEntity().canSee(((EntityPlayer) entityhuman).getBukkitEntity())) { // NeonPaper - Optimize
                 continue;
             }
             ((EntityPlayer) this.players.get(i)).playerConnection.sendPacket(packet);
@@ -1230,7 +1234,7 @@ public abstract class PlayerList {
     // Paper end
 
     public boolean isOp(GameProfile gameprofile) {
-        return this.operators.d(gameprofile) || this.server.R() && this.server.worlds.get(0).getWorldData().u() && this.server.Q().equalsIgnoreCase(gameprofile.getName()) || this.u; // CraftBukkit
+        return this.operators.d(gameprofile) /*|| this.server.R() && this.server.worlds.get(0).getWorldData().u() && this.server.Q().equalsIgnoreCase(gameprofile.getName()) || this.u*/; // CraftBukkit // NeonPaper - Remove singleplayer code
     }
 
     @Nullable
@@ -1260,7 +1264,7 @@ public abstract class PlayerList {
             // Paper end
 
             // CraftBukkit start - Test if player receiving packet can see the source of the packet
-            if (entityhuman != null && entityhuman instanceof EntityPlayer && !entityplayer.getBukkitEntity().canSee(((EntityPlayer) entityhuman).getBukkitEntity())) {
+            if (/*entityhuman != null &&*/ entityhuman instanceof EntityPlayer && !entityplayer.getBukkitEntity().canSee(((EntityPlayer) entityhuman).getBukkitEntity())) { // NeonPaper - Optimize
                continue;
             }
             // CraftBukkit end
@@ -1403,8 +1407,10 @@ public abstract class PlayerList {
     private void a(EntityPlayer entityplayer, EntityPlayer entityplayer1, World world) {
         if (entityplayer1 != null) {
             entityplayer.playerInteractManager.setGameMode(entityplayer1.playerInteractManager.getGameMode());
+            /* // NeonPaper start - Remove singleplayer code
         } else if (this.t != null) {
             entityplayer.playerInteractManager.setGameMode(this.t);
+            */ // NeonPaper end
         }
 
         entityplayer.playerInteractManager.b(world.getWorldData().getGameType());
diff --git a/src/main/java/net/minecraft/server/PortalTravelAgent.java b/src/main/java/net/minecraft/server/PortalTravelAgent.java
index 42e4b2d01d1f4cb7729580daac0dc7ac34adc382..3c6f6f11312632a29a20c8278d1680d63babb0d8 100644
--- a/src/main/java/net/minecraft/server/PortalTravelAgent.java
+++ b/src/main/java/net/minecraft/server/PortalTravelAgent.java
@@ -35,9 +35,11 @@ public class PortalTravelAgent {
                 this.b(entity, f);
             }
         } else {
+            /* // NeonPaper start - Unused
             int i = MathHelper.floor(entity.locX);
             int j = MathHelper.floor(entity.locY) - 1;
             int k = MathHelper.floor(entity.locZ);
+            */ // NeonPaper end
             // CraftBukkit start - Modularize end portal creation
             BlockPosition created = this.createEndPortal(entity.locX, entity.locY, entity.locZ);
             entity.setPositionRotation((double) created.getX(), (double) created.getY(), (double) created.getZ(), entity.yaw, 0.0F);
@@ -142,8 +144,8 @@ public class PortalTravelAgent {
         Object object = BlockPosition.ZERO;
         long k = ChunkCoordIntPair.a(i, j);
 
-        if (this.c.containsKey(k)) {
-            PortalTravelAgent.ChunkCoordinatesPortal portaltravelagent_chunkcoordinatesportal = (PortalTravelAgent.ChunkCoordinatesPortal) this.c.get(k);
+        PortalTravelAgent.ChunkCoordinatesPortal portaltravelagent_chunkcoordinatesportal = this.c.get(k); // NeonPaper - Optimize map get
+        if (portaltravelagent_chunkcoordinatesportal != null) { // NeonPaper - Optimize map get
 
             d0 = 0.0D;
             object = portaltravelagent_chunkcoordinatesportal;
diff --git a/src/main/java/net/minecraft/server/RecipeFireworks.java b/src/main/java/net/minecraft/server/RecipeFireworks.java
index 859900d5fc77236c8b53ac7315d35965210faf9b..f33c7601e5a9f8690be3c5509eaf3e86286cc448 100644
--- a/src/main/java/net/minecraft/server/RecipeFireworks.java
+++ b/src/main/java/net/minecraft/server/RecipeFireworks.java
@@ -88,14 +88,14 @@ public class RecipeFireworks extends ShapelessRecipes implements IRecipe { // Cr
                 nbttagcompound = new NBTTagCompound();
                 nbttagcompound1 = new NBTTagCompound();
                 byte b0 = 0;
-                ArrayList arraylist = Lists.newArrayList();
+                it.unimi.dsi.fastutil.ints.IntArrayList arraylist = new it.unimi.dsi.fastutil.ints.IntArrayList(); // NeonPaper - FastUtil optimization
 
                 for (int i2 = 0; i2 < inventorycrafting.getSize(); ++i2) {
                     ItemStack itemstack2 = inventorycrafting.getItem(i2);
 
                     if (!itemstack2.isEmpty()) {
                         if (itemstack2.getItem() == Items.DYE) {
-                            arraylist.add(Integer.valueOf(ItemDye.a[itemstack2.getData() & 15]));
+                            arraylist.add(ItemDye.a[itemstack2.getData() & 15]); // NeonPaper - FastUtil optimization
                         } else if (itemstack2.getItem() == Items.GLOWSTONE_DUST) {
                             nbttagcompound1.setBoolean("Flicker", true);
                         } else if (itemstack2.getItem() == Items.DIAMOND) {
@@ -115,7 +115,7 @@ public class RecipeFireworks extends ShapelessRecipes implements IRecipe { // Cr
                 int[] aint = new int[arraylist.size()];
 
                 for (int j2 = 0; j2 < aint.length; ++j2) {
-                    aint[j2] = ((Integer) arraylist.get(j2)).intValue();
+                    aint[j2] = arraylist.getInt(j2); // NeonPaper - FastUtil optimization
                 }
 
                 nbttagcompound1.setIntArray("Colors", aint);
@@ -124,14 +124,14 @@ public class RecipeFireworks extends ShapelessRecipes implements IRecipe { // Cr
                 this.a.setTag(nbttagcompound);
                 return true;
             } else if (j == 0 && i == 0 && l == 1 && k > 0 && k == i1) {
-                ArrayList arraylist1 = Lists.newArrayList();
+                it.unimi.dsi.fastutil.ints.IntArrayList arraylist1 = new it.unimi.dsi.fastutil.ints.IntArrayList(); // NeonPaper - FastUtil optimization
 
                 for (int k2 = 0; k2 < inventorycrafting.getSize(); ++k2) {
                     ItemStack itemstack3 = inventorycrafting.getItem(k2);
 
                     if (!itemstack3.isEmpty()) {
                         if (itemstack3.getItem() == Items.DYE) {
-                            arraylist1.add(Integer.valueOf(ItemDye.a[itemstack3.getData() & 15]));
+                            arraylist1.add(ItemDye.a[itemstack3.getData() & 15]); // NeonPaper - FastUtil optimization
                         } else if (itemstack3.getItem() == Items.FIREWORK_CHARGE) {
                             this.a = itemstack3.cloneItemStack();
                             this.a.setCount(1);
@@ -142,7 +142,7 @@ public class RecipeFireworks extends ShapelessRecipes implements IRecipe { // Cr
                 int[] aint1 = new int[arraylist1.size()];
 
                 for (l1 = 0; l1 < aint1.length; ++l1) {
-                    aint1[l1] = ((Integer) arraylist1.get(l1)).intValue();
+                    aint1[l1] = arraylist1.getInt(l1); // NeonPaper - FastUtil optimization
                 }
 
                 if (!this.a.isEmpty() && this.a.hasTag()) {
diff --git a/src/main/java/net/minecraft/server/RecipesBanner.java b/src/main/java/net/minecraft/server/RecipesBanner.java
index cf27b00e3709d48a574cceba9bef5c38ef085142..e5699cc95d2b07e39a678c94304cd2919f90c306 100644
--- a/src/main/java/net/minecraft/server/RecipesBanner.java
+++ b/src/main/java/net/minecraft/server/RecipesBanner.java
@@ -106,7 +106,7 @@ public class RecipesBanner {
 
         @Nullable
         private EnumBannerPatternType c(InventoryCrafting inventorycrafting) {
-            EnumBannerPatternType[] aenumbannerpatterntype = EnumBannerPatternType.values();
+            EnumBannerPatternType[] aenumbannerpatterntype = EnumBannerPatternType.VALUES; // NeonPaper - Single values array
             int i = aenumbannerpatterntype.length;
 
             for (int j = 0; j < i; ++j) {
diff --git a/src/main/java/net/minecraft/server/RegionFile.java b/src/main/java/net/minecraft/server/RegionFile.java
index 542a35d13014f8540f1bf525f021188b8955fc56..273dc269d5617ce1dd9206014cf77cde11bf7ae1 100644
--- a/src/main/java/net/minecraft/server/RegionFile.java
+++ b/src/main/java/net/minecraft/server/RegionFile.java
@@ -406,11 +406,11 @@ public class RegionFile {
     }
 
     private File getOversizedMetaFile() {
-        return new File(getFile().getParentFile(), getFile().getName().replaceAll("\\.mca$", "") + ".oversized.nbt");
+        return new File(getFile().getParentFile(), org.apache.commons.lang3.StringUtils.replace(getFile().getName(), ".mca", "") + ".oversized.nbt"); // NeonPaper - Optimize
     }
 
     private File getOversizedFile(int x, int z) {
-        return new File(this.getFile().getParentFile(), this.getFile().getName().replaceAll("\\.mca$", "") + "_oversized_" + x + "_" + z + ".nbt");
+        return new File(getFile().getParentFile(), org.apache.commons.lang3.StringUtils.replace(getFile().getName(), ".mca", "") + "_oversized_" + x + "_" + z + ".nbt"); // NeonPaper - Optimize
     }
 
     void writeOversizedData(int x, int z, NBTTagCompound oversizedData) throws IOException {
diff --git a/src/main/java/net/minecraft/server/RegistryBlockID.java b/src/main/java/net/minecraft/server/RegistryBlockID.java
index 03894df54cdeafc98e7b5abed24b04536c1fee48..ec70480b39dc524762c77ab7a7ada533dec06a3b 100644
--- a/src/main/java/net/minecraft/server/RegistryBlockID.java
+++ b/src/main/java/net/minecraft/server/RegistryBlockID.java
@@ -8,9 +8,15 @@ import java.util.Iterator;
 import java.util.List;
 import javax.annotation.Nullable;
 
+// NeonPaper start - FastUtil optimization
+import com.github.ruviolence.NeonPaper.IdentityStrategy;
+import it.unimi.dsi.fastutil.objects.Object2IntMap;
+import it.unimi.dsi.fastutil.objects.Object2IntOpenCustomHashMap;
+// NeonPaper end
+
 public class RegistryBlockID<T> implements Registry<T> {
 
-    private final IdentityHashMap<T, Integer> a;
+    private final Object2IntMap<T> a; // NeonPaper - FastUtil optimization
     private final List<T> b;
 
     public RegistryBlockID() {
@@ -19,7 +25,10 @@ public class RegistryBlockID<T> implements Registry<T> {
 
     public RegistryBlockID(int i) {
         this.b = Lists.newArrayListWithExpectedSize(i);
-        this.a = new IdentityHashMap(i);
+        // NeonPaper start - FastUtil optimization
+        this.a = new Object2IntOpenCustomHashMap<>(i, new IdentityStrategy<>());
+        this.a.defaultReturnValue(-1);
+        // NeonPaper end
     }
 
     public void a(T t0, int i) {
@@ -33,6 +42,7 @@ public class RegistryBlockID<T> implements Registry<T> {
     }
 
     public int getId(T t0) {
+        if (true) return this.a.getInt(t0); // NeonPaper - FastUtil optimization
         Integer integer = (Integer) this.a.get(t0);
 
         return integer == null ? -1 : integer.intValue();
diff --git a/src/main/java/net/minecraft/server/ScoreboardServer.java b/src/main/java/net/minecraft/server/ScoreboardServer.java
index 9d13068f3efa8d2cd4adc0cb940f7b4c9ab82796..b699258ffe04ae1ba4d83e868457d19b8d9bc599 100644
--- a/src/main/java/net/minecraft/server/ScoreboardServer.java
+++ b/src/main/java/net/minecraft/server/ScoreboardServer.java
@@ -66,7 +66,7 @@ public class ScoreboardServer extends Scoreboard {
         if (super.addPlayerToTeam(s, s1)) {
             ScoreboardTeam scoreboardteam = this.getTeam(s1);
 
-            this.sendAll(new PacketPlayOutScoreboardTeam(scoreboardteam, Arrays.asList(new String[] { s}), 3));
+            this.sendAll(new PacketPlayOutScoreboardTeam(scoreboardteam, java.util.Collections.singletonList(s), 3)); // NeonPaper - Optimize
             this.b();
             return true;
         } else {
@@ -76,7 +76,7 @@ public class ScoreboardServer extends Scoreboard {
 
     public void removePlayerFromTeam(String s, ScoreboardTeam scoreboardteam) {
         super.removePlayerFromTeam(s, scoreboardteam);
-        this.sendAll(new PacketPlayOutScoreboardTeam(scoreboardteam, Arrays.asList(new String[] { s}), 4));
+        this.sendAll(new PacketPlayOutScoreboardTeam(scoreboardteam, java.util.Collections.singletonList(s), 4)); // NeonPaper - Optimize
         this.b();
     }
 
diff --git a/src/main/java/net/minecraft/server/ScoreboardTeamBase.java b/src/main/java/net/minecraft/server/ScoreboardTeamBase.java
index 6b46f95dbf0abe3b640d71721aa04e9a0dcd5bfb..5868b6500ec39a427d917d7b4684ef9ff296bbf1 100644
--- a/src/main/java/net/minecraft/server/ScoreboardTeamBase.java
+++ b/src/main/java/net/minecraft/server/ScoreboardTeamBase.java
@@ -34,6 +34,7 @@ public abstract class ScoreboardTeamBase {
         private static final Map<String, ScoreboardTeamBase.EnumTeamPush> g = Maps.newHashMap();
         public final String e;
         public final int f;
+        public static final ScoreboardTeamBase.EnumTeamPush[] VALUES = values(); // NeonPaper - Single values array
 
         public static String[] a() {
             return (String[]) ScoreboardTeamBase.EnumTeamPush.g.keySet().toArray(new String[ScoreboardTeamBase.EnumTeamPush.g.size()]);
@@ -69,6 +70,7 @@ public abstract class ScoreboardTeamBase {
         private static final Map<String, ScoreboardTeamBase.EnumNameTagVisibility> g = Maps.newHashMap();
         public final String e;
         public final int f;
+        public static final ScoreboardTeamBase.EnumNameTagVisibility[] VALUES = values(); // NeonPaper - Single values array
 
         public static String[] a() {
             return (String[]) ScoreboardTeamBase.EnumNameTagVisibility.g.keySet().toArray(new String[ScoreboardTeamBase.EnumNameTagVisibility.g.size()]);
diff --git a/src/main/java/net/minecraft/server/ServerConnection.java b/src/main/java/net/minecraft/server/ServerConnection.java
index 4a629aaa1e7b5b06525661d6c9e6b9e1375917b7..3551a192237c9f2d9f18a1baac05f04ab780ed4c 100644
--- a/src/main/java/net/minecraft/server/ServerConnection.java
+++ b/src/main/java/net/minecraft/server/ServerConnection.java
@@ -76,7 +76,7 @@ public class ServerConnection {
     }
 
     public void a(InetAddress inetaddress, int i) throws IOException {
-        List list = this.g;
+        // List list = this.g; // NeonPaper - Unused
 
         synchronized (this.g) {
             Class oclass;
@@ -128,7 +128,7 @@ public class ServerConnection {
     }
 
     public void c() {
-        List list = this.h;
+        // List list = this.h; // NeonPaper - Unused
 
         synchronized (this.h) {
             // Spigot Start
diff --git a/src/main/java/net/minecraft/server/ShapeDetector.java b/src/main/java/net/minecraft/server/ShapeDetector.java
index 340812fae96aaccebecdae19bce7d5a0eb657825..9a36a270054e29c7947df67e0a61e1c4dc18be4d 100644
--- a/src/main/java/net/minecraft/server/ShapeDetector.java
+++ b/src/main/java/net/minecraft/server/ShapeDetector.java
@@ -67,12 +67,12 @@ public class ShapeDetector {
 
         while (iterator.hasNext()) {
             BlockPosition blockposition1 = (BlockPosition) iterator.next();
-            EnumDirection[] aenumdirection = EnumDirection.values();
+            EnumDirection[] aenumdirection = EnumDirection.VALUES; // NeonPaper - Single values array
             int j = aenumdirection.length;
 
             for (int k = 0; k < j; ++k) {
                 EnumDirection enumdirection = aenumdirection[k];
-                EnumDirection[] aenumdirection1 = EnumDirection.values();
+                EnumDirection[] aenumdirection1 = EnumDirection.VALUES; // NeonPaper - Single values array
                 int l = aenumdirection1.length;
 
                 for (int i1 = 0; i1 < l; ++i1) {
diff --git a/src/main/java/net/minecraft/server/SlotFurnaceResult.java b/src/main/java/net/minecraft/server/SlotFurnaceResult.java
index ed394f7a5d6cf266dda3b99a4fdec18afc42b1e1..4b9320201f6d6151d1a871cd53623f9180954e39 100644
--- a/src/main/java/net/minecraft/server/SlotFurnaceResult.java
+++ b/src/main/java/net/minecraft/server/SlotFurnaceResult.java
@@ -40,7 +40,7 @@ public class SlotFurnaceResult extends Slot {
 
     protected void c(ItemStack itemstack) {
         itemstack.a(this.a.world, this.a, this.b);
-        if (!this.a.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             int i = this.b;
             float f = RecipesFurnace.getInstance().b(itemstack);
             int j;
diff --git a/src/main/java/net/minecraft/server/SpawnerCreature.java b/src/main/java/net/minecraft/server/SpawnerCreature.java
index 5c5bed0344baeeaff4e75807326a7255ebca8bf5..adfdecbc2048c50b28784214f5d97e2a6ea77696 100644
--- a/src/main/java/net/minecraft/server/SpawnerCreature.java
+++ b/src/main/java/net/minecraft/server/SpawnerCreature.java
@@ -108,7 +108,7 @@ public final class SpawnerCreature {
 
             int j1 = 0;
             BlockPosition blockposition = worldserver.getSpawn();
-            EnumCreatureType[] aenumcreaturetype = EnumCreatureType.values();
+            EnumCreatureType[] aenumcreaturetype = EnumCreatureType.VALUES; // NeonPaper - Single values array
 
             j = aenumcreaturetype.length;
 
@@ -178,13 +178,13 @@ public final class SpawnerCreature {
                                         if (j4 < i4) {
                                             label113: {
                                                 j3 += worldserver.random.nextInt(6) - worldserver.random.nextInt(6);
-                                                k3 += worldserver.random.nextInt(1) - worldserver.random.nextInt(1);
+                                                // k3 += worldserver.random.nextInt(1) - worldserver.random.nextInt(1);  // NeonPaper - Optimize
                                                 l3 += worldserver.random.nextInt(6) - worldserver.random.nextInt(6);
-                                                blockposition_mutableblockposition.c(j3, k3, l3);
+                                                blockposition_mutableblockposition.c(j3, j2, l3); // NeonPaper - Inline
                                                 float f = (float) j3 + 0.5F;
                                                 float f1 = (float) l3 + 0.5F;
 
-                                                if (worldserver.getWorldBorder().isInBounds(blockposition_mutableblockposition) && worldserver.getChunkIfLoaded(blockposition_mutableblockposition) != null && !worldserver.isPlayerNearby((double) f, (double) k3, (double) f1, 24.0D) && blockposition.distanceSquared((double) f, (double) k3, (double) f1) >= 576.0D) { // Paper - Prevent mob spawning from loading/generating chunks
+                                                if (worldserver.getWorldBorder().isInBounds(blockposition_mutableblockposition) && worldserver.getChunkIfLoaded(blockposition_mutableblockposition) != null && !worldserver.isPlayerNearby((double) f, (double) j2, (double) f1, 24.0D) && blockposition.distanceSquared((double) f, (double) j2, (double) f1) >= 576.0D) { // Paper - Prevent mob spawning from loading/generating chunks // NeonPaper - Inline
                                                     if (biomebase_biomemeta == null) {
                                                         biomebase_biomemeta = worldserver.a(enumcreaturetype, (BlockPosition) blockposition_mutableblockposition);
                                                         if (biomebase_biomemeta == null) {
@@ -222,7 +222,7 @@ public final class SpawnerCreature {
                                                             return j1;
                                                         }
 
-                                                        entityinsentient.setPositionRotation((double) f, (double) k3, (double) f1, worldserver.random.nextFloat() * 360.0F, 0.0F);
+                                                        entityinsentient.setPositionRotation((double) f, (double) j2, (double) f1, worldserver.random.nextFloat() * 360.0F, 0.0F);
                                                         if (entityinsentient.P() && entityinsentient.canSpawn()) {
                                                             groupdataentity = entityinsentient.prepare(worldserver.D(new BlockPosition(entityinsentient)), groupdataentity);
                                                             if (entityinsentient.canSpawn()) {
diff --git a/src/main/java/net/minecraft/server/StructureBoundingBox.java b/src/main/java/net/minecraft/server/StructureBoundingBox.java
index d9329bd4245ef76b84c11f2c2094515998def4b9..f0b29e5266472d77c4dea1046983b453e8e08135 100644
--- a/src/main/java/net/minecraft/server/StructureBoundingBox.java
+++ b/src/main/java/net/minecraft/server/StructureBoundingBox.java
@@ -36,8 +36,10 @@ public class StructureBoundingBox {
         case NORTH:
             return new StructureBoundingBox(i + l, j + i1, k - i2 + 1 + j1, i + k1 - 1 + l, j + l1 - 1 + i1, k + j1);
 
+            /* // NeonPaper - Optimize
         case SOUTH:
             return new StructureBoundingBox(i + l, j + i1, k + j1, i + k1 - 1 + l, j + l1 - 1 + i1, k + i2 - 1 + j1);
+            */ // NeonPaper end
 
         case WEST:
             return new StructureBoundingBox(i - i2 + 1 + j1, j + i1, k + l, i + j1, j + l1 - 1 + i1, k + k1 - 1 + l);
diff --git a/src/main/java/net/minecraft/server/TileEntityBeacon.java b/src/main/java/net/minecraft/server/TileEntityBeacon.java
index a57b1717105839b6254ef92cc8975a690b7d02f7..b29fe2891968617cb58b00f6c2ebd7ee147c96a5 100644
--- a/src/main/java/net/minecraft/server/TileEntityBeacon.java
+++ b/src/main/java/net/minecraft/server/TileEntityBeacon.java
@@ -28,7 +28,7 @@ public class TileEntityBeacon extends TileEntityContainer implements ITickable,
 
     public static final MobEffectList[][] a = new MobEffectList[][] { { MobEffects.FASTER_MOVEMENT, MobEffects.FASTER_DIG}, { MobEffects.RESISTANCE, MobEffects.JUMP}, { MobEffects.INCREASE_DAMAGE}, { MobEffects.REGENERATION}};
     private static final Set<MobEffectList> f = Sets.newHashSet();
-    private final List<TileEntityBeacon.BeaconColorTracker> g = Lists.newArrayList();
+    // private final List<TileEntityBeacon.BeaconColorTracker> g = Collections.emptyList(); // NeonPaper - Optimize unused
     private boolean j;
     public int levels = -1;
     @Nullable
@@ -42,7 +42,7 @@ public class TileEntityBeacon extends TileEntityContainer implements ITickable,
     private int maxStack = MAX_STACK;
 
     public List<ItemStack> getContents() {
-        return Arrays.asList(this.inventorySlot);
+        return Collections.singletonList(this.inventorySlot); // NeonPaper - Optimize
     }
 
     public void onOpen(CraftHumanEntity who) {
@@ -163,7 +163,7 @@ public class TileEntityBeacon extends TileEntityContainer implements ITickable,
     }
 
     private void E() {
-        if (this.j && this.levels > 0 && !this.world.isClientSide && this.primaryEffect != null) {
+        if (this.j && this.levels > 0 && this.primaryEffect != null) { // NeonPaper - Remove isClientSide check
             byte b0 = getAmplification();
 
             int i = getLevel();
@@ -186,11 +186,11 @@ public class TileEntityBeacon extends TileEntityContainer implements ITickable,
         int l = this.levels;
 
         this.levels = 0;
-        this.g.clear();
+        // this.g.clear(); // NeonPaper - Optimize unused
         this.j = true;
         TileEntityBeacon.BeaconColorTracker tileentitybeacon_beaconcolortracker = new TileEntityBeacon.BeaconColorTracker(EnumColor.WHITE.f());
 
-        this.g.add(tileentitybeacon_beaconcolortracker);
+        // this.g.add(tileentitybeacon_beaconcolortracker); // NeonPaper - Optimize unused
         boolean flag = true;
         BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition();
 
@@ -206,7 +206,7 @@ public class TileEntityBeacon extends TileEntityContainer implements ITickable,
                 if (iblockdata.getBlock() != Blocks.STAINED_GLASS_PANE) {
                     if (iblockdata.c() >= 15 && iblockdata.getBlock() != Blocks.BEDROCK) {
                         this.j = false;
-                        this.g.clear();
+                        // this.g.clear(); // NeonPaper - Optimize unused
                         break;
                     }
 
@@ -225,7 +225,7 @@ public class TileEntityBeacon extends TileEntityContainer implements ITickable,
                 tileentitybeacon_beaconcolortracker.a();
             } else {
                 tileentitybeacon_beaconcolortracker = new TileEntityBeacon.BeaconColorTracker(afloat);
-                this.g.add(tileentitybeacon_beaconcolortracker);
+                // this.g.add(tileentitybeacon_beaconcolortracker); // NeonPaper - Optimize unused
             }
 
             flag = false;
@@ -262,7 +262,7 @@ public class TileEntityBeacon extends TileEntityContainer implements ITickable,
             }
         }
 
-        if (!this.world.isClientSide && l < this.levels) {
+        if (l < this.levels) { // NeonPaper - Remove isClientSide check
             Iterator iterator = this.world.a(EntityPlayer.class, (new AxisAlignedBB((double) i, (double) j, (double) k, (double) i, (double) (j - 4), (double) k)).grow(10.0D, 5.0D, 10.0D)).iterator();
 
             while (iterator.hasNext()) {
diff --git a/src/main/java/net/minecraft/server/TileEntityBrewingStand.java b/src/main/java/net/minecraft/server/TileEntityBrewingStand.java
index 872c42c0783a6250d0965183f2e7f0b85a5871be..141a68b4c7241a8bc1f48bd7ff8452b1b2787b17 100644
--- a/src/main/java/net/minecraft/server/TileEntityBrewingStand.java
+++ b/src/main/java/net/minecraft/server/TileEntityBrewingStand.java
@@ -136,7 +136,7 @@ public class TileEntityBrewingStand extends TileEntityContainer implements ITick
             this.update();
         }
 
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             boolean[] aboolean = this.n();
 
             if (!Arrays.equals(aboolean, this.j)) {
diff --git a/src/main/java/net/minecraft/server/TileEntityChest.java b/src/main/java/net/minecraft/server/TileEntityChest.java
index 631304122cf488fc7f83c016c508329ad00a6b59..b48e8aeb9f0dddb3d722e92ecaee04d5785a9d0b 100644
--- a/src/main/java/net/minecraft/server/TileEntityChest.java
+++ b/src/main/java/net/minecraft/server/TileEntityChest.java
@@ -290,7 +290,7 @@ public class TileEntityChest extends TileEntityLootable { // Paper - Remove ITic
             if (this.l < 0) {
                 this.l = 0;
             }
-            int oldPower = Math.max(0, Math.min(15, this.l)); // CraftBukkit - Get power before new viewer is added
+            int oldPower = Math.min(15, this.l); // CraftBukkit - Get power before new viewer is added // NeonPaper - Optimize
 
             ++this.l;
 
diff --git a/src/main/java/net/minecraft/server/TileEntityEndGateway.java b/src/main/java/net/minecraft/server/TileEntityEndGateway.java
index 557f06017b1bededaa7b9add58c7fcbdad766cec..eb2dbbe53498177d2ba45c32068ee7baacb7d51a 100644
--- a/src/main/java/net/minecraft/server/TileEntityEndGateway.java
+++ b/src/main/java/net/minecraft/server/TileEntityEndGateway.java
@@ -31,7 +31,7 @@ public class TileEntityEndGateway extends TileEntityEnderPortal implements ITick
         }
 
         if (this.exactTeleport) {
-            nbttagcompound.setBoolean("ExactTeleport", this.exactTeleport);
+            nbttagcompound.setBoolean("ExactTeleport", /*this.exactTeleport*/true); // NeonPaper - Optimize
         }
 
         return nbttagcompound;
@@ -54,7 +54,7 @@ public class TileEntityEndGateway extends TileEntityEnderPortal implements ITick
         ++this.f;
         if (flag1) {
             --this.g;
-        } else if (!this.world.isClientSide) {
+        } else if (true) { // NeonPaper - Remove isClientSide check
             List list = this.world.a(Entity.class, new AxisAlignedBB(this.getPosition()));
 
             if (!list.isEmpty()) {
@@ -90,7 +90,7 @@ public class TileEntityEndGateway extends TileEntityEnderPortal implements ITick
     }
 
     public void h() {
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             this.g = 40;
             this.world.playBlockAction(this.getPosition(), this.getBlock(), 1, 0);
             this.update();
@@ -108,7 +108,7 @@ public class TileEntityEndGateway extends TileEntityEnderPortal implements ITick
     }
 
     public void a(Entity entity) {
-        if (!this.world.isClientSide && !this.f()) {
+        if (!this.f()) { // NeonPaper - Remove isClientSide check
             this.g = 100;
             if (this.exitPortal == null && this.world.worldProvider instanceof WorldProviderTheEnd) {
                 this.k();
diff --git a/src/main/java/net/minecraft/server/TileEntityFurnace.java b/src/main/java/net/minecraft/server/TileEntityFurnace.java
index 7a142810594d9bfe9f84f206ce661f8b8c138785..9254fe05dff14e863160315326de7eb5f27710c2 100644
--- a/src/main/java/net/minecraft/server/TileEntityFurnace.java
+++ b/src/main/java/net/minecraft/server/TileEntityFurnace.java
@@ -179,7 +179,7 @@ public class TileEntityFurnace extends TileEntityContainer implements ITickable,
             this.burnTime -= elapsedTicks; // CraftBukkit - use elapsedTicks in place of constant
         }
 
-        if (!this.world.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             ItemStack itemstack = (ItemStack) this.items.get(1);
 
             if (!this.isBurning() && (itemstack.isEmpty() || ((ItemStack) this.items.get(0)).isEmpty())) {
diff --git a/src/main/java/net/minecraft/server/TileEntityHopper.java b/src/main/java/net/minecraft/server/TileEntityHopper.java
index 5198a590a7711f228429c3e83b3722f975dd3e43..925f78941d06b50df2ff18c401943485d68fed0e 100644
--- a/src/main/java/net/minecraft/server/TileEntityHopper.java
+++ b/src/main/java/net/minecraft/server/TileEntityHopper.java
@@ -110,7 +110,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
     }
 
     public void e() {
-        if (this.world != null && !this.world.isClientSide) {
+        if (this.world != null) { // NeonPaper - Remove isClientSide check
             --this.f;
             this.g = this.world.getTime();
             if (!this.J()) {
@@ -127,7 +127,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
 
     private boolean o() {
         mayAcceptItems = false; // Paper - at the beginning of a tick, assume we can't accept items
-        if (this.world != null && !this.world.isClientSide) {
+        if (this.world != null) { // NeonPaper - Remove isClientSide check
             if (!this.J() && BlockHopper.f(this.v())) {
                 boolean flag = false;
 
@@ -410,7 +410,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
             int i = aint.length;
 
             for (int j = 0; j < i; ++j) {
-                int k = aint1[j];
+                int k = aint[j]; // NeonPaper - Inline
                 ItemStack itemstack = iworldinventory.getItem(k);
 
                 if (itemstack.isEmpty() || itemstack.getCount() != itemstack.getMaxStackSize()) {
@@ -440,7 +440,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
             int i = aint.length;
 
             for (int j = 0; j < i; ++j) {
-                int k = aint1[j];
+                int k = aint[j]; // NeonPaper - Inline
 
                 if (!iworldinventory.getItem(k).isEmpty()) {
                     return false;
@@ -484,7 +484,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
                 int i = aint.length;
 
                 for (int j = 0; j < i; ++j) {
-                    int k = aint1[j];
+                    int k = aint[j]; // NeonPaper - Inline
 
                     if (a(ihopper, iinventory, k, enumdirection)) {
                         return true;
@@ -649,7 +649,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
                     if (!tileentityhopper.K()) {
                         byte b0 = 0;
 
-                        if (iinventory != null && iinventory instanceof TileEntityHopper) {
+                        if (/*iinventory != null &&*/ iinventory instanceof TileEntityHopper) { // NeonPaper - Optimize
                             TileEntityHopper tileentityhopper1 = (TileEntityHopper) iinventory;
 
                             if (tileentityhopper.g >= tileentityhopper1.g) {
diff --git a/src/main/java/net/minecraft/server/TileEntitySign.java b/src/main/java/net/minecraft/server/TileEntitySign.java
index 95de8b055bb9c07ab83559f8d0c107837f400b41..a26d00127c6f0c2f66aa270bedec7663aa0ea2d2 100644
--- a/src/main/java/net/minecraft/server/TileEntitySign.java
+++ b/src/main/java/net/minecraft/server/TileEntitySign.java
@@ -167,7 +167,7 @@ public class TileEntitySign extends TileEntity {
             }
 
             public void a(CommandObjectiveExecutor.EnumCommandResult commandobjectiveexecutor_enumcommandresult, int i) {
-                if (TileEntitySign.this.world != null && !TileEntitySign.this.world.isClientSide) {
+                if (TileEntitySign.this.world != null) { // NeonPaper - Remove isClientSide check
                     TileEntitySign.this.i.a(TileEntitySign.this.world.getMinecraftServer(), this, commandobjectiveexecutor_enumcommandresult, i);
                 }
 
diff --git a/src/main/java/net/minecraft/server/TileEntitySkull.java b/src/main/java/net/minecraft/server/TileEntitySkull.java
index dd2665881f12697a51a7bd90731258799e13d16e..c63481f41063ed15c7c1ef4752ded53a8f1bd202 100644
--- a/src/main/java/net/minecraft/server/TileEntitySkull.java
+++ b/src/main/java/net/minecraft/server/TileEntitySkull.java
@@ -29,8 +29,10 @@ public class TileEntitySkull extends TileEntity /*implements ITickable*/ { // Pa
     private int a;
     public int rotation;
     private GameProfile g;
+    /* // NeonPaper start - Optimize unused
     private int h;
     private boolean i;
+    */ // NeonPaper end
     private static UserCache j;
     private static MinecraftSessionService k;
     // Spigot start
@@ -129,6 +131,7 @@ public class TileEntitySkull extends TileEntity /*implements ITickable*/ { // Pa
 
     }
 
+    /* // NeonPaper start - Optimize unused
     public void e() {
         if (this.a == 5) {
             if (this.world.isBlockIndirectlyPowered(this.position)) {
@@ -140,6 +143,7 @@ public class TileEntitySkull extends TileEntity /*implements ITickable*/ { // Pa
         }
 
     }
+    */ // NeonPaper end
 
     @Nullable
     public GameProfile getGameProfile() {
diff --git a/src/main/java/net/minecraft/server/TileEntityStructure.java b/src/main/java/net/minecraft/server/TileEntityStructure.java
index cda58ee244abceba5301c03c1a2ce7ef4a6e8176..0d56bd770b5c1ef1a1bdea327688a91e5b03b807 100644
--- a/src/main/java/net/minecraft/server/TileEntityStructure.java
+++ b/src/main/java/net/minecraft/server/TileEntityStructure.java
@@ -131,7 +131,7 @@ public class TileEntityStructure extends TileEntity {
         if (!entityhuman.isCreativeAndOp()) {
             return false;
         } else {
-            if (entityhuman.getWorld().isClientSide) {
+            if (false) { // NeonPaper - Remove isClientSide check
                 entityhuman.a(this);
             }
 
@@ -266,7 +266,7 @@ public class TileEntityStructure extends TileEntity {
             if (iblockdata.getBlock() == Blocks.STRUCTURE_BLOCK) {
                 TileEntity tileentity = this.world.getTileEntity(blockposition_mutableblockposition);
 
-                if (tileentity != null && tileentity instanceof TileEntityStructure) {
+                if (/*tileentity != null &&*/ tileentity instanceof TileEntityStructure) { // NeonPaper - Optimize
                     arraylist.add((TileEntityStructure) tileentity);
                 }
             }
@@ -319,7 +319,7 @@ public class TileEntityStructure extends TileEntity {
     }
 
     public boolean b(boolean flag) {
-        if (this.l == TileEntityStructure.UsageMode.SAVE && !this.world.isClientSide && !UtilColor.b(this.a)) {
+        if (this.l == TileEntityStructure.UsageMode.SAVE && !UtilColor.b(this.a)) { // NeonPaper - Remove isClientSide check
             BlockPosition blockposition = this.getPosition().a((BaseBlockPosition) this.h);
             WorldServer worldserver = (WorldServer) this.world;
             MinecraftServer minecraftserver = this.world.getMinecraftServer();
@@ -339,7 +339,7 @@ public class TileEntityStructure extends TileEntity {
     }
 
     public boolean c(boolean flag) {
-        if (this.l == TileEntityStructure.UsageMode.LOAD && !this.world.isClientSide && !UtilColor.b(this.a)) {
+        if (this.l == TileEntityStructure.UsageMode.LOAD && !UtilColor.b(this.a)) { // NeonPaper - Remove isClientSide check
             BlockPosition blockposition = this.getPosition();
             BlockPosition blockposition1 = blockposition.a((BaseBlockPosition) this.h);
             WorldServer worldserver = (WorldServer) this.world;
@@ -391,7 +391,7 @@ public class TileEntityStructure extends TileEntity {
     }
 
     public boolean E() {
-        if (this.l == TileEntityStructure.UsageMode.LOAD && !this.world.isClientSide) {
+        if (this.l == TileEntityStructure.UsageMode.LOAD) { // NeonPaper - Remove isClientSide check
             WorldServer worldserver = (WorldServer) this.world;
             MinecraftServer minecraftserver = this.world.getMinecraftServer();
             DefinedStructureManager definedstructuremanager = worldserver.y();
diff --git a/src/main/java/net/minecraft/server/UserCache.java b/src/main/java/net/minecraft/server/UserCache.java
index 6a750c25eb8f5cefef68358135134d5831c71081..8d75289cd76d8a101d9b8a1bee93ad4b3406a0f0 100644
--- a/src/main/java/net/minecraft/server/UserCache.java
+++ b/src/main/java/net/minecraft/server/UserCache.java
@@ -120,7 +120,7 @@ public class UserCache {
             date = calendar.getTime();
         }
 
-        String s = gameprofile.getName().toLowerCase(Locale.ROOT);
+        // String s = gameprofile.getName().toLowerCase(Locale.ROOT); // NeonPaper - Unused
         UserCache.UserCacheEntry usercache_usercacheentry = new UserCache.UserCacheEntry(gameprofile, date, null);
 
         //if (this.e.containsKey(uuid)) { // Paper
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 39c259cba65c5734e5c7e907c52600589a11cfb2..85c76450eeaa386104cb298a3c33bec56ee3c71c 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -102,7 +102,7 @@ public abstract class World implements IBlockAccess {
     public final MethodProfiler methodProfiler;
     private final Calendar N;
     public Scoreboard scoreboard;
-    public final boolean isClientSide;
+    public final boolean isClientSide = false; // NeonPaper - Remove isClientSide check
     public boolean allowMonsters;
     public boolean allowAnimals;
     private boolean O;
@@ -185,7 +185,7 @@ public abstract class World implements IBlockAccess {
         this.methodProfiler = methodprofiler;
         this.worldData = worlddata;
         this.worldProvider = worldprovider;
-        this.isClientSide = flag;
+        // this.isClientSide = flag; // NeonPaper - Remove isClientSide check
         this.P = worldprovider.getWorldBorder();
         // CraftBukkit start
         getWorldBorder().world = (WorldServer) this;
@@ -381,11 +381,11 @@ public abstract class World implements IBlockAccess {
         // CraftBukkit end
         if (blockposition.isInvalidYLocation()) { // Paper
             return false;
-        } else if (!this.isClientSide && this.worldData.getType() == WorldType.DEBUG_ALL_BLOCK_STATES) {
+        } else if (false) { // NeonPaper - Remove isClientSide check, Remove DEBUG_ALL_BLOCK_STATES world type
             return false;
         } else {
             Chunk chunk = this.getChunkAtWorldCoords(blockposition);
-            Block block = iblockdata.getBlock();
+            // Block block = iblockdata.getBlock(); // NeonPaper - Unused
 
             // CraftBukkit start - capture blockstates
             BlockState blockstate = null;
@@ -441,16 +441,16 @@ public abstract class World implements IBlockAccess {
 
     // CraftBukkit start - Split off from above in order to directly send client and physic updates
     public void notifyAndUpdatePhysics(BlockPosition blockposition, Chunk chunk, IBlockData oldBlock, IBlockData newBlock, int i) {
-        if ((i & 2) != 0 && (!this.isClientSide || (i & 4) == 0) && (chunk == null || chunk.isReady())) { // allow chunk to be null here as chunk.isReady() is false when we send our notification during block placement
+        if ((i & 2) != 0 && (chunk == null || chunk.isReady())) { // allow chunk to be null here as chunk.isReady() is false when we send our notification during block placement // NeonPaper - Remove isClientSide check
             this.notify(blockposition, oldBlock, newBlock, i);
         }
 
-        if (!this.isClientSide && (i & 1) != 0) {
+        if ((i & 1) != 0) { // NeonPaper - Remove isClientSide check
             this.update(blockposition, oldBlock.getBlock(), true);
             if (newBlock.n()) {
                 this.updateAdjacentComparators(blockposition, newBlock.getBlock());
             }
-        } else if (!this.isClientSide && (i & 16) == 0) {
+        } else if ((i & 16) == 0) { // NeonPaper - Remove isClientSide check
             this.c(blockposition, newBlock.getBlock());
         }
     }
@@ -488,7 +488,7 @@ public abstract class World implements IBlockAccess {
     }
 
     public void update(BlockPosition blockposition, Block block, boolean flag) {
-        if (this.worldData.getType() != WorldType.DEBUG_ALL_BLOCK_STATES) {
+        if (true) { // NeonPaper - Remove DEBUG_ALL_BLOCK_STATES world type
             // CraftBukkit start
             if (populating) {
                 return;
@@ -579,7 +579,7 @@ public abstract class World implements IBlockAccess {
     }
 
     public void a(BlockPosition blockposition, final Block block, BlockPosition blockposition1) {
-        if (!this.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             IBlockData iblockdata = this.getType(blockposition);
 
             try {
@@ -623,7 +623,7 @@ public abstract class World implements IBlockAccess {
     }
 
     public void b(BlockPosition blockposition, final Block block, BlockPosition blockposition1) {
-        if (!this.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             IBlockData iblockdata = this.getType(blockposition);
 
             if (iblockdata.getBlock() == Blocks.dk) {
@@ -786,8 +786,11 @@ public abstract class World implements IBlockAccess {
         int k;
 
         if (i >= -30000000 && j >= -30000000 && i < 30000000 && j < 30000000) {
-            if (this.isChunkLoaded(i >> 4, j >> 4, true)) {
-                k = this.getChunkAt(i >> 4, j >> 4).b(i & 15, j & 15);
+            // NeonPaper start - Optimize
+            Chunk chunk = this.getChunkIfLoaded(i >> 4, j >> 4);
+            if (chunk != null) {
+                k = chunk.b(i & 15, j & 15);
+                // NeonPaper end
             } else {
                 k = 0;
             }
@@ -801,11 +804,13 @@ public abstract class World implements IBlockAccess {
     @Deprecated
     public int d(int i, int j) {
         if (i >= -30000000 && j >= -30000000 && i < 30000000 && j < 30000000) {
-            if (!this.isChunkLoaded(i >> 4, j >> 4, true)) {
+            // NeonPaper start - Optimize
+            Chunk chunk = this.getChunkIfLoaded(i >> 4, j >> 4);
+            if (chunk == null) {
                 return 0;
             } else {
-                Chunk chunk = this.getChunkAt(i >> 4, j >> 4);
-
+                // Chunk chunk = this.getChunkAt(i >> 4, j >> 4); // NeonPaper
+                // NeonPaper end
                 return chunk.w();
             }
         } else {
@@ -1494,7 +1499,7 @@ public abstract class World implements IBlockAccess {
                 CrashReport crashreport = CrashReport.a(throwable, "Ticking entity");
                 CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Entity being ticked");
 
-                if (entity == null) {
+                if (/*entity == null*/false) { // NeonPaper - Optimize
                     crashreportsystemdetails.a("Entity", (Object) "~~NULL~~");
                 } else {
                     entity.appendEntityCrashDetails(crashreportsystemdetails);
@@ -1549,7 +1554,7 @@ public abstract class World implements IBlockAccess {
         //if (tickPosition < 0) tickPosition = 0;
         for (tickPosition = 0; tickPosition < entityList.size(); tickPosition++) {
             // Paper end
-            tickPosition = (tickPosition < entityList.size()) ? tickPosition : 0;
+            tickPosition = (/*tickPosition < entityList.size()*/true) ? tickPosition : 0; // NeonPaper - Optimize
             entity = (Entity) this.entityList.get(this.tickPosition);
             // CraftBukkit end
             Entity entity1 = entity.bJ();
@@ -1624,7 +1629,7 @@ public abstract class World implements IBlockAccess {
         // Iterator iterator = this.tileEntityListTick.iterator();
         int tilesThisCycle = 0;
         for (tileTickPosition = 0; tileTickPosition < tileEntityListTick.size(); tileTickPosition++) { // Paper - Disable tick limiters
-            tileTickPosition = (tileTickPosition < tileEntityListTick.size()) ? tileTickPosition : 0;
+            tileTickPosition = (/*tileTickPosition < tileEntityListTick.size()*/true) ? tileTickPosition : 0; // NeonPaper - Optimize
             TileEntity tileentity = (TileEntity) this.tileEntityListTick.get(tileTickPosition);
             // Spigot start
             if (tileentity == null) {
@@ -1733,7 +1738,7 @@ public abstract class World implements IBlockAccess {
             this.tileEntityListTick.add(tileentity);
         }
 
-        if (this.isClientSide) {
+        if (false) { // NeonPaper - Remove isClientSide check
             BlockPosition blockposition = tileentity.getPosition();
             IBlockData iblockdata = this.getType(blockposition);
 
@@ -2068,12 +2073,18 @@ public abstract class World implements IBlockAccess {
         double d0 = 1.0D / ((axisalignedbb.d - axisalignedbb.a) * 2.0D + 1.0D);
         double d1 = 1.0D / ((axisalignedbb.e - axisalignedbb.b) * 2.0D + 1.0D);
         double d2 = 1.0D / ((axisalignedbb.f - axisalignedbb.c) * 2.0D + 1.0D);
+        // NeonPaper start - Optimize
+        /*
         double d3 = (1.0D - Math.floor(1.0D / d0) * d0) / 2.0D;
         double d4 = (1.0D - Math.floor(1.0D / d2) * d2) / 2.0D;
+        */
 
         if (d0 >= 0.0D && d1 >= 0.0D && d2 >= 0.0D) {
             int i = 0;
             int j = 0;
+            double d3 = (1.0D - Math.floor(1.0D / d0) * d0) / 2.0D;
+            double d4 = (1.0D - Math.floor(1.0D / d2) * d2) / 2.0D;
+            // NeonPaper end
 
             for (float f = 0.0F; f <= 1.0F; f = (float) ((double) f + d0)) {
                 for (float f1 = 0.0F; f1 <= 1.0F; f1 = (float) ((double) f1 + d1)) {
@@ -2115,9 +2126,10 @@ public abstract class World implements IBlockAccess {
             return null;
         } else {
             // CraftBukkit start
-            if (capturedTileEntities.containsKey(blockposition)) {
-                return capturedTileEntities.get(blockposition);
-            }
+            // NeonPaper start - Optimize map get
+            TileEntity tileEntity = capturedTileEntities.get(blockposition);
+            if (tileEntity != null) return tileEntity;
+            // NeonPaper end
             // CraftBukkit end
 
             TileEntity tileentity = null;
@@ -2260,7 +2272,7 @@ public abstract class World implements IBlockAccess {
 
     protected void t() {
         if (this.worldProvider.m()) {
-            if (!this.isClientSide) {
+            if (true) { // NeonPaper - Remove isClientSide check
                 boolean flag = this.getGameRules().getBoolean("doWeatherCycle");
 
                 if (flag) {
@@ -2407,7 +2419,7 @@ public abstract class World implements IBlockAccess {
         boolean flag = false;
 
         if (this.worldProvider.m()) {
-            flag |= this.c(EnumSkyBlock.SKY, blockposition);
+            flag = this.c(EnumSkyBlock.SKY, blockposition); // NeonPaper - Optimize
         }
 
         flag |= this.c(EnumSkyBlock.BLOCK, blockposition);
@@ -2438,7 +2450,7 @@ public abstract class World implements IBlockAccess {
                 BlockPosition.PooledBlockPosition blockposition_pooledblockposition = BlockPosition.PooledBlockPosition.s();
 
                 try {
-                    EnumDirection[] aenumdirection = EnumDirection.values();
+                    EnumDirection[] aenumdirection = EnumDirection.VALUES; // NeonPaper - Single values array
                     int k = aenumdirection.length;
 
                     for (int l = 0; l < k; ++l) {
@@ -2513,7 +2525,7 @@ public abstract class World implements IBlockAccess {
                             k3 = MathHelper.a(k2 - k1);
                             if (i3 + j3 + k3 < 17) {
                                 BlockPosition.PooledBlockPosition blockposition_pooledblockposition = BlockPosition.PooledBlockPosition.s();
-                                EnumDirection[] aenumdirection = EnumDirection.values();
+                                EnumDirection[] aenumdirection = EnumDirection.VALUES; // NeonPaper - Single values array
                                 int i4 = aenumdirection.length;
 
                                 for (int j4 = 0; j4 < i4; ++j4) {
@@ -2621,8 +2633,11 @@ public abstract class World implements IBlockAccess {
 
         for (int i1 = i; i1 <= j; ++i1) {
             for (int j1 = k; j1 <= l; ++j1) {
-                if (this.isChunkLoaded(i1, j1, true)) {
-                    this.getChunkAt(i1, j1).a(entity, axisalignedbb, arraylist, predicate);
+                // NeonPaper start - Optimize
+                Chunk chunk = this.getChunkIfLoaded(i1, j1);
+                if (chunk != null) {
+                    chunk.a(entity, axisalignedbb, arraylist, predicate);
+                    // NeonPaper end
                 }
             }
         }
@@ -2674,8 +2689,11 @@ public abstract class World implements IBlockAccess {
 
         for (int i1 = i; i1 < j; ++i1) {
             for (int j1 = k; j1 < l; ++j1) {
-                if (this.isChunkLoaded(i1, j1, true)) {
-                    this.getChunkAt(i1, j1).a(oclass, axisalignedbb, arraylist, predicate);
+                // NeonPaper start - Optimize
+                Chunk chunk = this.getChunkIfLoaded(i1, j1);
+                if (chunk != null) {
+                    chunk.a(oclass, axisalignedbb, arraylist, predicate);
+                    // NeonPaper end
                 }
             }
         }
@@ -2819,7 +2837,7 @@ public abstract class World implements IBlockAccess {
                             return i;
                         } else {
                             i = Math.max(i, this.getBlockPower(blockposition.east(), EnumDirection.EAST));
-                            return i >= 15 ? i : i;
+                            return /*i >= 15 ? i : i*/i; // NeonPaper - Optimize
                         }
                     }
                 }
@@ -2843,7 +2861,7 @@ public abstract class World implements IBlockAccess {
 
     public int z(BlockPosition blockposition) {
         int i = 0;
-        EnumDirection[] aenumdirection = EnumDirection.values();
+        EnumDirection[] aenumdirection = EnumDirection.VALUES; // NeonPaper - Single values array
         int j = aenumdirection.length;
 
         for (int k = 0; k < j; ++k) {
@@ -3063,7 +3081,7 @@ public abstract class World implements IBlockAccess {
     // Calls the method that checks to see if players are sleeping
     // Called by CraftPlayer.setPermanentSleeping()
     public void checkSleepStatus() {
-        if (!this.isClientSide) {
+        if (true) { // NeonPaper - Remove isClientSide check
             this.everyoneSleeping();
         }
     }
@@ -3282,13 +3300,16 @@ public abstract class World implements IBlockAccess {
 
     public boolean shouldStayLoaded(int i,  int j) { return e(i, j); } // Paper - OBFHELPER
     public boolean e(int i, int j) {
+        // NeonPaper start - Optimize
+        if (!this.keepSpawnInMemory) return false;
         BlockPosition blockposition = this.getSpawn();
         int k = i * 16 + 8 - blockposition.getX();
         int l = j * 16 + 8 - blockposition.getZ();
         boolean flag = true;
         short keepLoadedRange = paperConfig.keepLoadedRange; // Paper
 
-        return k >= -keepLoadedRange && k <= keepLoadedRange && l >= -keepLoadedRange && l <= keepLoadedRange && this.keepSpawnInMemory; // CraftBukkit - Added 'this.keepSpawnInMemory' // Paper - Re-add range var
+        return k >= -keepLoadedRange && k <= keepLoadedRange && l >= -keepLoadedRange && l <= keepLoadedRange /*&& this.keepSpawnInMemory*/; // CraftBukkit - Added 'this.keepSpawnInMemory' // Paper - Re-add range var 
+        // NeonPaper end
     }
 
     public void a(Packet<?> packet) {
diff --git a/src/main/java/net/minecraft/server/WorldGenLargeFeature.java b/src/main/java/net/minecraft/server/WorldGenLargeFeature.java
index 7a76544ff8c69f2b33e41b6729dcf769f0d54eff..e33570df0da1bbc058c91848663b4db0f5fd16bb 100644
--- a/src/main/java/net/minecraft/server/WorldGenLargeFeature.java
+++ b/src/main/java/net/minecraft/server/WorldGenLargeFeature.java
@@ -93,7 +93,7 @@ public class WorldGenLargeFeature extends StructureGenerator {
     public boolean a(BlockPosition blockposition) {
         StructureStart structurestart = this.c(blockposition);
 
-        if (structurestart != null && structurestart instanceof WorldGenLargeFeature.WorldGenLargeFeatureStart && !structurestart.a.isEmpty()) {
+        if (/*structurestart != null &&*/ structurestart instanceof WorldGenLargeFeature.WorldGenLargeFeatureStart && !structurestart.a.isEmpty()) { // NeonPaper - Optimize
             StructurePiece structurepiece = (StructurePiece) structurestart.a.get(0);
 
             return structurepiece instanceof WorldGenRegistration.WorldGenWitchHut;
diff --git a/src/main/java/net/minecraft/server/WorldGenLightStone1.java b/src/main/java/net/minecraft/server/WorldGenLightStone1.java
index a380ae917aa0fd8ad2d7e7f24fc652b009526fed..dd46a92d6e7c26d23ec4eb87e296a2b585a76706 100644
--- a/src/main/java/net/minecraft/server/WorldGenLightStone1.java
+++ b/src/main/java/net/minecraft/server/WorldGenLightStone1.java
@@ -19,7 +19,7 @@ public class WorldGenLightStone1 extends WorldGenerator {
 
                 if (world.getType(blockposition1).getMaterial() == Material.AIR) {
                     int j = 0;
-                    EnumDirection[] aenumdirection = EnumDirection.values();
+                    EnumDirection[] aenumdirection = EnumDirection.VALUES; // NeonPaper - Single values array
                     int k = aenumdirection.length;
 
                     for (int l = 0; l < k; ++l) {
diff --git a/src/main/java/net/minecraft/server/WorldGenLightStone2.java b/src/main/java/net/minecraft/server/WorldGenLightStone2.java
index e8b3129ce154fc948576e0475a8a06723e9d8314..9938f68ae5b35dec7f3dea30b3e1f9d132d59bf3 100644
--- a/src/main/java/net/minecraft/server/WorldGenLightStone2.java
+++ b/src/main/java/net/minecraft/server/WorldGenLightStone2.java
@@ -19,7 +19,7 @@ public class WorldGenLightStone2 extends WorldGenerator {
 
                 if (world.getType(blockposition1).getMaterial() == Material.AIR) {
                     int j = 0;
-                    EnumDirection[] aenumdirection = EnumDirection.values();
+                    EnumDirection[] aenumdirection = EnumDirection.VALUES; // NeonPaper - Single values array
                     int k = aenumdirection.length;
 
                     for (int l = 0; l < k; ++l) {
diff --git a/src/main/java/net/minecraft/server/WorldGenMegaTreeAbstract.java b/src/main/java/net/minecraft/server/WorldGenMegaTreeAbstract.java
index a232c8c8e44f1d5cefb261a2dd7354af63f3f2f4..30ec06b88b9f8576201f9d9523e3916004a4cd66 100644
--- a/src/main/java/net/minecraft/server/WorldGenMegaTreeAbstract.java
+++ b/src/main/java/net/minecraft/server/WorldGenMegaTreeAbstract.java
@@ -36,7 +36,7 @@ public abstract class WorldGenMegaTreeAbstract extends WorldGenTreeAbstract {
 
                 if (j == 0) {
                     b0 = 1;
-                } else if (j >= 1 + i - 2) {
+                } else if (/*j >= 1 + i - 2*/false) { // NeonPaper - Optimize
                     b0 = 2;
                 }
 
diff --git a/src/main/java/net/minecraft/server/WorldGenMonument.java b/src/main/java/net/minecraft/server/WorldGenMonument.java
index 927d9bc6b4efa78684fcb4d2afe555c57ea0e170..c74ac77d5e7a40acdbc4b95971f9f579581b212b 100644
--- a/src/main/java/net/minecraft/server/WorldGenMonument.java
+++ b/src/main/java/net/minecraft/server/WorldGenMonument.java
@@ -15,7 +15,7 @@ public class WorldGenMonument extends StructureGenerator {
     private int d;
     private int h;
     public static final List<BiomeBase> a = Arrays.asList(new BiomeBase[] { Biomes.a, Biomes.z, Biomes.i, Biomes.l, Biomes.m});
-    public static final List<BiomeBase> b = Arrays.asList(new BiomeBase[] { Biomes.z});
+    public static final List<BiomeBase> b = java.util.Collections.singletonList(Biomes.z); // NeonPaper - Optimize
     private static final List<BiomeBase.BiomeMeta> i = Lists.newArrayList();
 
     public WorldGenMonument() {
@@ -64,11 +64,15 @@ public class WorldGenMonument extends StructureGenerator {
         i1 += (random.nextInt(this.d - this.h) + random.nextInt(this.d - this.h)) / 2;
         j1 += (random.nextInt(this.d - this.h) + random.nextInt(this.d - this.h)) / 2;
         if (k == i1 && l == j1) {
-            if (!this.g.getWorldChunkManager().a(k * 16 + 8, l * 16 + 8, 16, WorldGenMonument.b)) {
+            // NeonPaper start - Optimize
+            int i2 = k * 16 + 8;
+            int i11 = l * 16 + 8;
+            if (!this.g.getWorldChunkManager().a(i2, i11, 16, WorldGenMonument.b)) {
                 return false;
             }
 
-            boolean flag = this.g.getWorldChunkManager().a(k * 16 + 8, l * 16 + 8, 29, WorldGenMonument.a);
+            boolean flag = this.g.getWorldChunkManager().a(i2, i11, 29, WorldGenMonument.a);
+            // NeonPaper end
 
             if (flag) {
                 return true;
diff --git a/src/main/java/net/minecraft/server/WorldGenRegistration.java b/src/main/java/net/minecraft/server/WorldGenRegistration.java
index 8212159634f8be7c858357163fed094fe9f41e47..40942a6d5c36f6639b9b3f9eccd42b6a6588fe0a 100644
--- a/src/main/java/net/minecraft/server/WorldGenRegistration.java
+++ b/src/main/java/net/minecraft/server/WorldGenRegistration.java
@@ -32,7 +32,7 @@ public class WorldGenRegistration {
             } else {
                 StructureBoundingBox structureboundingbox1 = this.d();
                 BlockPosition blockposition = new BlockPosition(structureboundingbox1.a, structureboundingbox1.b, structureboundingbox1.c);
-                EnumBlockRotation[] aenumblockrotation = EnumBlockRotation.values();
+                EnumBlockRotation[] aenumblockrotation = EnumBlockRotation.VALUES; // NeonPaper - Single values array
                 MinecraftServer minecraftserver = world.getMinecraftServer();
                 DefinedStructureManager definedstructuremanager = world.getDataManager().h();
                 DefinedStructureInfo definedstructureinfo = (new DefinedStructureInfo()).a(aenumblockrotation[random.nextInt(aenumblockrotation.length)]).a(Blocks.dj).a(structureboundingbox1);
diff --git a/src/main/java/net/minecraft/server/WorldGenVillagePieces.java b/src/main/java/net/minecraft/server/WorldGenVillagePieces.java
index 9b281b6a9634081e0907b6fc2991cb92389a2a11..012cb6bcc8bbed95a41781995ffe173cb2032b18 100644
--- a/src/main/java/net/minecraft/server/WorldGenVillagePieces.java
+++ b/src/main/java/net/minecraft/server/WorldGenVillagePieces.java
@@ -630,9 +630,9 @@ public class WorldGenVillagePieces {
 
             for (i = -1; i <= 2; ++i) {
                 for (j = 0; j <= 8; ++j) {
-                    this.a(world, iblockdata7, j, 4 + i, i, structureboundingbox);
-                    if ((i > -1 || j <= 1) && (i > 0 || j <= 3) && (i > 1 || j <= 4 || j >= 6)) {
-                        this.a(world, iblockdata8, j, 4 + i, 5 - i, structureboundingbox);
+                    this.a(world, iblockdata1, j, 4 + i, i, structureboundingbox); // NeonPaper - Inline
+                    if ((i > -1 || j <= 1) && (i > 0 || j <= 3) && (i > 1 || j != 5)) { // NeonPaper - Optimize
+                        this.a(world, iblockdata2, j, 4 + i, 5 - i, structureboundingbox); // NeonPaper - Inline
                     }
                 }
             }
@@ -647,7 +647,7 @@ public class WorldGenVillagePieces {
                 this.a(world, iblockdata5, i, 2 + i, 7 - i, structureboundingbox);
 
                 for (j = 8 - i; j <= 10; ++j) {
-                    this.a(world, iblockdata10, i, 2 + i, j, structureboundingbox);
+                    this.a(world, iblockdata3, i, 2 + i, j, structureboundingbox); // NeonPaper - Inline
                 }
             }
 
@@ -657,7 +657,7 @@ public class WorldGenVillagePieces {
 
             for (i = 6; i <= 8; ++i) {
                 for (j = 5; j <= 10; ++j) {
-                    this.a(world, iblockdata9, i, 12 - i, j, structureboundingbox);
+                    this.a(world, iblockdata4, i, 12 - i, j, structureboundingbox); // NeonPaper - Inline
                 }
             }
 
@@ -691,7 +691,7 @@ public class WorldGenVillagePieces {
             this.a(world, structureboundingbox, random, 2, 1, 0, EnumDirection.NORTH);
             this.a(world, structureboundingbox, 1, 0, -1, 3, 2, -1, Blocks.AIR.getBlockData(), Blocks.AIR.getBlockData(), false);
             if (this.a(world, 2, 0, -1, structureboundingbox).getMaterial() == Material.AIR && this.a(world, 2, -1, -1, structureboundingbox).getMaterial() != Material.AIR) {
-                this.a(world, iblockdata7, 2, 0, -1, structureboundingbox);
+                this.a(world, iblockdata1, 2, 0, -1, structureboundingbox); // NeonPaper - Inline
                 if (this.a(world, 2, -1, -1, structureboundingbox).getBlock() == Blocks.GRASS_PATH) {
                     this.a(world, Blocks.GRASS.getBlockData(), 2, -1, -1, structureboundingbox);
                 }
@@ -779,8 +779,8 @@ public class WorldGenVillagePieces {
 
             for (i = -1; i <= 2; ++i) {
                 for (j = 0; j <= 8; ++j) {
-                    this.a(world, iblockdata7, j, 4 + i, i, structureboundingbox);
-                    this.a(world, iblockdata8, j, 4 + i, 5 - i, structureboundingbox);
+                    this.a(world, iblockdata1, j, 4 + i, i, structureboundingbox); // NeonPaper - Inline
+                    this.a(world, iblockdata2, j, 4 + i, 5 - i, structureboundingbox); // NeonPaper - Inline
                 }
             }
 
@@ -799,7 +799,7 @@ public class WorldGenVillagePieces {
             this.a(world, iblockdata6, 2, 1, 3, structureboundingbox);
             this.a(world, Blocks.WOODEN_PRESSURE_PLATE.getBlockData(), 2, 2, 3, structureboundingbox);
             this.a(world, iblockdata4, 1, 1, 4, structureboundingbox);
-            this.a(world, iblockdata7, 2, 1, 4, structureboundingbox);
+            this.a(world, iblockdata1, 2, 1, 4, structureboundingbox); // NeonPaper - Inline
             this.a(world, iblockdata3, 1, 1, 3, structureboundingbox);
             this.a(world, structureboundingbox, 5, 0, 1, 7, 0, 3, Blocks.DOUBLE_STONE_SLAB.getBlockData(), Blocks.DOUBLE_STONE_SLAB.getBlockData(), false);
             this.a(world, Blocks.DOUBLE_STONE_SLAB.getBlockData(), 6, 1, 1, structureboundingbox);
@@ -809,7 +809,7 @@ public class WorldGenVillagePieces {
             this.a(world, EnumDirection.NORTH, 2, 3, 1, structureboundingbox);
             this.a(world, structureboundingbox, random, 2, 1, 0, EnumDirection.NORTH);
             if (this.a(world, 2, 0, -1, structureboundingbox).getMaterial() == Material.AIR && this.a(world, 2, -1, -1, structureboundingbox).getMaterial() != Material.AIR) {
-                this.a(world, iblockdata7, 2, 0, -1, structureboundingbox);
+                this.a(world, iblockdata1, 2, 0, -1, structureboundingbox); // NeonPaper - Inline
                 if (this.a(world, 2, -1, -1, structureboundingbox).getBlock() == Blocks.GRASS_PATH) {
                     this.a(world, Blocks.GRASS.getBlockData(), 2, -1, -1, structureboundingbox);
                 }
@@ -1589,11 +1589,15 @@ public class WorldGenVillagePieces {
                 default:
                     return WorldGenVillagePieces.d(worldgenvillagepieces_worldgenvillagestartpiece, list, random, this.l.a - 1, this.l.b + i, this.l.c + j, EnumDirection.WEST, this.e());
 
+                    /* // NeonPaper start - Optimize
                 case SOUTH:
                     return WorldGenVillagePieces.d(worldgenvillagepieces_worldgenvillagestartpiece, list, random, this.l.a - 1, this.l.b + i, this.l.c + j, EnumDirection.WEST, this.e());
+                    */ // NeonPaper end
 
                 case WEST:
+                    /* // NeonPaper start - Optimize
                     return WorldGenVillagePieces.d(worldgenvillagepieces_worldgenvillagestartpiece, list, random, this.l.a + j, this.l.b + i, this.l.c - 1, EnumDirection.NORTH, this.e());
+                    */ // NeonPaper end
 
                 case EAST:
                     return WorldGenVillagePieces.d(worldgenvillagepieces_worldgenvillagestartpiece, list, random, this.l.a + j, this.l.b + i, this.l.c - 1, EnumDirection.NORTH, this.e());
@@ -1613,11 +1617,15 @@ public class WorldGenVillagePieces {
                 default:
                     return WorldGenVillagePieces.d(worldgenvillagepieces_worldgenvillagestartpiece, list, random, this.l.d + 1, this.l.b + i, this.l.c + j, EnumDirection.EAST, this.e());
 
+                    /* // NeonPaper start - Optimize
                 case SOUTH:
                     return WorldGenVillagePieces.d(worldgenvillagepieces_worldgenvillagestartpiece, list, random, this.l.d + 1, this.l.b + i, this.l.c + j, EnumDirection.EAST, this.e());
+                    */ // NeonPaper end
 
                 case WEST:
+                    /* // NeonPaper start - Optimize
                     return WorldGenVillagePieces.d(worldgenvillagepieces_worldgenvillagestartpiece, list, random, this.l.a + j, this.l.b + i, this.l.f + 1, EnumDirection.SOUTH, this.e());
+                    */ // NeonPaper end
 
                 case EAST:
                     return WorldGenVillagePieces.d(worldgenvillagepieces_worldgenvillagestartpiece, list, random, this.l.a + j, this.l.b + i, this.l.f + 1, EnumDirection.SOUTH, this.e());
diff --git a/src/main/java/net/minecraft/server/WorldManager.java b/src/main/java/net/minecraft/server/WorldManager.java
index bfe003f60b12930a08412eaa761b1aa4461ba1eb..49dfc7ea0fe28ad8a8a23050023adb97ea56eb94 100644
--- a/src/main/java/net/minecraft/server/WorldManager.java
+++ b/src/main/java/net/minecraft/server/WorldManager.java
@@ -76,13 +76,13 @@ public class WorldManager implements IWorldAccess {
             EntityPlayer entityplayer = (EntityPlayer) human;
             // Paper end
 
-            if (entityplayer != null && entityplayer.world == this.world && entityplayer.getId() != i) {
+            if (/*entityplayer != null*/true && entityplayer.world == this.world && entityplayer.getId() != i) { // NeonPaper - Optimize
                 double d0 = (double) blockposition.getX() - entityplayer.locX;
                 double d1 = (double) blockposition.getY() - entityplayer.locY;
                 double d2 = (double) blockposition.getZ() - entityplayer.locZ;
 
                 // CraftBukkit start
-                if (entityhuman != null && entityhuman instanceof EntityPlayer && !entityplayer.getBukkitEntity().canSee(((EntityPlayer) entityhuman).getBukkitEntity())) {
+                if (entityhuman instanceof EntityPlayer && !entityplayer.getBukkitEntity().canSee(((EntityPlayer) entityhuman).getBukkitEntity())) { // NeonPaper - Optimize
                     continue;
                 }
                 // CraftBukkit end
diff --git a/src/main/java/net/minecraft/server/WorldMap.java b/src/main/java/net/minecraft/server/WorldMap.java
index 59173605ee8406b021576329657a8f1477fe10ad..f573756e670fb73d12615c8a0f0eebebace3152e 100644
--- a/src/main/java/net/minecraft/server/WorldMap.java
+++ b/src/main/java/net/minecraft/server/WorldMap.java
@@ -105,11 +105,11 @@ public class WorldMap extends PersistentBase {
             for (int k = 0; k < short1; ++k) {
                 int l = k + j;
 
-                if (l >= 0 || l < 128) {
+                if (/*l >= 0 || l < 128*/true) { // NeonPaper - Optimize
                     for (int i1 = 0; i1 < short0; ++i1) {
                         int j1 = i1 + i;
 
-                        if (j1 >= 0 || j1 < 128) {
+                        if (/*j1 >= 0 || j1 < 128*/true) { // NeonPaper - Optimize
                             this.colors[j1 + l * 128] = abyte[i1 + k * short0];
                         }
                     }
diff --git a/src/main/java/net/minecraft/server/WorldProvider.java b/src/main/java/net/minecraft/server/WorldProvider.java
index 35d8d1a6e77ce070b4b1c85e8fdb0edca768dcf7..902dc7f8c326b87d5912b5f98100af2a4d9d677a 100644
--- a/src/main/java/net/minecraft/server/WorldProvider.java
+++ b/src/main/java/net/minecraft/server/WorldProvider.java
@@ -44,7 +44,7 @@ public abstract class WorldProvider {
             WorldGenFlatInfo worldgenflatinfo = WorldGenFlatInfo.a(this.b.getWorldData().getGeneratorOptions());
 
             this.c = new WorldChunkManagerHell(BiomeBase.getBiome(worldgenflatinfo.a(), Biomes.b));
-        } else if (worldtype == WorldType.DEBUG_ALL_BLOCK_STATES) {
+        } else if (false) { // NeonPaper - Remove DEBUG_ALL_BLOCK_STATES world type
             this.c = new WorldChunkManagerHell(Biomes.c);
         } else {
             this.c = new WorldChunkManager(this.b.getWorldData());
@@ -53,7 +53,7 @@ public abstract class WorldProvider {
     }
 
     public ChunkGenerator getChunkGenerator() {
-        return (ChunkGenerator) (this.type == WorldType.FLAT ? new ChunkProviderFlat(this.b, this.b.getSeed(), this.b.getWorldData().shouldGenerateMapFeatures(), this.i) : (this.type == WorldType.DEBUG_ALL_BLOCK_STATES ? new ChunkProviderDebug(this.b) : (this.type == WorldType.CUSTOMIZED ? new ChunkProviderGenerate(this.b, this.b.getSeed(), this.b.getWorldData().shouldGenerateMapFeatures(), this.i) : new ChunkProviderGenerate(this.b, this.b.getSeed(), this.b.getWorldData().shouldGenerateMapFeatures(), this.i))));
+        return (ChunkGenerator) (this.type == WorldType.FLAT ? new ChunkProviderFlat(this.b, this.b.getSeed(), this.b.getWorldData().shouldGenerateMapFeatures(), this.i) : (false ? new ChunkProviderDebug(this.b) : (this.type == WorldType.CUSTOMIZED ? new ChunkProviderGenerate(this.b, this.b.getSeed(), this.b.getWorldData().shouldGenerateMapFeatures(), this.i) : new ChunkProviderGenerate(this.b, this.b.getSeed(), this.b.getWorldData().shouldGenerateMapFeatures(), this.i)))); // NeonPaper - Remove DEBUG_ALL_BLOCK_STATES world type
     }
 
     public boolean canSpawn(int i, int j) {
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index e545e9764a4aa117896ca1b3e55d2613642d7244..488d435d94867d91337fd4a1c2dc45abf4596298 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -233,10 +233,12 @@ public class WorldServer extends World implements IAsyncTaskHandler {
             if (!(result instanceof TileEntityCommand)) {
                 result = fixTileEntity(pos, type, result);
             }
+            /* // NeonPaper start - Optimize
         } else if (type == Blocks.STRUCTURE_BLOCK) {
             if (!(result instanceof TileEntityStructure)) {
                 result = fixTileEntity(pos, type, result);
             }
+            */ // NeonPaper end
         } else if (type == Blocks.BED) {
             if (!(result instanceof TileEntityBed)) {
                 result = fixTileEntity(pos, type, result);
@@ -297,7 +299,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         this.methodProfiler.a("mobSpawner");
         // CraftBukkit start - Only call spawner if we have players online and the world allows for mobs or animals
         long time = this.worldData.getTime();
-        if (this.getGameRules().getBoolean("doMobSpawning") && this.worldData.getType() != WorldType.DEBUG_ALL_BLOCK_STATES && (this.allowMonsters || this.allowAnimals) && (this instanceof WorldServer && this.players.size() > 0)) {
+        if (this.getGameRules().getBoolean("doMobSpawning") && true && (this.allowMonsters || this.allowAnimals) && (this instanceof WorldServer && this.players.size() > 0)) { // NeonPaper - Remove DEBUG_ALL_BLOCK_STATES world type
             timings.mobSpawn.startTiming(); // Spigot
             this.spawnerCreature.a(this, this.allowMonsters && (this.ticksPerMonsterSpawns != 0 && time % this.ticksPerMonsterSpawns == 0L), this.allowAnimals && (this.ticksPerAnimalSpawns != 0 && time % this.ticksPerAnimalSpawns == 0L), this.worldData.getTime() % 400L == 0L);
             timings.mobSpawn.stopTiming(); // Spigot
@@ -422,7 +424,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
     }
 
     public boolean everyoneDeeplySleeping() {
-        if (this.Q && !this.isClientSide) {
+        if (this.Q) { // NeonPaper - Remove isClientSide check
             Iterator iterator = this.players.iterator();
 
             // CraftBukkit - This allows us to assume that some people are in bed but not really, allowing time to pass in spite of AFKers
@@ -471,7 +473,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
 
     protected void j() {
         this.i();
-        if (this.worldData.getType() == WorldType.DEBUG_ALL_BLOCK_STATES) {
+        if (false) { // NeonPaper start - Remove DEBUG_ALL_BLOCK_STATES world type
             Iterator iterator = this.manager.b();
 
             while (iterator.hasNext()) {
@@ -675,7 +677,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                 return;
             }
         } else {
-            this.m();
+            // this.m(); // NeonPaper - Optimize
         }
 
         this.worldProvider.s();
@@ -736,7 +738,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
     }
 
     public boolean a(boolean flag) {
-        if (this.worldData.getType() == WorldType.DEBUG_ALL_BLOCK_STATES) {
+        if (false) { // NeonPaper start - Remove DEBUG_ALL_BLOCK_STATES world type
             return false;
         } else {
             int i = this.nextTickList.size();
@@ -945,7 +947,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         if (!this.worldData.v()) {
             try {
                 this.b(worldsettings);
-                if (this.worldData.getType() == WorldType.DEBUG_ALL_BLOCK_STATES) {
+                if (false) { // NeonPaper start - Remove DEBUG_ALL_BLOCK_STATES world type
                     this.ap();
                 }
 
@@ -984,7 +986,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
     private void b(WorldSettings worldsettings) {
         if (!this.worldProvider.e()) {
             this.worldData.setSpawn(BlockPosition.ZERO.up(this.worldProvider.getSeaLevel()));
-        } else if (this.worldData.getType() == WorldType.DEBUG_ALL_BLOCK_STATES) {
+        } else if (false) { // NeonPaper start - Remove DEBUG_ALL_BLOCK_STATES world type
             this.worldData.setSpawn(BlockPosition.ZERO.up());
         } else {
             this.isLoading = true;
@@ -1171,8 +1173,8 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         } else {
             UUID uuid = entity.getUniqueID();
 
-            if (this.entitiesByUUID.containsKey(uuid)) {
-                Entity entity1 = (Entity) this.entitiesByUUID.get(uuid);
+            Entity entity1 = this.entitiesByUUID.get(uuid); // NeonPaper - Optimize map get
+            if (entity1 != null) { // NeonPaper - Optimize map get
 
                 if (this.f.contains(entity1) || entity1.dead) { // Paper - if dupe is dead, overwrite
                     this.f.remove(entity1);
@@ -1231,7 +1233,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
             int i = aentity.length;
 
             for (int j = 0; j < i; ++j) {
-                Entity entity1 = aentity1[j];
+                Entity entity1 = aentity[j]; // NeonPaper - Inline
 
                 this.entitiesById.a(entity1.getId(), entity1);
             }
@@ -1251,7 +1253,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
             int i = aentity.length;
 
             for (int j = 0; j < i; ++j) {
-                Entity entity1 = aentity1[j];
+                Entity entity1 = aentity[j]; // NeonPaper - Inline
 
                 this.entitiesById.d(entity1.getId());
             }
@@ -1447,8 +1449,10 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         for (EntityHuman entityhuman : receivers) { // Paper - Particle API Expansion
             EntityPlayer entityplayer = (EntityPlayer) entityhuman; // Paper - Particle API Expansion
             if (sender != null && !entityplayer.getBukkitEntity().canSee(sender.getBukkitEntity())) continue; // CraftBukkit
+            /* // NeonPaper start - Unused
             BlockPosition blockposition = entityplayer.getChunkCoordinates();
             double d7 = blockposition.distanceSquared(d0, d1, d2);
+            */ // NeonPaper end
 
 
             this.a(entityplayer, flag, d0, d1, d2, packetplayoutworldparticles);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
index ba3676b67b939a93d51053977bc1489fdcc90218..fd21564b650669592e928a1f715afb261dce58ff 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
@@ -85,7 +85,7 @@ public class CraftChunk implements Chunk {
         for (int i = 0; i < 16; i++) {
 
             for (Object obj : chunk.entitySlices[i].toArray()) {
-                if (!(obj instanceof net.minecraft.server.Entity)) {
+                if (obj == null) { // NeonPaper - Optimize
                     continue;
                 }
 
@@ -103,7 +103,7 @@ public class CraftChunk implements Chunk {
         BlockState[] entities = new BlockState[chunk.tileEntities.size()];
 
         for (Object obj : chunk.tileEntities.keySet().toArray()) {
-            if (!(obj instanceof BlockPosition)) {
+            if (obj == null) { // NeonPaper - Optimize
                 continue;
             }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
index 45217866bba8f7b8e065da7eca78776f1441dba9..62d27871e6594ec87437a42cc833427ed679a587 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
@@ -149,7 +149,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
 
     @Override
     public boolean equals(Object obj) {
-        if (obj == null || !(obj instanceof OfflinePlayer)) {
+        if (!(obj instanceof OfflinePlayer)) { // NeonPaper - Optimize
             return false;
         }
 
@@ -235,7 +235,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
 
         if (data.hasKey("SpawnX") && data.hasKey("SpawnY") && data.hasKey("SpawnZ")) {
             String spawnWorld = data.getString("SpawnWorld");
-            if (spawnWorld.equals("")) {
+            if (spawnWorld.isEmpty()) { // NeonPaper - Optimize
                 spawnWorld = server.getWorlds().get(0).getName();
             }
             return new Location(server.getWorld(spawnWorld), data.getInt("SpawnX"), data.getInt("SpawnY"), data.getInt("SpawnZ"));
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 5deaf370fe7ba18cda3a002b864b0c514a33a939..ae9a6031fe04d24b1fc322b1a4747589ace2b0e5 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1049,7 +1049,7 @@ public final class CraftServer implements Server {
         }
 
         worlds.remove(world.getName().toLowerCase(java.util.Locale.ENGLISH));
-        console.worlds.remove(console.worlds.indexOf(handle));
+        console.worlds.remove(handle); // NeonPaper - Optimize
 
         File parentFolder = world.getWorldFolder().getAbsoluteFile();
 
@@ -1271,8 +1271,8 @@ public final class CraftServer implements Server {
             if (section != null) {
                 String name = section.getString("generator");
 
-                if ((name != null) && (!name.equals(""))) {
-                    String[] split = name.split(":", 2);
+                if ((name != null) && (!name.isEmpty())) { // NeonPaper - Optimize
+                    String[] split = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens(name, ":", 2); // NeonPaper - Optimize
                     String id = (split.length > 1) ? split[1] : null;
                     Plugin plugin = pluginManager.getPlugin(split[0]);
 
@@ -1667,13 +1667,14 @@ public final class CraftServer implements Server {
 
         List<String> offers;
         Player player = ((EntityPlayer) sender).getBukkitEntity();
-        if (message.startsWith("/") || forceCommand) {
+        boolean isCommand = forceCommand || (!message.isEmpty() && (message.charAt(0) == '/')); // NeonPaper - Optimize
+        if (isCommand) { // NeonPaper - Optimize
             offers = tabCompleteCommand(player, message, pos);
         } else {
             offers = tabCompleteChat(player, message);
         }
         
-        TabCompleteEvent tabEvent = new TabCompleteEvent(player, message, offers, message.startsWith("/") || forceCommand, pos != null ? MCUtil.toLocation(((CraftWorld) player.getWorld()).getHandle(), pos) : null); // Paper
+        TabCompleteEvent tabEvent = new TabCompleteEvent(player, message, offers, isCommand, pos != null ? MCUtil.toLocation(((CraftWorld) player.getWorld()).getHandle(), pos) : null); // Paper // NeonPaper - Optimize
         getPluginManager().callEvent(tabEvent);
 
         return tabEvent.isCancelled() ? Collections.EMPTY_LIST : tabEvent.getCompletions();
@@ -1689,7 +1690,7 @@ public final class CraftServer implements Server {
 
         List<String> completions = null;
         try {
-            if (message.startsWith("/")) {
+            if (message.charAt(0) == '/') { // NeonPaper - Optimize
                 // Trim leading '/' if present (won't always be present in command blocks)
                 message = message.substring(1);
             }
@@ -1725,7 +1726,7 @@ public final class CraftServer implements Server {
                 it.remove();
             }
         }
-        Collections.sort(completions, String.CASE_INSENSITIVE_ORDER);
+        completions.sort(String.CASE_INSENSITIVE_ORDER); // NeonPaper - Optimize
         return completions;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftStatistic.java b/src/main/java/org/bukkit/craftbukkit/CraftStatistic.java
index 5c069586655edebdde23c9c82027871d9e01340c..7be3d8a065c405286e77a4f26adfb210efc6d0c5 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftStatistic.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftStatistic.java
@@ -112,18 +112,18 @@ public class CraftStatistic {
 
     public static EntityType getEntityTypeFromStatistic(net.minecraft.server.Statistic statistic) {
         String statisticString = statistic.name;
-        return EntityType.fromName(statisticString.substring(statisticString.lastIndexOf(".") + 1));
+        return EntityType.fromName(statisticString.substring(statisticString.lastIndexOf('.') + 1)); // NeonPaper - Optimize
     }
 
     public static Material getMaterialFromStatistic(net.minecraft.server.Statistic statistic) {
         String statisticString = statistic.name;
-        String val = statisticString.substring(statisticString.lastIndexOf(".") + 1);
+        String val = statisticString.substring(statisticString.lastIndexOf('.') + 1); // NeonPaper - Optimize
         Item item = (Item) Item.REGISTRY.get(new MinecraftKey(val));
         if (item != null) {
             return Material.getMaterial(Item.getId(item));
         }
         Block block = (Block) Block.REGISTRY.get(new MinecraftKey(val));
-        if (block != null) {
+        if (/*block != null*/true) { // NeonPaper - Optimize
             return Material.getMaterial(Block.getId(block));
         }
         try {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftTravelAgent.java b/src/main/java/org/bukkit/craftbukkit/CraftTravelAgent.java
index 7ca2617a88eb76cdcf8b6f81a1640179a4e618eb..d33a38b2aad61c1efcad3d04ba0d601aec2437d3 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftTravelAgent.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftTravelAgent.java
@@ -24,7 +24,7 @@ public class CraftTravelAgent extends PortalTravelAgent implements TravelAgent {
 
     @Override
     public Location findOrCreate(Location target) {
-        WorldServer worldServer = ((CraftWorld) target.getWorld()).getHandle();
+        // WorldServer worldServer = ((CraftWorld) target.getWorld()).getHandle(); // NeonPaper - Unused
 
         Location found = this.findPortal(target);
         if (found == null) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index afb141c62974e1877c774a7d1ab09e3398f7713e..f8b9760dc9c852011b807ec6eb4c6509725565da 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -658,8 +658,10 @@ public class CraftWorld implements World {
 
     public void setBiome(int x, int z, Biome bio) {
         BiomeBase bb = CraftBlock.biomeToBiomeBase(bio);
-        if (this.world.isLoaded(new BlockPosition(x, 0, z))) {
-            net.minecraft.server.Chunk chunk = this.world.getChunkAtWorldCoords(new BlockPosition(x, 0, z));
+        // NeonPaper start - Optimize
+        if (true) {
+            net.minecraft.server.Chunk chunk = this.world.getChunkIfLoaded(x >> 4, z >> 4);
+            // NeonPaper end
 
             if (chunk != null) {
                 byte[] biomevals = chunk.getBiomeIndex();
@@ -707,7 +709,7 @@ public class CraftWorld implements World {
                 Entity bukkitEntity = mcEnt.getBukkitEntity();
 
                 // Assuming that bukkitEntity isn't null
-                if (bukkitEntity != null && bukkitEntity instanceof LivingEntity) {
+                if (bukkitEntity instanceof LivingEntity) { // NeonPaper - Optimize
                     list.add((LivingEntity) bukkitEntity);
                 }
             }
@@ -793,7 +795,7 @@ public class CraftWorld implements World {
         for (EntityHuman human : world.players) {
             HumanEntity bukkitEntity = human.getBukkitEntity();
 
-            if ((bukkitEntity != null) && (bukkitEntity instanceof Player)) {
+            if (bukkitEntity instanceof Player) { // NeonPaper - Optimize
                 list.add((Player) bukkitEntity);
             }
         }
@@ -1662,7 +1664,7 @@ public class CraftWorld implements World {
             {
                 net.minecraft.server.EnumParticle particle = null;
                 int[] extra = null;
-                for ( net.minecraft.server.EnumParticle p : net.minecraft.server.EnumParticle.values() )
+                for ( net.minecraft.server.EnumParticle p : net.minecraft.server.EnumParticle.VALUES ) // NeonPaper - Single values array
                 {
                     if ( effect.getName().startsWith( p.b().replace("_", "") ) )
                     {
diff --git a/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttributeInstance.java b/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttributeInstance.java
index 31e608a6a2f62e0c068b928b5944e216dfca9048..7896387ecd7a07a48055fb779e2ab52226a79485 100644
--- a/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttributeInstance.java
+++ b/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttributeInstance.java
@@ -70,6 +70,6 @@ public class CraftAttributeInstance implements AttributeInstance {
     }
 
     private static AttributeModifier convert(net.minecraft.server.AttributeModifier nms) {
-        return new AttributeModifier(nms.a(), nms.b(), nms.d(), AttributeModifier.Operation.values()[nms.c()]);
+        return new AttributeModifier(nms.a(), nms.b(), nms.d(), AttributeModifier.Operation.VALUES[nms.c()]); // NeonPaper - Single values array
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
index a9d3f12bc615ab47738ba545732827c1dd9d7fa7..cc77e85cdcc8f6f61e771337f231f13ee90dfcbf 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
@@ -202,7 +202,7 @@ public class CraftBlock implements Block {
     }
 
     public BlockFace getFace(final Block block) {
-        BlockFace[] values = BlockFace.values();
+        BlockFace[] values = BlockFace.VALUES; // NeonPaper - Single values array
 
         for (BlockFace face : values) {
             if ((this.getX() + face.getModX() == block.getX()) &&
diff --git a/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java b/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java
index 9696fe5d02d50282d6a6c041759d76206352b079..76ed95523ad3ac1b2562ba5ff7275ca9a2d269e0 100644
--- a/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java
+++ b/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java
@@ -40,8 +40,7 @@ public class CraftBossBar implements BossBar {
     }
 
     private BossBattle.BarColor convertColor(BarColor color) {
-        BossBattle.BarColor nmsColor = BossBattle.BarColor.valueOf(color.name());
-        return (nmsColor == null) ? BossBattle.BarColor.WHITE : nmsColor;
+        return BossBattle.BarColor.valueOf(color.name());
     }
 
     private BossBattle.BarStyle convertStyle(BarStyle style) {
diff --git a/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java b/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
index 6247bbda1c7f9d97474fc997efe6b66751c65fb6..5bf8ef62aaaa4e646c55044b38d17bd32db53d4e 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
@@ -130,7 +130,7 @@ public final class VanillaCommandWrapper extends BukkitCommand {
                 CommandBlockListenerAbstract listener = (CommandBlockListenerAbstract) icommandlistener;
                 MinecraftServer.LOGGER.log(Level.WARN, String.format("CommandBlock at (%d,%d,%d) failed to handle command", listener.getChunkCoordinates().getX(), listener.getChunkCoordinates().getY(), listener.getChunkCoordinates().getZ()), throwable);
             } else {
-                MinecraftServer.LOGGER.log(Level.WARN, String.format("Unknown CommandBlock failed to handle command"), throwable);
+                MinecraftServer.LOGGER.log(Level.WARN, "Unknown CommandBlock failed to handle command", throwable); // NeonPaper - Optimize
             }
         } finally {
             icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.SUCCESS_COUNT, j);
@@ -175,9 +175,7 @@ public final class VanillaCommandWrapper extends BukkitCommand {
 
     public static String[] dropFirstArgument(String as[]) {
         String as1[] = new String[as.length - 1];
-        for (int i = 1; i < as.length; i++) {
-            as1[i - 1] = as[i];
-        }
+        System.arraycopy(as, 1, as1, 0, as.length - 1); // NeonPaper - Optimize
 
         return as1;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/conversations/ConversationTracker.java b/src/main/java/org/bukkit/craftbukkit/conversations/ConversationTracker.java
index eefa68a69560afdc39c93724dc27afa46cb475d5..0429c92bf159a26b6e241aca479986e452dc873d 100644
--- a/src/main/java/org/bukkit/craftbukkit/conversations/ConversationTracker.java
+++ b/src/main/java/org/bukkit/craftbukkit/conversations/ConversationTracker.java
@@ -31,7 +31,7 @@ public class ConversationTracker {
             if (conversationQueue.getFirst() == conversation) {
                 conversation.abandon(details);
             }
-            if (conversationQueue.contains(conversation)) {
+            if (/*conversationQueue.contains(conversation)*/true) { // NeonPaper - Optimize
                 conversationQueue.remove(conversation);
             }
             if (!conversationQueue.isEmpty()) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
index caf95b023c70c72d826b2161eea39a93c6a25915..0c0440bc2eb560e374f8ad2de13490ce40e4a70d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
@@ -64,7 +64,7 @@ public class CraftArrow extends AbstractProjectile implements Arrow {
 
     @Override
     public PickupStatus getPickupStatus() {
-        return PickupStatus.values()[getHandle().fromPlayer.ordinal()];
+        return PickupStatus.VALUES[getHandle().fromPlayer.ordinal()]; // NeonPaper - Single values array
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java
index d31a2069f48bdd68d5e62c9d74d552e955f4e233..e1f05db8384ba3dea46fa909fa02b8bca81f9370 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java
@@ -45,7 +45,7 @@ public class CraftEnderDragon extends CraftComplexLivingEntity implements EnderD
 
     @Override
     public Phase getPhase() {
-        return Phase.values()[getHandle().getDataWatcher().get(EntityEnderDragon.PHASE)];
+        return Phase.VALUES[getHandle().getDataWatcher().get(EntityEnderDragon.PHASE)]; // NeonPaper - Single values array
     }
 
     @Override
@@ -54,7 +54,7 @@ public class CraftEnderDragon extends CraftComplexLivingEntity implements EnderD
     }
     
     public static Phase getBukkitPhase(DragonControllerPhase phase) {
-        return Phase.values()[phase.b()];
+        return Phase.VALUES[phase.b()]; // NeonPaper - Single values array
     }
     
     public static DragonControllerPhase getMinecraftPhase(Phase phase) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEvoker.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEvoker.java
index 0636d264731f1f346360ffecb4271b5e561b8eaf..8acf0e0d5a47c9c4056915cbd6c7a7a547d384ab 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEvoker.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEvoker.java
@@ -29,7 +29,7 @@ public class CraftEvoker extends CraftSpellcaster implements Evoker {
 
     @Override
     public Evoker.Spell getCurrentSpell() {
-        return Evoker.Spell.values()[getHandle().getSpell().ordinal()];
+        return Evoker.Spell.VALUES[getHandle().getSpell().ordinal()]; // NeonPaper - Single values array
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHorse.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHorse.java
index 98ef44c302bc16c84b0a549069a258457cab932b..a6e8d508308eb7fb2a980fe2e3167868b1160fd5 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHorse.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHorse.java
@@ -26,7 +26,7 @@ public class CraftHorse extends CraftAbstractHorse implements Horse {
 
     @Override
     public Color getColor() {
-        return Color.values()[getHandle().getVariant() & 0xFF];
+        return Color.VALUES[getHandle().getVariant() & 0xFF]; // NeonPaper - Single values array
     }
 
     @Override
@@ -37,7 +37,7 @@ public class CraftHorse extends CraftAbstractHorse implements Horse {
 
     @Override
     public Style getStyle() {
-        return Style.values()[getHandle().getVariant() >>> 8];
+        return Style.VALUES[getHandle().getVariant() >>> 8]; // NeonPaper - Single values array
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLlama.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLlama.java
index 3f94c5a9206e2da9c852d282e267ab4d9f7324c4..ff584a21c34414fa03c315d9e073245c5333b55a 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLlama.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLlama.java
@@ -23,7 +23,7 @@ public class CraftLlama extends CraftChestedHorse implements Llama, CraftRangedE
 
     @Override
     public Color getColor() {
-        return Color.values()[getHandle().getVariant()];
+        return Color.VALUES[getHandle().getVariant()]; // NeonPaper - Single values array
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftParrot.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftParrot.java
index 5b2405cf21491d7f4e4273450b772bc57522e408..e44f068b5fa5487309a63889cb389b9781a718b8 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftParrot.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftParrot.java
@@ -19,7 +19,7 @@ public class CraftParrot extends CraftTameableAnimal implements Parrot {
 
     @Override
     public Variant getVariant() {
-        return Variant.values()[getHandle().getVariant()];
+        return Variant.VALUES[getHandle().getVariant()]; // NeonPaper - Single values array
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index d59d86efc2e7f2bb16ccd7f660d1b1dba6a819a7..cbd550ba069639319e4ad6f7b39c2972172f06ea 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -1527,7 +1527,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     @Override
     public void setMaxHealth(double amount) {
         super.setMaxHealth(amount);
-        this.health = Math.min(this.health, health);
+        // this.health = Math.min(this.health, health); // NeonPaper - Meaningless
         getHandle().triggerHealthUpdate();
     }
 
@@ -1549,9 +1549,11 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         if (playerConnection == null) {
             throw new IllegalStateException("Cannot set scoreboard yet");
         }
+        /* // NeonPaper start - Optimize
         if (playerConnection.isDisconnected()) {
             // throw new IllegalStateException("Cannot set scoreboard for invalid CraftPlayer"); // Spigot - remove this as Mojang's semi asynchronous Netty implementation can lead to races
         }
+        */ // NeonPaper end
 
         this.server.getScoreboardManager().setPlayerBoard(this, scoreboard);
     }
@@ -1856,9 +1858,9 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             {
                 net.minecraft.server.EnumParticle particle = null;
                 int[] extra = null;
-                for ( net.minecraft.server.EnumParticle p : net.minecraft.server.EnumParticle.values() )
+                for ( net.minecraft.server.EnumParticle p : net.minecraft.server.EnumParticle.VALUES ) // NeonPaper - Single values array
                 {
-                    if ( effect.getName().startsWith( p.b().replace("_", "") ) )
+                    if ( effect.getName().startsWith( org.apache.commons.lang3.StringUtils.remove(p.b(), '_') ) ) // NeonPaper - Optimize
                     {
                         particle = p;
                         if ( effect.getData() != null ) 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftRabbit.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftRabbit.java
index 61330d24360d477b8cc24d5c0c9741f116ce4f8c..2a22aad1c32123952ac6640aec027de80617a81c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftRabbit.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftRabbit.java
@@ -41,8 +41,11 @@ public class CraftRabbit extends CraftAnimals implements Rabbit {
         if (getRabbitType() == Type.THE_KILLER_BUNNY) {
             // Reset goals and target finders.
             World world = ((CraftWorld) this.getWorld()).getHandle();
-            entity.goalSelector = new PathfinderGoalSelector(world != null && world.methodProfiler != null ? world.methodProfiler : null);
-            entity.targetSelector = new PathfinderGoalSelector(world != null && world.methodProfiler != null ? world.methodProfiler : null);
+            // NeonPaper start - Optimize
+            net.minecraft.server.MethodProfiler profiler = world != null && world.methodProfiler != null ? world.methodProfiler : null;
+            entity.goalSelector = new PathfinderGoalSelector(profiler);
+            entity.targetSelector = new PathfinderGoalSelector(profiler);
+            // NeonPaper end
             entity.initializePathFinderGoals();
         }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
index 503bd0661cd27e03a98741f2e5375e8fd45a6b88..eb118aa748adf6e8a1d0eaa7e97a0f6abe91adca 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
@@ -18,7 +18,7 @@ import org.bukkit.inventory.MerchantRecipe;
 
 public class CraftVillager extends CraftAgeable implements Villager, InventoryHolder {
 
-    private static final Map<Career, Integer> careerIDMap = new HashMap<>();
+    private static final Map<Career, Integer> careerIDMap = new java.util.EnumMap<>(Career.class); // NeonPaper - Optimize
     private CraftMerchant merchant;
 
     public CraftVillager(CraftServer server, EntityVillager entity) {
@@ -40,7 +40,7 @@ public class CraftVillager extends CraftAgeable implements Villager, InventoryHo
     }
 
     public Profession getProfession() {
-        return Profession.values()[getHandle().getProfession() + 1]; // Offset by 1 from the zombie types
+        return Profession.VALUES[getHandle().getProfession() + 1]; // NeonPaper - Single values array // Offset by 1 from the zombie types
     }
 
     public void setProfession(Profession profession) {
@@ -134,7 +134,10 @@ public class CraftVillager extends CraftAgeable implements Villager, InventoryHo
 
         List<Career> careers = profession.getCareers();
         for (Career c : careers) {
-            if (careerIDMap.containsKey(c) && careerIDMap.get(c) == id) {
+            // NeonPaper start - Optimize map get
+            Integer idO = careerIDMap.get(c);
+            if (idO != null && idO == id) {
+                // NeonPaper end
                 return c;
             }
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillagerZombie.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillagerZombie.java
index 6073d508c35a3d4bfe51497b0be255e45550c684..6a50e74ff02bc4eadc82a4c1a67d54f606189d46 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillagerZombie.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillagerZombie.java
@@ -29,7 +29,7 @@ public class CraftVillagerZombie extends CraftZombie implements ZombieVillager {
 
     @Override
     public Villager.Profession getVillagerProfession() {
-        return Villager.Profession.values()[getHandle().getProfession() + Villager.Profession.FARMER.ordinal()];
+        return Villager.Profession.VALUES[getHandle().getProfession() + Villager.Profession.FARMER.ordinal()]; // NeonPaper - Single values array
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index f1a3ca9509ebc50eaa67bf4dac2645f5ee37bbef..41ea8d9f5bb862cb8f6b3a830468277492b8cd7d 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -246,7 +246,7 @@ public class CraftEventFactory {
         CraftItemStack itemInHand = CraftItemStack.asCraftMirror(itemstack);
         Arrow arrow = (Arrow) entityArrow.getBukkitEntity();
 
-        if (itemInHand != null && (itemInHand.getType() == Material.AIR || itemInHand.getAmount() == 0)) {
+        if (/*itemInHand != null*/true && (itemInHand.getType() == Material.AIR || itemInHand.getAmount() == 0)) { // NeonPaper - Optimize
             itemInHand = null;
         }
 
@@ -491,7 +491,7 @@ public class CraftEventFactory {
             } else if (entity instanceof EntityEnderDragon && /*PAIL FIXME ((EntityEnderDragon) entity).target == damager*/ false) {
                 event = new EntityDamageEvent(entity.getBukkitEntity(), DamageCause.ENTITY_EXPLOSION, modifiers, modifierFunctions);
             } else {
-                if (damager instanceof org.bukkit.entity.TNTPrimed) {
+                if (/*damager instanceof org.bukkit.entity.TNTPrimed*/false) { // NeonPaper - Optimize
                     damageCause = DamageCause.BLOCK_EXPLOSION;
                 } else {
                     damageCause = DamageCause.ENTITY_EXPLOSION;
@@ -669,7 +669,7 @@ public class CraftEventFactory {
         functions.put(DamageModifier.BASE, ZERO);
 
         final EntityDamageEvent event = handleEntityDamageEvent(entity, source, modifiers, functions);
-        if (event == null) {
+        if (/*event == null*/false) { // NeonPaper - Optimize
             return false;
         }
         return event.isCancelled() || (cancelOnZeroDamage && event.getDamage() == 0);
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java b/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
index 9942f0c7500ceb88b5ca21f334070f613af96b40..ca651bd2fca6debf322184ca61baacb1c4bd1415 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
@@ -222,12 +222,12 @@ public class CustomChunkGenerator extends InternalChunkGenerator {
 
     @Override
     public boolean a(World world, String type, BlockPosition position) {
-        return "Stronghold".equals(type) && this.strongholdGen != null ? this.strongholdGen.b(position) : false;
+        return "Stronghold".equals(type) && /*this.strongholdGen != null*/true ? this.strongholdGen.b(position) : false; // NeonPaper - Optimize
     }
 
     @Override
     public BlockPosition findNearestMapFeature(World world, String type, BlockPosition position, boolean flag) {
-        return "Stronghold".equals(type) && this.strongholdGen != null ? this.strongholdGen.getNearestGeneratedFeature(world, position, flag) : null;
+        return "Stronghold".equals(type) && /*this.strongholdGen != null*/true ? this.strongholdGen.getNearestGeneratedFeature(world, position, flag) : null; // NeonPaper - Optimize
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/help/CommandAliasHelpTopic.java b/src/main/java/org/bukkit/craftbukkit/help/CommandAliasHelpTopic.java
index 9f2238c9a73b4a63c6ae4a8b72be925e84110269..a0438e6e1ea6de6bce2ed415d3f4c0050310ba44 100644
--- a/src/main/java/org/bukkit/craftbukkit/help/CommandAliasHelpTopic.java
+++ b/src/main/java/org/bukkit/craftbukkit/help/CommandAliasHelpTopic.java
@@ -24,7 +24,7 @@ public class CommandAliasHelpTopic extends HelpTopic {
         StringBuilder sb = new StringBuilder(shortText);
         HelpTopic aliasForTopic = helpMap.getHelpTopic(aliasFor);
         if (aliasForTopic != null) {
-            sb.append("\n");
+            sb.append('\n'); // NeonPaper - Optimize
             sb.append(aliasForTopic.getFullText(forWho));
         }
         return sb.toString();
diff --git a/src/main/java/org/bukkit/craftbukkit/help/CustomHelpTopic.java b/src/main/java/org/bukkit/craftbukkit/help/CustomHelpTopic.java
index 6dee2296f7670587415aff4c0f1f67e3c8ea3d33..b28283655efbb23dbcea088ae00a714e6b34f13c 100644
--- a/src/main/java/org/bukkit/craftbukkit/help/CustomHelpTopic.java
+++ b/src/main/java/org/bukkit/craftbukkit/help/CustomHelpTopic.java
@@ -22,7 +22,7 @@ public class CustomHelpTopic extends HelpTopic {
             return true;
         }
 
-        if (!permissionNode.equals("")) {
+        if (!permissionNode.isEmpty()) { // NeonPaper - Optimize
             return sender.hasPermission(permissionNode);
         } else {
             return true;
diff --git a/src/main/java/org/bukkit/craftbukkit/help/MultipleCommandAliasHelpTopic.java b/src/main/java/org/bukkit/craftbukkit/help/MultipleCommandAliasHelpTopic.java
index 6f4b22b99a0339584f21149953a5cb2bf28992f8..c82fe21a549317dc44eef2f60791bd3c87d9a41b 100644
--- a/src/main/java/org/bukkit/craftbukkit/help/MultipleCommandAliasHelpTopic.java
+++ b/src/main/java/org/bukkit/craftbukkit/help/MultipleCommandAliasHelpTopic.java
@@ -25,7 +25,7 @@ public class MultipleCommandAliasHelpTopic extends HelpTopic {
             if (i != 0) {
                 sb.append(ChatColor.GOLD + " > " + ChatColor.WHITE);
             }
-            sb.append("/");
+            sb.append('/'); // NeonPaper - Optimize
             sb.append(alias.getCommands()[i].getLabel());
         }
         shortText = sb.toString();
diff --git a/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java b/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java
index c7daccd5c0c7bbc3b00c380ce36d7c31f9fa16df..5b7f97fda3a6021ff3408643528596c7ed6c693e 100644
--- a/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java
+++ b/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java
@@ -41,7 +41,7 @@ public class SimpleHelpMap implements HelpMap {
     }
 
     public synchronized HelpTopic getHelpTopic(String topicName) {
-        if (topicName.equals("")) {
+        if (topicName.isEmpty()) { // NeonPaper - Optimize
             return defaultTopic;
         }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftEntityEquipment.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftEntityEquipment.java
index 3ed9e2bb0956e116ea5f388bc2025a726f9893a4..bb3c102fe0a2dc1e0862b34bb8b24044a3b0da63 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftEntityEquipment.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftEntityEquipment.java
@@ -104,7 +104,7 @@ public class CraftEntityEquipment implements EntityEquipment {
     }
 
     public void clear() {
-        for (EnumItemSlot slot : EnumItemSlot.values()) {
+        for (EnumItemSlot slot : EnumItemSlot.VALUES) { // NeonPaper - Single values array
             setEquipment(slot, null);
         }
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryView.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryView.java
index dadfce6e6e907d0ce182e16889197c5cfa0d293e..907686c9391ed9d78448fe7d4b83e3459496b38b 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryView.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryView.java
@@ -94,6 +94,7 @@ public class CraftInventoryView extends InventoryView {
                 }
                 break;
             case ENCHANTING:
+            case BEACON:
                 type = SlotType.CRAFTING;
                 break;
             case WORKBENCH:
@@ -105,17 +106,8 @@ public class CraftInventoryView extends InventoryView {
                 }
                 break;
             case MERCHANT:
-                if (slot == 2) {
-                    type = SlotType.RESULT;
-                } else {
-                    type = SlotType.CRAFTING;
-                }
-                break;
-            case BEACON:
-                type = SlotType.CRAFTING;
-                break;
             case ANVIL:
-                if (slot == 2) {
+                    if (slot == 2) {
                     type = SlotType.RESULT;
                 } else {
                     type = SlotType.CRAFTING;
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
index ffdb7ec8290c035fa0dea92622fbdd9a9cd9cd50..ed2c281206041ca283c76a8ca98bc6779d827f3e 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
@@ -215,7 +215,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
 
     @Override
     public Generation getGeneration() {
-        return (generation == null) ? null : Generation.values()[generation];
+        return (generation == null) ? null : Generation.VALUES[generation]; // NeonPaper - Single values array
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBookSigned.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBookSigned.java
index bffbe9013bbe5d60295f4b8d9f84b21eb1942f4a..f02fa58d9529be2c4231d22398bc8b132b4aea14 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBookSigned.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBookSigned.java
@@ -113,7 +113,7 @@ class CraftMetaBookSigned extends CraftMetaBook implements BookMeta {
     int applyHash() {
         final int original;
         int hash = original = super.applyHash();
-        return original != hash ? CraftMetaBookSigned.class.hashCode() ^ hash : hash;
+        return /*original != hash*/false ? CraftMetaBookSigned.class.hashCode() ^ hash : hash; // NeonPaper - Optimize
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
index 2ab4a1cf4123242665e0605cfd998c4d6a6148ee..f16a5d1f807c068e72d0dd0976d0dbbe423d31d1 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
@@ -425,10 +425,12 @@ class CraftMetaItem implements ItemMeta, Repairable {
             // Spigot end
 
             for (int i = 0; i < nbttaglist.size(); ++i) {
-                if (!(nbttaglist.get(i) instanceof NBTTagCompound)) {
+                // NeonPaper start - Optimize
+                NBTTagCompound nbttagcompound = (NBTTagCompound) nbttaglist.get(i);
+                if (nbttagcompound == null) {
                     continue;
                 }
-                NBTTagCompound nbttagcompound = (NBTTagCompound) nbttaglist.get(i);
+                // NeonPaper end
 
                 if (!nbttagcompound.hasKeyOfType(ATTRIBUTES_UUID_HIGH.NBT, CraftMagicNumbers.NBT.TAG_ANY_NUMBER)) {
                     continue;
@@ -761,7 +763,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
     public Set<ItemFlag> getItemFlags() {
         Set<ItemFlag> currentFlags = EnumSet.noneOf(ItemFlag.class);
 
-        for (ItemFlag f : ItemFlag.values()) {
+        for (ItemFlag f : ItemFlag.VALUES) { // NeonPaper - Single values array
             if (hasItemFlag(f)) {
                 currentFlags.add(f);
             }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapedRecipe.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapedRecipe.java
index 44df930192834ac53d7c5ab94132387989513a60..62bc9df09b4842bc0195e7315208260c194c6d27 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapedRecipe.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapedRecipe.java
@@ -33,10 +33,10 @@ public class CraftShapedRecipe extends ShapedRecipe implements CraftRecipe {
         String[] shape = recipe.getShape();
         ret.shape(shape);
         Map<Character, ItemStack> ingredientMap = recipe.getIngredientMap();
-        for (char c : ingredientMap.keySet()) {
-            ItemStack stack = ingredientMap.get(c);
+        for (Map.Entry<Character, ItemStack> entry : ingredientMap.entrySet()) { // NeonPaper - Optimize
+            ItemStack stack = entry.getValue(); // NeonPaper - Optimize
             if (stack != null) {
-                ret.setIngredient(c, stack.getType(), stack.getDurability());
+                ret.setIngredient(entry.getKey(), stack.getType(), stack.getDurability()); // NeonPaper - Optimize
             }
         }
         return ret;
diff --git a/src/main/java/org/bukkit/craftbukkit/map/CraftMapRenderer.java b/src/main/java/org/bukkit/craftbukkit/map/CraftMapRenderer.java
index 8816d33ca62402e86d3a0e7c728b80157f06c42f..28b14ed8151d254a22dfbf413c68c953dc34b85c 100644
--- a/src/main/java/org/bukkit/craftbukkit/map/CraftMapRenderer.java
+++ b/src/main/java/org/bukkit/craftbukkit/map/CraftMapRenderer.java
@@ -35,14 +35,14 @@ public class CraftMapRenderer extends MapRenderer {
             cursors.removeCursor(cursors.getCursor(0));
         }
 
-        for (UUID key : worldMap.decorations.keySet()) { // Spigot string -> uuid.
+        for (java.util.Map.Entry<UUID, MapIcon> entry : worldMap.decorations.entrySet()) { // Spigot string -> uuid. // NeonPaper - Optimize
             // If this cursor is for a player check visibility with vanish system
-            Player other = Bukkit.getPlayer(key); // Spigot
+            Player other = Bukkit.getPlayer(entry.getKey()); // Spigot // NeonPaper - Optimize
             if (other != null && !player.canSee(other)) {
                 continue;
             }
 
-            MapIcon decoration = (MapIcon) worldMap.decorations.get(key);
+            MapIcon decoration = entry.getValue(); // NeonPaper - Optimize
             cursors.addCursor(decoration.getX(), decoration.getY(), (byte) (decoration.getRotation() & 15), decoration.getType());
         }
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java b/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java
index b951bfda3f221936f5e17ac4a676decc0cdb1dbe..372b13ed25e3604c0f1ec98af0460e78a513c2ec 100644
--- a/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java
+++ b/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java
@@ -129,7 +129,7 @@ public final class CraftMapView implements MapView {
             renderCache.put(context ? player : null, render);
         }
 
-        if (context && renderCache.containsKey(null)) {
+        if (context /*&& renderCache.containsKey(null)*/) { // NeonPaper - Optimize
             renderCache.remove(null);
         }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java b/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java
index 14b79c13a40f53bd214c628d4492b2789720d6ce..c3fc3c92fb13eca4c0d3edc373fbe49da91bc073 100644
--- a/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java
+++ b/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java
@@ -18,11 +18,13 @@ import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Maps;
 
 public class CraftPotionBrewer implements PotionBrewer {
-    private static final Map<PotionType, Collection<PotionEffect>> cache = Maps.newHashMap();
+    private static final Map<PotionType, Collection<PotionEffect>> cache = new java.util.EnumMap<>(PotionType.class); // NeonPaper - Optimize
 
     public Collection<PotionEffect> getEffects(PotionType damage, boolean upgraded, boolean extended) {
-        if (cache.containsKey(damage))
-            return cache.get(damage);
+        // NeonPaper start - Optimize map get
+        Collection<PotionEffect> potionEffects = cache.get(damage);
+        if (potionEffects != null) return potionEffects;
+        // NeonPaper end
 
         List<MobEffect> mcEffects = PotionRegistry.a(CraftPotionUtil.fromBukkit(new PotionData(damage, extended, upgraded))).a();
 
diff --git a/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java b/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java
index 744da023debb7fff7d525def0eaea9b676b2138d..180907afa1eae53560ea58f6cacfc5c026594abe 100644
--- a/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java
+++ b/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java
@@ -142,7 +142,7 @@ public class CraftBlockProjectileSource implements BlockProjectileSource {
             // Values from DispenseBehaviorProjectile
             float a = 6.0F;
             float b = 1.1F;
-            if (launch instanceof EntityPotion || launch instanceof ThrownExpBottle) {
+            if (launch instanceof EntityPotion || /*launch instanceof ThrownExpBottle*/false) { // NeonPaper - Optimize
                 // Values from respective DispenseBehavior classes
                 a *= 0.5F;
                 b *= 1.25F;
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
index 18616fc8db8e15c8c6db685f356f818d5462ec59..449f2b8289190153b987a38b7f76b34f00cb6b66 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
@@ -186,7 +186,7 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
     }
 
     public boolean hasEntry(String entry) throws IllegalArgumentException, IllegalStateException {
-        Validate.notNull("Entry cannot be null");
+        // Validate.notNull("Entry cannot be null"); // NeonPaper - Optimize
 
         CraftScoreboard scoreboard = checkState();
 
@@ -206,11 +206,11 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
 
         switch (option) {
             case NAME_TAG_VISIBILITY:
-                return OptionStatus.values()[team.getNameTagVisibility().ordinal()];
+                return OptionStatus.VALUES[team.getNameTagVisibility().ordinal()]; // NeonPaper - Single values array
             case DEATH_MESSAGE_VISIBILITY:
-                return OptionStatus.values()[team.getDeathMessageVisibility().ordinal()];
+                return OptionStatus.VALUES[team.getDeathMessageVisibility().ordinal()]; // NeonPaper - Single values array
             case COLLISION_RULE:
-                return OptionStatus.values()[team.getCollisionRule().ordinal()];
+                return OptionStatus.VALUES[team.getCollisionRule().ordinal()]; // NeonPaper - Single values array
             default:
                 throw new IllegalArgumentException("Unrecognised option " + option);
         }
@@ -222,13 +222,13 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
 
         switch (option) {
             case NAME_TAG_VISIBILITY:
-                team.setNameTagVisibility(EnumNameTagVisibility.values()[status.ordinal()]);
+                team.setNameTagVisibility(EnumNameTagVisibility.VALUES[status.ordinal()]); // NeonPaper - Single values array
                 break;
             case DEATH_MESSAGE_VISIBILITY:
-                team.setDeathMessageVisibility(EnumNameTagVisibility.values()[status.ordinal()]);
+                team.setDeathMessageVisibility(EnumNameTagVisibility.VALUES[status.ordinal()]); // NeonPaper - Single values array
                 break;
             case COLLISION_RULE:
-                team.setCollisionRule(ScoreboardTeamBase.EnumTeamPush.values()[status.ordinal()]);
+                team.setCollisionRule(ScoreboardTeamBase.EnumTeamPush.VALUES[status.ordinal()]); // NeonPaper - Single values array
                 break;
             default:
                 throw new IllegalArgumentException("Unrecognised option " + option);
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java b/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
index dbbed1be79ed385c3f9a245347f6c62fe9ea788a..b1bf0a35d7d114ddd1605b00386b11864ae37cbe 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
@@ -20,7 +20,7 @@ import org.bukkit.ChatColor;
 
 public final class CraftChatMessage {
 
-    private static final Pattern LINK_PATTERN = Pattern.compile("((?:(?:https?):\\/\\/)?(?:[-\\w_\\.]{2,}\\.[a-z]{2,4}.*?(?=[\\.\\?!,;:]?(?:[" + String.valueOf(org.bukkit.ChatColor.COLOR_CHAR) + " \\n]|$))))");
+    private static final Pattern LINK_PATTERN = Pattern.compile("((?:(?:https?):\\/\\/)?(?:[-\\w_\\.]{2,}\\.[a-z]{2,4}.*?(?=[\\.\\?!,;:]?(?:[" + ChatColor.COLOR_CHAR + " \\n]|$))))"); // NeonPaper - Optimize
     private static final Map<Character, EnumChatFormat> formatMap;
 
     static {
@@ -40,7 +40,7 @@ public final class CraftChatMessage {
     }
 
     private static class StringMessage {
-        private static final Pattern INCREMENTAL_PATTERN = Pattern.compile("(" + String.valueOf(org.bukkit.ChatColor.COLOR_CHAR) + "[0-9a-fk-or])|(\\n)|((?:(?:https?):\\/\\/)?(?:[-\\w_\\.]{2,}\\.[a-z]{2,4}.*?(?=[\\.\\?!,;:]?(?:[" + String.valueOf(org.bukkit.ChatColor.COLOR_CHAR) + " \\n]|$))))", Pattern.CASE_INSENSITIVE);
+        private static final Pattern INCREMENTAL_PATTERN = Pattern.compile("(" + ChatColor.COLOR_CHAR + "[0-9a-fk-or])|(\\n)|((?:(?:https?):\\/\\/)?(?:[-\\w_\\.]{2,}\\.[a-z]{2,4}.*?(?=[\\.\\?!,;:]?(?:[" + ChatColor.COLOR_CHAR + " \\n]|$))))", Pattern.CASE_INSENSITIVE); // NeonPaper - Optimize
 
         private final List<IChatBaseComponent> list = new ArrayList<IChatBaseComponent>();
         private IChatBaseComponent currentChatComponent = new ChatComponentText("");
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index a1be7ec490ccd24ce435ee383287fc0e6b4e7976..f5c506f05489f66a27ab8e05554c7b2e3f5a1150 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -101,7 +101,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
         // TODO: Don't use ID
         Block block = Block.getById(material.getId());
 
-        if (block == null) {
+        if (/*block == null*/false) { // NeonPaper - Optimize
             return Blocks.AIR;
         }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/util/MojangNameLookup.java b/src/main/java/org/bukkit/craftbukkit/util/MojangNameLookup.java
index 93a8f0bd70768a7fcdd67f72c80a26a2d2e41545..ed8159abce324ec5f205530e8ad02559d26d17bc 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/MojangNameLookup.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/MojangNameLookup.java
@@ -23,7 +23,7 @@ public class MojangNameLookup {
 
         InputStream inputStream = null;
         try {
-            URL url = new URL("https://sessionserver.mojang.com/session/minecraft/profile/" + id.toString().replace("-", ""));
+            URL url = new URL("https://sessionserver.mojang.com/session/minecraft/profile/" + org.apache.commons.lang3.StringUtils.remove(id.toString(), '-')); // NeonPaper - Optimize
             URLConnection connection = url.openConnection();
             connection.setConnectTimeout(15000);
             connection.setReadTimeout(15000);
diff --git a/src/main/java/org/bukkit/craftbukkit/util/ShortConsoleLogFormatter.java b/src/main/java/org/bukkit/craftbukkit/util/ShortConsoleLogFormatter.java
index 2dbfef963cd2b563ac45780135de00f1546b4079..2d7ddd5b68b34db4613a7142293e6c2dc5d2a889 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/ShortConsoleLogFormatter.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/ShortConsoleLogFormatter.java
@@ -20,7 +20,7 @@ public class ShortConsoleLogFormatter extends Formatter {
             try {
                 Object object = options.valueOf("date-format");
 
-                if ((object != null) && (object instanceof SimpleDateFormat)) {
+                if (object instanceof SimpleDateFormat) { // NeonPaper - Optimize
                     date = (SimpleDateFormat) object;
                 }
             } catch (OptionException ex) {
diff --git a/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java b/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java
index 7e7363f527d59bc74d963564441c4f4e6b102f14..420f784fef10ecac775a13f067dae427b65b7150 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java
@@ -160,10 +160,6 @@ public final class WeakCollection<T> implements Collection<T> {
     }
 
     private Collection<T> toCollection() {
-        ArrayList<T> collection = new ArrayList<T>();
-        for (T value : this) {
-            collection.add(value);
-        }
-        return collection;
+        return new ArrayList<T>(this); // NeonPaper - Optimize
     }
 }
diff --git a/src/main/java/org/spigotmc/CaseInsensitiveHashingStrategy.java b/src/main/java/org/spigotmc/CaseInsensitiveHashingStrategy.java
index aafdd3682eb95177361795f62943ccfe212a2fae..bf5f53947a4e01bb82c833891f939854ae978bbd 100644
--- a/src/main/java/org/spigotmc/CaseInsensitiveHashingStrategy.java
+++ b/src/main/java/org/spigotmc/CaseInsensitiveHashingStrategy.java
@@ -13,6 +13,6 @@ class CaseInsensitiveHashingStrategy implements HashingStrategy {
 
     @Override
     public boolean equals(Object o1, Object o2) {
-        return o1.equals(o2) || (o1 instanceof String && o2 instanceof String && ((String) o1).toLowerCase().equals(((String) o2).toLowerCase()));
+        return o1.equals(o2) || (o1 instanceof String && o2 instanceof String && ((String) o1).equalsIgnoreCase(((String) o2))); // NeonPaper - Optimize
     }
 }
