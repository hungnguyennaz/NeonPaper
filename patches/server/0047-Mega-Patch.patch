From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Softik Lord <dimap9986@gmail.com>
Date: Mon, 11 Jul 2022 05:31:24 +0500
Subject: [PATCH] Mega-Patch


diff --git a/src/main/java/net/minecraft/server/AdvancementDataPlayer.java b/src/main/java/net/minecraft/server/AdvancementDataPlayer.java
index 80063e376960b73e4eacd12a64d4be8eb790d04e..56203bf5bd3d76ccc5696394b5193f3cc97480ba 100644
--- a/src/main/java/net/minecraft/server/AdvancementDataPlayer.java
+++ b/src/main/java/net/minecraft/server/AdvancementDataPlayer.java
@@ -89,7 +89,7 @@ public class AdvancementDataPlayer {
     }
 
     private void e() {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         Iterator iterator = this.data.entrySet().iterator();
 
         while (iterator.hasNext()) {
diff --git a/src/main/java/net/minecraft/server/BiomeBase.java b/src/main/java/net/minecraft/server/BiomeBase.java
index ab6db74689023e386457366de164cd3d2697bb1c..3df15b65cf00248fd80dad1365276bc6f6fa5981 100644
--- a/src/main/java/net/minecraft/server/BiomeBase.java
+++ b/src/main/java/net/minecraft/server/BiomeBase.java
@@ -62,10 +62,10 @@ public abstract class BiomeBase {
     protected BiomeBase(BiomeBase.a biomebase_a) {
         this.q = Blocks.GRASS.getBlockData();
         this.r = Blocks.DIRT.getBlockData();
-        this.t = Lists.newArrayList();
-        this.u = Lists.newArrayList();
-        this.v = Lists.newArrayList();
-        this.w = Lists.newArrayList();
+        this.t = new ObjectArrayList<>();
+        this.u = new ObjectArrayList<>();
+        this.v = new ObjectArrayList<>();
+        this.w = new ObjectArrayList<>();
         this.y = biomebase_a.a;
         this.z = biomebase_a.b;
         this.A = biomebase_a.c;
diff --git a/src/main/java/net/minecraft/server/BlockPiston.java b/src/main/java/net/minecraft/server/BlockPiston.java
index 8c8045f90839d55f37ddb8035087da855085607c..32e6f2e96b5de8ae1c9144309b2ce9e763421226 100644
--- a/src/main/java/net/minecraft/server/BlockPiston.java
+++ b/src/main/java/net/minecraft/server/BlockPiston.java
@@ -299,7 +299,7 @@ public class BlockPiston extends BlockDirectional {
             return false;
         } else {
             List list = pistonextendschecker.getMovedBlocks();
-            ArrayList arraylist = Lists.newArrayList();
+            ArrayList arraylist = new ObjectArrayList<>();
 
             for (int i = 0; i < list.size(); ++i) {
                 BlockPosition blockposition1 = (BlockPosition) list.get(i);
diff --git a/src/main/java/net/minecraft/server/BlockPosition.java b/src/main/java/net/minecraft/server/BlockPosition.java
index e80adc4f254a28cf9524eaf5a1c8be5132ae280b..b30ba65f08854c7a11d5acdc70ff85be1252e7f2 100644
--- a/src/main/java/net/minecraft/server/BlockPosition.java
+++ b/src/main/java/net/minecraft/server/BlockPosition.java
@@ -284,7 +284,7 @@ public class BlockPosition extends BaseBlockPosition {
     public static final class PooledBlockPosition extends BlockPosition.MutableBlockPosition {
 
         private boolean f;
-        private static final List<BlockPosition.PooledBlockPosition> g = Lists.newArrayList();
+        private static final List<BlockPosition.PooledBlockPosition> g = new ObjectArrayList<>();
 
         private PooledBlockPosition(int i, int j, int k) {
             super(i, j, k);
diff --git a/src/main/java/net/minecraft/server/ChatBaseComponent.java b/src/main/java/net/minecraft/server/ChatBaseComponent.java
index 36989dffc798926823e2b1bdbaff369b621482c4..e4ffe01d2205300c867f6dd0cae9cf6bbe9ad47f 100644
--- a/src/main/java/net/minecraft/server/ChatBaseComponent.java
+++ b/src/main/java/net/minecraft/server/ChatBaseComponent.java
@@ -9,7 +9,7 @@ import javax.annotation.Nullable;
 
 public abstract class ChatBaseComponent implements IChatBaseComponent {
 
-    protected List<IChatBaseComponent> a = Lists.newArrayList();
+    protected List<IChatBaseComponent> a = new ObjectArrayList<>();
     private ChatModifier b;
 
     public ChatBaseComponent() {}
diff --git a/src/main/java/net/minecraft/server/CombatTracker.java b/src/main/java/net/minecraft/server/CombatTracker.java
index bddd66e798200d116163111e1bd790c03fca7bb9..e11cabc056ff04f0d63da43f60f6cb013202a8a9 100644
--- a/src/main/java/net/minecraft/server/CombatTracker.java
+++ b/src/main/java/net/minecraft/server/CombatTracker.java
@@ -7,7 +7,7 @@ import javax.annotation.Nullable;
 
 public class CombatTracker {
 
-    private final List<CombatEntry> a = Lists.newArrayList();
+    private final List<CombatEntry> a = new ObjectArrayList<>();
     private final EntityLiving b;
     private int c;
     private int d;
diff --git a/src/main/java/net/minecraft/server/CommandAbstract.java b/src/main/java/net/minecraft/server/CommandAbstract.java
index a99d0f87044492855fe2393e2a26a5bed3df1035..ba98ced651aced72592ddb87ae296832be8b896e 100644
--- a/src/main/java/net/minecraft/server/CommandAbstract.java
+++ b/src/main/java/net/minecraft/server/CommandAbstract.java
@@ -641,7 +641,7 @@ public abstract class CommandAbstract implements ICommand {
 
     public static List<String> a(String[] astring, Collection<?> collection) {
         String s = astring[astring.length - 1];
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
 
         if (!collection.isEmpty()) {
             Iterator iterator = Iterables.transform(collection, Functions.toStringFunction()).iterator();
diff --git a/src/main/java/net/minecraft/server/CommandScoreboard.java b/src/main/java/net/minecraft/server/CommandScoreboard.java
index 0607e55d3af0b9cc651cc811e50b38f1005d8c17..92d6160c0220c6bfe601ed3cbd34099648939302 100644
--- a/src/main/java/net/minecraft/server/CommandScoreboard.java
+++ b/src/main/java/net/minecraft/server/CommandScoreboard.java
@@ -216,7 +216,7 @@ public class CommandScoreboard extends CommandAbstract {
         } else {
             ArrayList arraylist = Lists.newArrayList(this.a(minecraftserver).getPlayers());
             String s = astring[i];
-            ArrayList arraylist1 = Lists.newArrayList();
+            ArrayList arraylist1 = new ObjectArrayList<>();
             Iterator iterator = arraylist.iterator();
 
             while (iterator.hasNext()) {
@@ -1062,7 +1062,7 @@ public class CommandScoreboard extends CommandAbstract {
 
     protected List<String> a(boolean flag, MinecraftServer minecraftserver) {
         Collection collection = this.a(minecraftserver).getObjectives();
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         Iterator iterator = collection.iterator();
 
         while (iterator.hasNext()) {
@@ -1078,7 +1078,7 @@ public class CommandScoreboard extends CommandAbstract {
 
     protected List<String> b(MinecraftServer minecraftserver) {
         Collection collection = this.a(minecraftserver).getObjectives();
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         Iterator iterator = collection.iterator();
 
         while (iterator.hasNext()) {
diff --git a/src/main/java/net/minecraft/server/CommandSpreadPlayers.java b/src/main/java/net/minecraft/server/CommandSpreadPlayers.java
index c79679e6450c8b61d40c7b65cd1506bafff7136a..c8dea1dbed7c7497d4bf30b67511ab3f4d3b154b 100644
--- a/src/main/java/net/minecraft/server/CommandSpreadPlayers.java
+++ b/src/main/java/net/minecraft/server/CommandSpreadPlayers.java
@@ -41,7 +41,7 @@ public class CommandSpreadPlayers extends CommandAbstract {
             double d3 = a(astring[i++], 0.0D);
             double d4 = a(astring[i++], d3 + 1.0D);
             boolean flag = d(astring[i++]);
-            ArrayList arraylist = Lists.newArrayList();
+            ArrayList arraylist = new ObjectArrayList<>();
 
             while (i < astring.length) {
                 String s = astring[i++];
diff --git a/src/main/java/net/minecraft/server/Container.java b/src/main/java/net/minecraft/server/Container.java
index 3a488ce207a060d6c080c7d6d7ca641e23edb991..1fe50123bc5a1f11b220071f21e56d834145a93c 100644
--- a/src/main/java/net/minecraft/server/Container.java
+++ b/src/main/java/net/minecraft/server/Container.java
@@ -21,12 +21,12 @@ import org.bukkit.inventory.InventoryView;
 public abstract class Container {
 
     public NonNullList<ItemStack> items = NonNullList.a();
-    public List<Slot> slots = Lists.newArrayList();
+    public List<Slot> slots = new ObjectArrayList<>();
     public int windowId;
     private int dragType = -1;
     private int g;
     private final Set<Slot> h = Sets.newHashSet();
-    protected List<ICrafting> listeners = Lists.newArrayList();
+    protected List<ICrafting> listeners = new ObjectArrayList<>();
     private final Set<EntityHuman> i = Sets.newHashSet();
     private int tickCount; // Spigot
 
diff --git a/src/main/java/net/minecraft/server/CrashReport.java b/src/main/java/net/minecraft/server/CrashReport.java
index 436bbc0ff1e2f062ca1143973783f5c4d5064888..52831167c5266050729809a26aa37ebf79aff6dc 100644
--- a/src/main/java/net/minecraft/server/CrashReport.java
+++ b/src/main/java/net/minecraft/server/CrashReport.java
@@ -24,7 +24,7 @@ public class CrashReport {
     private final String b;
     private final Throwable c;
     private final CrashReportSystemDetails d = new CrashReportSystemDetails(this, "System Details");
-    private final List<CrashReportSystemDetails> e = Lists.newArrayList();
+    private final List<CrashReportSystemDetails> e = new ObjectArrayList<>();
     private File f;
     private boolean g = true;
     private StackTraceElement[] h = new StackTraceElement[0];
diff --git a/src/main/java/net/minecraft/server/DataWatcher.java b/src/main/java/net/minecraft/server/DataWatcher.java
index fe84844531ab06d20de9ca4988ee12e69ab5f2f7..04ea5802ca51ee58fe5dca5005191358543928ce 100644
--- a/src/main/java/net/minecraft/server/DataWatcher.java
+++ b/src/main/java/net/minecraft/server/DataWatcher.java
@@ -166,7 +166,7 @@ public class DataWatcher {
                 if (datawatcher_item.c()) {
                     datawatcher_item.a(false);
                     if (arraylist == null) {
-                        arraylist = Lists.newArrayList();
+                        arraylist = new ObjectArrayList<>();
                     }
 
                     arraylist.add(datawatcher_item.d());
@@ -205,7 +205,7 @@ public class DataWatcher {
         for (Iterator iterator = this.d.values().iterator(); iterator.hasNext(); arraylist.add(datawatcher_item.d())) {
             datawatcher_item = (DataWatcher.Item) iterator.next();
             if (arraylist == null) {
-                arraylist = Lists.newArrayList();
+                arraylist = new ObjectArrayList<>();
             }
         }
 
@@ -234,7 +234,7 @@ public class DataWatcher {
 
         while ((short0 = packetdataserializer.readUnsignedByte()) != 255) {
             if (arraylist == null) {
-                arraylist = Lists.newArrayList();
+                arraylist = new ObjectArrayList<>();
             }
 
             int i = packetdataserializer.g();
diff --git a/src/main/java/net/minecraft/server/DefinedStructure.java b/src/main/java/net/minecraft/server/DefinedStructure.java
index 23da9467ebc82bd25f2c74ddf88ce415dea61775..296bdd725e23fe6bd79268440c3dd20b63cd3eca 100644
--- a/src/main/java/net/minecraft/server/DefinedStructure.java
+++ b/src/main/java/net/minecraft/server/DefinedStructure.java
@@ -13,8 +13,8 @@ import javax.annotation.Nullable;
 
 public class DefinedStructure {
 
-    private final List<DefinedStructure.BlockInfo> a = Lists.newArrayList();
-    private final List<DefinedStructure.EntityInfo> b = Lists.newArrayList();
+    private final List<DefinedStructure.BlockInfo> a = new ObjectArrayList<>();
+    private final List<DefinedStructure.EntityInfo> b = new ObjectArrayList<>();
     private BlockPosition c;
     private String d;
 
@@ -38,9 +38,9 @@ public class DefinedStructure {
     public void a(World world, BlockPosition blockposition, BlockPosition blockposition1, boolean flag, @Nullable Block block) {
         if (blockposition1.getX() >= 1 && blockposition1.getY() >= 1 && blockposition1.getZ() >= 1) {
             BlockPosition blockposition2 = blockposition.a((BaseBlockPosition) blockposition1).a(-1, -1, -1);
-            ArrayList arraylist = Lists.newArrayList();
-            ArrayList arraylist1 = Lists.newArrayList();
-            ArrayList arraylist2 = Lists.newArrayList();
+            ArrayList arraylist = new ObjectArrayList<>();
+            ArrayList arraylist1 = new ObjectArrayList<>();
+            ArrayList arraylist2 = new ObjectArrayList<>();
             BlockPosition blockposition3 = new BlockPosition(Math.min(blockposition.getX(), blockposition2.getX()), Math.min(blockposition.getY(), blockposition2.getY()), Math.min(blockposition.getZ(), blockposition2.getZ()));
             BlockPosition blockposition4 = new BlockPosition(Math.max(blockposition.getX(), blockposition2.getX()), Math.max(blockposition.getY(), blockposition2.getY()), Math.max(blockposition.getZ(), blockposition2.getZ()));
 
diff --git a/src/main/java/net/minecraft/server/Enchantment.java b/src/main/java/net/minecraft/server/Enchantment.java
index 0a51c1a84fdfda1fc55b54d00f7f466345938c4f..59626a0e09aabea07014df423c261768ef058365 100644
--- a/src/main/java/net/minecraft/server/Enchantment.java
+++ b/src/main/java/net/minecraft/server/Enchantment.java
@@ -35,7 +35,7 @@ public abstract class Enchantment {
     }
 
     public List<ItemStack> a(EntityLiving entityliving) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         EnumItemSlot[] aenumitemslot = this.a;
         int i = aenumitemslot.length;
 
diff --git a/src/main/java/net/minecraft/server/EnchantmentManager.java b/src/main/java/net/minecraft/server/EnchantmentManager.java
index c74d00b14b2362c82da3a3def9204dac75afbacf..117707b90b9953ce4cb40bc49513ed2132ed244e 100644
--- a/src/main/java/net/minecraft/server/EnchantmentManager.java
+++ b/src/main/java/net/minecraft/server/EnchantmentManager.java
@@ -242,7 +242,7 @@ public class EnchantmentManager {
         if (list.isEmpty()) {
             return ItemStack.a;
         } else {
-            ArrayList arraylist = Lists.newArrayList();
+            ArrayList arraylist = new ObjectArrayList<>();
             Iterator iterator = list.iterator();
 
             while (iterator.hasNext()) {
@@ -298,7 +298,7 @@ public class EnchantmentManager {
     }
 
     public static List<WeightedRandomEnchant> b(Random random, ItemStack itemstack, int i, boolean flag) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         Item item = itemstack.getItem();
         int j = item.c();
 
@@ -341,7 +341,7 @@ public class EnchantmentManager {
     }
 
     public static List<WeightedRandomEnchant> a(int i, ItemStack itemstack, boolean flag) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         Item item = itemstack.getItem();
         boolean flag1 = itemstack.getItem() == Items.BOOK;
         Iterator iterator = Enchantment.enchantments.iterator();
diff --git a/src/main/java/net/minecraft/server/EnderDragonBattle.java b/src/main/java/net/minecraft/server/EnderDragonBattle.java
index 286069746a8eab03ca6ed06c626ec40ffd12cdb7..e3eaccd84899e73ad419e3aaee19354074eb426c 100644
--- a/src/main/java/net/minecraft/server/EnderDragonBattle.java
+++ b/src/main/java/net/minecraft/server/EnderDragonBattle.java
@@ -44,7 +44,7 @@ public class EnderDragonBattle {
 
     public EnderDragonBattle(WorldServer worldserver, NBTTagCompound nbttagcompound) {
         this.c = (BossBattleServer) (new BossBattleServer(new ChatMessage("entity.EnderDragon.name", new Object[0]), BossBattle.BarColor.PINK, BossBattle.BarStyle.PROGRESS)).setPlayMusic(true).c(true);
-        this.e = Lists.newArrayList();
+        this.e = new ObjectArrayList<>();
         // Paper start
         setScanForLegacyFight(worldserver.paperConfig.scanForLegacyEnderDragon);
         if (!scanForLegacyFight()) setDragonKilled(true);
@@ -442,7 +442,7 @@ public class EnderDragonBattle {
                 blockposition = this.o;
             }
 
-            ArrayList arraylist = Lists.newArrayList();
+            ArrayList arraylist = new ObjectArrayList<>();
             BlockPosition blockposition1 = blockposition.up(1);
             Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
 
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 816a44dc1d9846d7738faf1d19cd9e383e1fe722..b6f2a4dc3e4ddde8c68aabcdc5cb6df4b2ac6f4b 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -214,7 +214,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
 
     public Entity(World world) {
         this.id = Entity.entityCount++;
-        this.passengers = Lists.newArrayList();
+        this.passengers = new ObjectArrayList<>();
         this.boundingBox = Entity.c;
         this.width = 0.6F;
         this.length = 1.8F;
diff --git a/src/main/java/net/minecraft/server/EntityAreaEffectCloud.java b/src/main/java/net/minecraft/server/EntityAreaEffectCloud.java
index 836d368b40440f1b129612675ed022dbf751909b..7b8d3a8dae53cddd0d5d598be78c547d09571dae 100644
--- a/src/main/java/net/minecraft/server/EntityAreaEffectCloud.java
+++ b/src/main/java/net/minecraft/server/EntityAreaEffectCloud.java
@@ -39,7 +39,7 @@ public class EntityAreaEffectCloud extends Entity {
     public EntityAreaEffectCloud(World world) {
         super(world);
         this.potionRegistry = Potions.EMPTY;
-        this.effects = Lists.newArrayList();
+        this.effects = new ObjectArrayList<>();
         this.at = Maps.newHashMap();
         this.au = 600;
         this.waitTime = 20;
@@ -278,7 +278,7 @@ public class EntityAreaEffectCloud extends Entity {
                     }
                 }
 
-                ArrayList arraylist = Lists.newArrayList();
+                ArrayList arraylist = new ObjectArrayList<>();
                 Iterator iterator1 = this.potionRegistry.a().iterator();
 
                 while (iterator1.hasNext()) {
diff --git a/src/main/java/net/minecraft/server/EntityBoat.java b/src/main/java/net/minecraft/server/EntityBoat.java
index 164e21fe81b3fec3aa1b3c303ebe44d83869f951..043e85df6677d9048a22561c52e9c83a752ffad1 100644
--- a/src/main/java/net/minecraft/server/EntityBoat.java
+++ b/src/main/java/net/minecraft/server/EntityBoat.java
@@ -425,7 +425,7 @@ public class EntityBoat extends Entity {
         int l = MathHelper.f(axisalignedbb1.e) + 1;
         int i1 = MathHelper.floor(axisalignedbb1.c) - 1;
         int j1 = MathHelper.f(axisalignedbb1.f) + 1;
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         float f = 0.0F;
         int k1 = 0;
         BlockPosition.PooledBlockPosition blockposition_pooledblockposition = BlockPosition.PooledBlockPosition.s();
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index cabcba7042dfb90ae902fe5a079109eb1c436f3b..96852f1c20cb82419205f153b98ec27450f481cc 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -563,7 +563,7 @@ public abstract class EntityLiving extends Entity {
 
     // CraftBukkit start
     private boolean isTickingEffects = false;
-    private List<Object> effectsToProcess = Lists.newArrayList();
+    private List<Object> effectsToProcess = new ObjectArrayList<>();
     // CraftBukkit end
 
     protected void tickPotionEffects() {
diff --git a/src/main/java/net/minecraft/server/EntityPainting.java b/src/main/java/net/minecraft/server/EntityPainting.java
index 6b1c7bbdfd95fa095b2a4b0c320f4aa979dac730..233ab85b8543d57b8f877a0e59c2415b42ac211c 100644
--- a/src/main/java/net/minecraft/server/EntityPainting.java
+++ b/src/main/java/net/minecraft/server/EntityPainting.java
@@ -16,7 +16,7 @@ public class EntityPainting extends EntityHanging {
 
     public EntityPainting(World world, BlockPosition blockposition, EnumDirection enumdirection) {
         super(world, blockposition);
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         int i = 0;
         EntityPainting.EnumArt[] aentitypainting_enumart = EntityPainting.EnumArt.values();
         int j = aentitypainting_enumart.length;
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index 5c7dfe6fe105699b257bd43b650b508797829014..995261ebcca27686867b788cc4834c557e343d26 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -616,7 +616,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
             }
         }
 
-        return Lists.newArrayList();
+        return new ObjectArrayList<>();
     }
 
     public boolean damageEntity(DamageSource damagesource, float f) {
@@ -1082,7 +1082,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     }
 
     public void a(MinecraftKey[] aminecraftkey) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         MinecraftKey[] aminecraftkey1 = aminecraftkey;
         int i = aminecraftkey.length;
 
diff --git a/src/main/java/net/minecraft/server/EntityShulkerBullet.java b/src/main/java/net/minecraft/server/EntityShulkerBullet.java
index f019729e91152f4f0befbc1ed1092330435697cf..91509173b72a24f1e2b6fda7c2389ae93f2f327b 100644
--- a/src/main/java/net/minecraft/server/EntityShulkerBullet.java
+++ b/src/main/java/net/minecraft/server/EntityShulkerBullet.java
@@ -150,7 +150,7 @@ public class EntityShulkerBullet extends Entity {
 
         if (blockposition.g(this.locX, this.locY, this.locZ) >= 4.0D) {
             BlockPosition blockposition1 = new BlockPosition(this);
-            ArrayList arraylist = Lists.newArrayList();
+            ArrayList arraylist = new ObjectArrayList<>();
 
             if (enumdirection_enumaxis != EnumDirection.EnumAxis.X) {
                 if (blockposition1.getX() < blockposition.getX() && this.world.isEmpty(blockposition1.east())) {
diff --git a/src/main/java/net/minecraft/server/EntitySlice.java b/src/main/java/net/minecraft/server/EntitySlice.java
index 4bf08c079016eaef7d376e6d813e86f5f94fe6ae..477ff14e6aa7a5bbc4fd2b16709b144488f8859c 100644
--- a/src/main/java/net/minecraft/server/EntitySlice.java
+++ b/src/main/java/net/minecraft/server/EntitySlice.java
@@ -17,7 +17,7 @@ public class EntitySlice<T> extends AbstractSet<T> {
     private final Map<Class<?>, List<T>> b = Maps.newHashMap();
     private final Set<Class<?>> c = Sets.newIdentityHashSet();
     private final Class<T> d;
-    private final List<T> e = Lists.newArrayList();
+    private final List<T> e = new ObjectArrayList<>();
 
     public EntitySlice(Class<T> oclass) {
         this.d = oclass;
diff --git a/src/main/java/net/minecraft/server/EntityTracker.java b/src/main/java/net/minecraft/server/EntityTracker.java
index a60f9460855931755568ae41de104edf32a81762..f363c559e1de496d032d0d5d24e71c995be2f5a7 100644
--- a/src/main/java/net/minecraft/server/EntityTracker.java
+++ b/src/main/java/net/minecraft/server/EntityTracker.java
@@ -173,7 +173,7 @@ public class EntityTracker {
     }
 
     public void updatePlayers() {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         Iterator iterator = this.c.iterator();
         world.timings.tracker1.startTiming(); // Spigot
         while (iterator.hasNext()) {
@@ -252,8 +252,8 @@ public class EntityTracker {
     }
 
     public void a(EntityPlayer entityplayer, Chunk chunk) {
-        ArrayList arraylist = Lists.newArrayList();
-        ArrayList arraylist1 = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
+        ArrayList arraylist1 = new ObjectArrayList<>();
         Iterator iterator = this.c.iterator();
 
         while (iterator.hasNext()) {
diff --git a/src/main/java/net/minecraft/server/EntityTypes.java b/src/main/java/net/minecraft/server/EntityTypes.java
index 2359b31f4d94498d8d01eedaef9ff8323d65248c..e8b7f3eab1b0ff58440eb54653d6a8af035d8886 100644
--- a/src/main/java/net/minecraft/server/EntityTypes.java
+++ b/src/main/java/net/minecraft/server/EntityTypes.java
@@ -24,7 +24,7 @@ public class EntityTypes {
     public static final RegistryMaterials<MinecraftKey, Class<? extends Entity>> b = new RegistryMaterials();
     public static final Map<MinecraftKey, EntityTypes.MonsterEggInfo> eggInfo = Maps.newLinkedHashMap();
     public static final Set<MinecraftKey> d = Sets.newHashSet();
-    private static final List<String> g = Lists.newArrayList();
+    private static final List<String> g = new ObjectArrayList<>();
 
     @Nullable public static MinecraftKey getKey(Entity entity) { return a(entity); } // Paper - OBFHELPER
     @Nullable
diff --git a/src/main/java/net/minecraft/server/Explosion.java b/src/main/java/net/minecraft/server/Explosion.java
index 171bd60f428976d1850900136e6ac0a41ec0b938..1a767705dc666eaeb7b241a23f15ebf7fc1103b5 100644
--- a/src/main/java/net/minecraft/server/Explosion.java
+++ b/src/main/java/net/minecraft/server/Explosion.java
@@ -23,7 +23,7 @@ public class Explosion {
     private final double posZ;
     public final Entity source;
     private final float size;
-    private final ArrayList<BlockPosition> blocks = Lists.newArrayList();
+    private final ArrayList<BlockPosition> blocks = new ObjectArrayList<>();
     private final Map<EntityHuman, Vec3D> k = Maps.newHashMap();
     public boolean wasCanceled = false; // CraftBukkit - add field
 
@@ -307,7 +307,7 @@ public class Explosion {
             org.bukkit.entity.Entity explode = this.source == null ? null : this.source.getBukkitEntity();
             Location location = new Location(bworld, this.posX, this.posY, this.posZ);
 
-            List<org.bukkit.block.Block> blockList = Lists.newArrayList();
+            List<org.bukkit.block.Block> blockList = new ObjectArrayList<>();
             for (int i1 = this.blocks.size() - 1; i1 >= 0; i1--) {
                 BlockPosition cpos = (BlockPosition) this.blocks.get(i1);
                 org.bukkit.block.Block bblock = bworld.getBlockAt(cpos.getX(), cpos.getY(), cpos.getZ());
diff --git a/src/main/java/net/minecraft/server/InventorySubcontainer.java b/src/main/java/net/minecraft/server/InventorySubcontainer.java
index 1609e637c392c3d13336e71a0164e8d18f31ec99..375bf745acab27b2edb4708e4f71544ca8ba6899 100644
--- a/src/main/java/net/minecraft/server/InventorySubcontainer.java
+++ b/src/main/java/net/minecraft/server/InventorySubcontainer.java
@@ -68,7 +68,7 @@ public class InventorySubcontainer implements IInventory {
 
     public void a(IInventoryListener iinventorylistener) {
         if (this.d == null) {
-            this.d = Lists.newArrayList();
+            this.d = new ObjectArrayList<>();
         }
 
         this.d.add(iinventorylistener);
diff --git a/src/main/java/net/minecraft/server/JsonList.java b/src/main/java/net/minecraft/server/JsonList.java
index 2a259758b5cf1fd66f5300036d0821c554e457a3..e298ea357d0f206f5697efea9edd300e4e549c84 100644
--- a/src/main/java/net/minecraft/server/JsonList.java
+++ b/src/main/java/net/minecraft/server/JsonList.java
@@ -133,7 +133,7 @@ public class JsonList<K, V extends JsonListEntry<K>> {
     private void removeStaleEntries() { h(); } // Paper - OBFHELPER
     private void h() {
         // Paper start
-        /*ArrayList arraylist = Lists.newArrayList();
+        /*ArrayList arraylist = new ObjectArrayList<>();
         Iterator iterator = this.d.values().iterator();
 
         while (iterator.hasNext()) {
diff --git a/src/main/java/net/minecraft/server/MethodProfiler.java b/src/main/java/net/minecraft/server/MethodProfiler.java
index e0276b11cdfda75a3bd1ec75cfecbbe0bdd45cd7..81d1722a39ffe4c8514a1d9c404e39bf4c3fe99c 100644
--- a/src/main/java/net/minecraft/server/MethodProfiler.java
+++ b/src/main/java/net/minecraft/server/MethodProfiler.java
@@ -84,7 +84,7 @@ public class MethodProfiler {
         } else {
             long i = this.f.getOrDefault("root", 0L);
             long j = this.f.getOrDefault(s, -1L);
-            ArrayList<MethodProfiler.ProfilerInfo> arraylist = Lists.newArrayList();
+            ArrayList<MethodProfiler.ProfilerInfo> arraylist = new ObjectArrayList<>();
 
             if (!s.isEmpty()) {
                 s = s + ".";
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 4747d0f4272db066b5c24cfe96cf1d61734cbfe6..e45afad9357c0b81bf05118db790ab2221a2bbb7 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -54,7 +54,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
     public Convertable convertable;
     // private final MojangStatisticsGenerator m = new MojangStatisticsGenerator("server", this, aw()); // Reaper - Remove snooper
     public File universe;
-    private final List<ITickable> o = Lists.newArrayList();
+    private final List<ITickable> o = new ObjectArrayList<>();
     public final ICommandHandler b;
     public final MethodProfiler methodProfiler = new MethodProfiler();
     private ServerConnection p; // Spigot
@@ -1255,7 +1255,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
 
     public List<String> tabCompleteCommand(ICommandListener icommandlistener, String s, @Nullable BlockPosition blockposition, boolean flag) {
         /* CraftBukkit start - Allow tab-completion of Bukkit commands
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         boolean flag1 = s.startsWith("/");
 
         if (flag1) {
diff --git a/src/main/java/net/minecraft/server/MobSpawnerAbstract.java b/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
index 87beea39db72a7380232a705d7e67f8948ea592e..b4436f819077f97941a45f3c5269787859f66a84 100644
--- a/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
+++ b/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
@@ -10,7 +10,7 @@ import javax.annotation.Nullable;
 public abstract class MobSpawnerAbstract {
 
     public int spawnDelay = 20;
-    private final List<MobSpawnerData> mobs = Lists.newArrayList();
+    private final List<MobSpawnerData> mobs = new ObjectArrayList<>();
     private MobSpawnerData spawnData = new MobSpawnerData();
     private double d;
     private double e;
diff --git a/src/main/java/net/minecraft/server/NBTTagList.java b/src/main/java/net/minecraft/server/NBTTagList.java
index 576c3b7141f74168102c33b57258164c457fc04b..7fba43fbb45e186cb86bb65abe94503f89a2cdcd 100644
--- a/src/main/java/net/minecraft/server/NBTTagList.java
+++ b/src/main/java/net/minecraft/server/NBTTagList.java
@@ -13,7 +13,7 @@ import org.apache.logging.log4j.Logger;
 public class NBTTagList extends NBTBase {
 
     private static final Logger b = LogManager.getLogger();
-    public List<NBTBase> list = Lists.newArrayList(); // Paper
+    public List<NBTBase> list = new ObjectArrayList<>(); // Paper
     // Paper start
     public void sort(java.util.Comparator<? extends NBTBase> comparator) {
         //noinspection unchecked
diff --git a/src/main/java/net/minecraft/server/NameReferencingFileConverter.java b/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
index 874b74a8190cd3474ad6d469e20a1826cca8de8f..0ec6e4356e0ab0bfc32ff27bb7ba564bcdf21891 100644
--- a/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
+++ b/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
@@ -283,7 +283,7 @@ public class NameReferencingFileConverter {
             if (gameprofile != null && gameprofile.getId() != null) {
                 return gameprofile.getId().toString();
             } else if (!minecraftserver.R() && minecraftserver.getOnlineMode()) {
-                final ArrayList arraylist = Lists.newArrayList();
+                final ArrayList arraylist = new ObjectArrayList<>();
                 ProfileLookupCallback profilelookupcallback = new ProfileLookupCallback() {
                     public void onProfileLookupSucceeded(GameProfile gameprofile) {
                         minecraftserver.getUserCache().a(gameprofile);
@@ -312,7 +312,7 @@ public class NameReferencingFileConverter {
 
         if (file.exists() && file.isDirectory()) {
             File[] afile = file.listFiles();
-            ArrayList arraylist = Lists.newArrayList();
+            ArrayList arraylist = new ObjectArrayList<>();
             File[] afile1 = afile;
             int i = afile.length;
 
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
index c797f103bf68dfe5e281ca4344a479262e9a3bb4..270e0eebda9abd89da9e7ffb7f7b177d54913186 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
@@ -36,7 +36,7 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
 
         this.d = new byte[this.a(chunk, flag, i)];
         this.c = this.a(new PacketDataSerializer(this.g()), chunk, flag, i);
-        this.e = Lists.newArrayList();
+        this.e = new ObjectArrayList<>();
         Iterator iterator = chunk.getTileEntities().entrySet().iterator();
 
         // Dionysus start
@@ -104,7 +104,7 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
             packetdataserializer.readBytes(this.d);
             int j = packetdataserializer.g();
 
-            this.e = Lists.newArrayList();
+            this.e = new ObjectArrayList<>();
 
             for (int k = 0; k < j; ++k) {
                 this.e.add(packetdataserializer.j());
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutScoreboardTeam.java b/src/main/java/net/minecraft/server/PacketPlayOutScoreboardTeam.java
index df11764e04bd46fa7b58964869b5764091c2b74e..2336282045e6ff6e7d31f7c5d7dfcfc23b541645 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutScoreboardTeam.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutScoreboardTeam.java
@@ -22,14 +22,14 @@ public class PacketPlayOutScoreboardTeam implements Packet<PacketListenerPlayOut
         this.e = ScoreboardTeamBase.EnumNameTagVisibility.ALWAYS.e;
         this.f = ScoreboardTeamBase.EnumTeamPush.ALWAYS.e;
         this.g = -1;
-        this.h = Lists.newArrayList();
+        this.h = new ObjectArrayList<>();
     }
 
     public PacketPlayOutScoreboardTeam(ScoreboardTeam scoreboardteam, int i) {
         this.e = ScoreboardTeamBase.EnumNameTagVisibility.ALWAYS.e;
         this.f = ScoreboardTeamBase.EnumTeamPush.ALWAYS.e;
         this.g = -1;
-        this.h = Lists.newArrayList();
+        this.h = new ObjectArrayList<>();
         this.a = scoreboardteam.getName();
         this.i = i;
         if (i == 0 || i == 2) {
@@ -52,7 +52,7 @@ public class PacketPlayOutScoreboardTeam implements Packet<PacketListenerPlayOut
         this.e = ScoreboardTeamBase.EnumNameTagVisibility.ALWAYS.e;
         this.f = ScoreboardTeamBase.EnumTeamPush.ALWAYS.e;
         this.g = -1;
-        this.h = Lists.newArrayList();
+        this.h = new ObjectArrayList<>();
         if (i != 3 && i != 4) {
             throw new IllegalArgumentException("Method must be join or leave for player constructor");
         } else if (collection != null && !collection.isEmpty()) {
diff --git a/src/main/java/net/minecraft/server/PersistentCollection.java b/src/main/java/net/minecraft/server/PersistentCollection.java
index 50056f49a8eaea687d00175e41a877040934e9ae..42ab8881ed6eeb3a30724c7812109acdab4e9115 100644
--- a/src/main/java/net/minecraft/server/PersistentCollection.java
+++ b/src/main/java/net/minecraft/server/PersistentCollection.java
@@ -20,7 +20,7 @@ public class PersistentCollection {
 
     private final IDataManager b;
     protected Map<String, PersistentBase> a = Maps.newHashMap();
-    public final List<PersistentBase> c = Lists.newArrayList(); // Spigot
+    public final List<PersistentBase> c = new ObjectArrayList<>(); // Spigot
     private final Map<String, Short> d = Maps.newHashMap();
 
     public PersistentCollection(IDataManager idatamanager) {
diff --git a/src/main/java/net/minecraft/server/PersistentVillage.java b/src/main/java/net/minecraft/server/PersistentVillage.java
index a3aa9f82e60a4fc4e90c5a46e37b05e7e3a0b31f..abcb38f268e0f675490a803bbc1bc7ea28624ad7 100644
--- a/src/main/java/net/minecraft/server/PersistentVillage.java
+++ b/src/main/java/net/minecraft/server/PersistentVillage.java
@@ -8,9 +8,9 @@ import javax.annotation.Nullable;
 public class PersistentVillage extends PersistentBase {
 
     private World world;
-    private final List<BlockPosition> c = Lists.newArrayList();
-    private final List<VillageDoor> d = Lists.newArrayList();
-    private final List<Village> villages = Lists.newArrayList();
+    private final List<BlockPosition> c = new ObjectArrayList<>();
+    private final List<VillageDoor> d = new ObjectArrayList<>();
+    private final List<Village> villages = new ObjectArrayList<>();
     private int time;
 
     public PersistentVillage(String s) {
diff --git a/src/main/java/net/minecraft/server/PlayerChunk.java b/src/main/java/net/minecraft/server/PlayerChunk.java
index 963784cbbc512761f67b685f26e0e5fab48abd27..15566eab1550d1c35ef29f765ad922baec2f028e 100644
--- a/src/main/java/net/minecraft/server/PlayerChunk.java
+++ b/src/main/java/net/minecraft/server/PlayerChunk.java
@@ -16,7 +16,7 @@ public class PlayerChunk {
 
     private static final Logger a = LogManager.getLogger();
     private final PlayerChunkMap playerChunkMap;
-    public final List<EntityPlayer> c = Lists.newArrayList(); // CraftBukkit - public
+    public final List<EntityPlayer> c = new ObjectArrayList<>(); // CraftBukkit - public
     private final ChunkCoordIntPair location;
     private final short[] dirtyBlocks = new short[64];
     @Nullable
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index 9d836e7e12284c1c2bf72f4cc5b4c17802425835..76b286f6cbe6aa5e15197bb7463468fb8777b84e 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -48,7 +48,7 @@ public class PlayerChunkMap {
     private final Set<PlayerChunk> f = Sets.newHashSet();
     private final List<PlayerChunk> g = Lists.newLinkedList();
     private final List<PlayerChunk> h = Lists.newLinkedList();
-    private final List<PlayerChunk> i = Lists.newArrayList();
+    private final List<PlayerChunk> i = new ObjectArrayList<>();
     private int j;public int getViewDistance() { return j; } // Paper OBFHELPER
     private long k;
     private boolean l = true;
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index 7b4adac6f21ea331c4c0c16b518fb9daa6500875..377f7270a75394a28b9d60d3548fe954f8e4e2b8 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -581,7 +581,7 @@ public abstract class PlayerList {
     public EntityPlayer attemptLogin(LoginListener loginlistener, GameProfile gameprofile, String hostname) {
         // Moved from processLogin
         UUID uuid = EntityHuman.a(gameprofile);
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
 
         EntityPlayer entityplayer;
 
@@ -659,7 +659,7 @@ public abstract class PlayerList {
     public EntityPlayer processLogin(GameProfile gameprofile, EntityPlayer player) { // CraftBukkit - added EntityPlayer
         /* CraftBukkit startMoved up
         UUID uuid = EntityHuman.a(gameprofile);
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
 
         for (int i = 0; i < this.players.size(); ++i) {
             EntityPlayer entityplayer = (EntityPlayer) this.players.get(i);
@@ -1460,7 +1460,7 @@ public abstract class PlayerList {
     }
 
     public List<EntityPlayer> b(String s) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         Iterator iterator = this.players.iterator();
 
         while (iterator.hasNext()) {
diff --git a/src/main/java/net/minecraft/server/RecipeArmorDye.java b/src/main/java/net/minecraft/server/RecipeArmorDye.java
index 123002ec75bc9605fccaee11ff33391abd7d698e..1b144677a3ee2d2a077d8d8511f00af762598114 100644
--- a/src/main/java/net/minecraft/server/RecipeArmorDye.java
+++ b/src/main/java/net/minecraft/server/RecipeArmorDye.java
@@ -13,7 +13,7 @@ public class RecipeArmorDye extends ShapelessRecipes implements IRecipe { // Cra
 
     public boolean a(InventoryCrafting inventorycrafting, World world) {
         ItemStack itemstack = ItemStack.a;
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
 
         for (int i = 0; i < inventorycrafting.getSize(); ++i) {
             ItemStack itemstack1 = inventorycrafting.getItem(i);
diff --git a/src/main/java/net/minecraft/server/RecipeBookServer.java b/src/main/java/net/minecraft/server/RecipeBookServer.java
index f65e74ebd6998e8b6203240987984882e64403d9..e4a6744fb1b68e162c3b1e2d5e4f96c19ceea01d 100644
--- a/src/main/java/net/minecraft/server/RecipeBookServer.java
+++ b/src/main/java/net/minecraft/server/RecipeBookServer.java
@@ -15,7 +15,7 @@ public class RecipeBookServer extends RecipeBook {
     public RecipeBookServer() {}
 
     public void a(List<IRecipe> list, EntityPlayer entityplayer) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         Iterator iterator = list.iterator();
 
         while (iterator.hasNext()) {
@@ -33,7 +33,7 @@ public class RecipeBookServer extends RecipeBook {
     }
 
     public void b(List<IRecipe> list, EntityPlayer entityplayer) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         Iterator iterator = list.iterator();
 
         while (iterator.hasNext()) {
@@ -120,7 +120,7 @@ public class RecipeBookServer extends RecipeBook {
     }
 
     private List<IRecipe> d() {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
 
         for (int i = this.a.nextSetBit(0); i >= 0; i = this.a.nextSetBit(i + 1)) {
             arraylist.add(CraftingManager.recipes.getId(i));
@@ -130,7 +130,7 @@ public class RecipeBookServer extends RecipeBook {
     }
 
     private List<IRecipe> e() {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
 
         for (int i = this.b.nextSetBit(0); i >= 0; i = this.b.nextSetBit(i + 1)) {
             arraylist.add(CraftingManager.recipes.getId(i));
diff --git a/src/main/java/net/minecraft/server/RecipeFireworks.java b/src/main/java/net/minecraft/server/RecipeFireworks.java
index 859900d5fc77236c8b53ac7315d35965210faf9b..a6ca3dfda86d3466399e321da4bba77b3197965f 100644
--- a/src/main/java/net/minecraft/server/RecipeFireworks.java
+++ b/src/main/java/net/minecraft/server/RecipeFireworks.java
@@ -88,7 +88,7 @@ public class RecipeFireworks extends ShapelessRecipes implements IRecipe { // Cr
                 nbttagcompound = new NBTTagCompound();
                 nbttagcompound1 = new NBTTagCompound();
                 byte b0 = 0;
-                ArrayList arraylist = Lists.newArrayList();
+                ArrayList arraylist = new ObjectArrayList<>();
 
                 for (int i2 = 0; i2 < inventorycrafting.getSize(); ++i2) {
                     ItemStack itemstack2 = inventorycrafting.getItem(i2);
@@ -124,7 +124,7 @@ public class RecipeFireworks extends ShapelessRecipes implements IRecipe { // Cr
                 this.a.setTag(nbttagcompound);
                 return true;
             } else if (j == 0 && i == 0 && l == 1 && k > 0 && k == i1) {
-                ArrayList arraylist1 = Lists.newArrayList();
+                ArrayList arraylist1 = new ObjectArrayList<>();
 
                 for (int k2 = 0; k2 < inventorycrafting.getSize(); ++k2) {
                     ItemStack itemstack3 = inventorycrafting.getItem(k2);
diff --git a/src/main/java/net/minecraft/server/RecipeRepair.java b/src/main/java/net/minecraft/server/RecipeRepair.java
index fb47f3e1a4d804c3e33e2bef5049ee0a2508899c..df3592530ecdc939dcab3eee91c153a37f92afa2 100644
--- a/src/main/java/net/minecraft/server/RecipeRepair.java
+++ b/src/main/java/net/minecraft/server/RecipeRepair.java
@@ -12,7 +12,7 @@ public class RecipeRepair extends ShapelessRecipes implements IRecipe { // Craft
     // CraftBukkit end
 
     public boolean a(InventoryCrafting inventorycrafting, World world) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
 
         for (int i = 0; i < inventorycrafting.getSize(); ++i) {
             ItemStack itemstack = inventorycrafting.getItem(i);
@@ -33,7 +33,7 @@ public class RecipeRepair extends ShapelessRecipes implements IRecipe { // Craft
     }
 
     public ItemStack craftItem(InventoryCrafting inventorycrafting) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
 
         ItemStack itemstack;
 
diff --git a/src/main/java/net/minecraft/server/ScoreboardServer.java b/src/main/java/net/minecraft/server/ScoreboardServer.java
index 9d13068f3efa8d2cd4adc0cb940f7b4c9ab82796..a432de55e07db6824a93fc35c24a3e8e307a1ab0 100644
--- a/src/main/java/net/minecraft/server/ScoreboardServer.java
+++ b/src/main/java/net/minecraft/server/ScoreboardServer.java
@@ -139,7 +139,7 @@ public class ScoreboardServer extends Scoreboard {
     }
 
     public List<Packet<?>> getScoreboardScorePacketsForObjective(ScoreboardObjective scoreboardobjective) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
 
         arraylist.add(new PacketPlayOutScoreboardObjective(scoreboardobjective, 0));
 
@@ -180,7 +180,7 @@ public class ScoreboardServer extends Scoreboard {
     }
 
     public List<Packet<?>> f(ScoreboardObjective scoreboardobjective) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
 
         arraylist.add(new PacketPlayOutScoreboardObjective(scoreboardobjective, 1));
 
diff --git a/src/main/java/net/minecraft/server/ServerStatisticManager.java b/src/main/java/net/minecraft/server/ServerStatisticManager.java
index e3d2c0ff737bce159fb3b81e466a76e2a929c009..01958001b5b918c17330a3e715c8840423cb4c42 100644
--- a/src/main/java/net/minecraft/server/ServerStatisticManager.java
+++ b/src/main/java/net/minecraft/server/ServerStatisticManager.java
@@ -86,7 +86,7 @@ public class ServerStatisticManager extends StatisticManager {
             JsonObject jsonobject = jsonelement.getAsJsonObject();
             HashMap hashmap = Maps.newHashMap();
             Iterator iterator = jsonobject.entrySet().iterator();
-            java.util.List<String> invalidStats = com.google.common.collect.Lists.newArrayList(); // Paper
+            java.util.List<String> invalidStats = com.google.common.collect.new ObjectArrayList<>(); // Paper
 
             while (iterator.hasNext()) {
                 Entry entry = (Entry) iterator.next();
diff --git a/src/main/java/net/minecraft/server/TileEntityBeacon.java b/src/main/java/net/minecraft/server/TileEntityBeacon.java
index a57b1717105839b6254ef92cc8975a690b7d02f7..8add524ef4c71a029779ef2134a6adf757391dde 100644
--- a/src/main/java/net/minecraft/server/TileEntityBeacon.java
+++ b/src/main/java/net/minecraft/server/TileEntityBeacon.java
@@ -28,7 +28,7 @@ public class TileEntityBeacon extends TileEntityContainer implements ITickable,
 
     public static final MobEffectList[][] a = new MobEffectList[][] { { MobEffects.FASTER_MOVEMENT, MobEffects.FASTER_DIG}, { MobEffects.RESISTANCE, MobEffects.JUMP}, { MobEffects.INCREASE_DAMAGE}, { MobEffects.REGENERATION}};
     private static final Set<MobEffectList> f = Sets.newHashSet();
-    private final List<TileEntityBeacon.BeaconColorTracker> g = Lists.newArrayList();
+    private final List<TileEntityBeacon.BeaconColorTracker> g = new ObjectArrayList<>();
     private boolean j;
     public int levels = -1;
     @Nullable
diff --git a/src/main/java/net/minecraft/server/TileEntityStructure.java b/src/main/java/net/minecraft/server/TileEntityStructure.java
index cda58ee244abceba5301c03c1a2ce7ef4a6e8176..f29a1ab292ee22ce6e37b048bb7f2a9b5b535e93 100644
--- a/src/main/java/net/minecraft/server/TileEntityStructure.java
+++ b/src/main/java/net/minecraft/server/TileEntityStructure.java
@@ -256,7 +256,7 @@ public class TileEntityStructure extends TileEntity {
     }
 
     private List<TileEntityStructure> a(BlockPosition blockposition, BlockPosition blockposition1) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         Iterator iterator = BlockPosition.b(blockposition, blockposition1).iterator();
 
         while (iterator.hasNext()) {
diff --git a/src/main/java/net/minecraft/server/UserCache.java b/src/main/java/net/minecraft/server/UserCache.java
index da7a4525f611527eae1be2e60d1afa9933b91c42..1a36c154592e939dc92d774b1ba1e24e9f10c8c6 100644
--- a/src/main/java/net/minecraft/server/UserCache.java
+++ b/src/main/java/net/minecraft/server/UserCache.java
@@ -267,7 +267,7 @@ public class UserCache {
     }
 
     private List<UserCache.UserCacheEntry> a(int i) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         ArrayList arraylist1 = Lists.newArrayList(Iterators.limit(this.f.iterator(), i));
         Iterator iterator = arraylist1.iterator();
 
diff --git a/src/main/java/net/minecraft/server/Village.java b/src/main/java/net/minecraft/server/Village.java
index 061102419e0c8670b0a24bec2cde3fadfb3d6d06..375bd0384f8f3019601468008ea837e87f78860b 100644
--- a/src/main/java/net/minecraft/server/Village.java
+++ b/src/main/java/net/minecraft/server/Village.java
@@ -13,7 +13,7 @@ import javax.annotation.Nullable;
 public class Village {
 
     private World a;
-    private final List<VillageDoor> b = Lists.newArrayList();
+    private final List<VillageDoor> b = new ObjectArrayList<>();
     private BlockPosition c;
     private BlockPosition d; private BlockPosition getCenter() { return d; } // Paper - OBFHELPER
     private int e;
@@ -29,14 +29,14 @@ public class Village {
         this.c = BlockPosition.ZERO;
         this.d = BlockPosition.ZERO;
         this.j = Maps.newHashMap();
-        this.k = Lists.newArrayList();
+        this.k = new ObjectArrayList<>();
     }
 
     public Village(World world) {
         this.c = BlockPosition.ZERO;
         this.d = BlockPosition.ZERO;
         this.j = Maps.newHashMap();
-        this.k = Lists.newArrayList();
+        this.k = new ObjectArrayList<>();
         this.a = world;
     }
 
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 2555d76316c534a4c31dd1d17a2638c47cbaefe9..21190252a43cf14a51a505f2f00dc3d8a99dfd44 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -70,12 +70,12 @@ public abstract class World implements IBlockAccess {
     };
     // Spigot end
     protected final Set<Entity> f = Sets.newHashSet(); // Paper
-    //public final List<TileEntity> tileEntityList = Lists.newArrayList(); // Paper - remove unused list
-    public final List<TileEntity> tileEntityListTick = Lists.newArrayList();
-    private final List<TileEntity> b = Lists.newArrayList();
+    //public final List<TileEntity> tileEntityList = new ObjectArrayList<>(); // Paper - remove unused list
+    public final List<TileEntity> tileEntityListTick = new ObjectArrayList<>();
+    private final List<TileEntity> b = new ObjectArrayList<>();
     private final Set<TileEntity> tileEntityListUnload = Sets.newHashSet(); // Paper
-    public final List<EntityHuman> players = Lists.newArrayList();
-    public final List<Entity> j = Lists.newArrayList();
+    public final List<EntityHuman> players = new ObjectArrayList<>();
+    public final List<Entity> j = new ObjectArrayList<>();
     protected final IntHashMap<Entity> entitiesById = new IntHashMap();
     private final long K = 16777215L;
     private int L; private int getSkylightSubtracted() { return this.L; } // Paper - OBFHELPER
@@ -1368,7 +1368,7 @@ public abstract class World implements IBlockAccess {
     }
 
     public List<AxisAlignedBB> getCubes(@Nullable Entity entity, AxisAlignedBB axisalignedbb) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
 
         this.a(entity, axisalignedbb, false, arraylist);
         if (entity != null) {
@@ -2620,7 +2620,7 @@ public abstract class World implements IBlockAccess {
     }
 
     public List<Entity> getEntities(@Nullable Entity entity, AxisAlignedBB axisalignedbb, @Nullable Predicate<? super Entity> predicate) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         int i = MathHelper.floor((axisalignedbb.a - 2.0D) / 16.0D);
         int j = MathHelper.floor((axisalignedbb.d + 2.0D) / 16.0D);
         int k = MathHelper.floor((axisalignedbb.c - 2.0D) / 16.0D);
@@ -2638,7 +2638,7 @@ public abstract class World implements IBlockAccess {
     }
 
     public <T extends Entity> List<T> a(Class<? extends T> oclass, Predicate<? super T> predicate) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         Iterator iterator = this.entityList.iterator();
 
         while (iterator.hasNext()) {
@@ -2654,7 +2654,7 @@ public abstract class World implements IBlockAccess {
     }
 
     public <T extends Entity> List<T> b(Class<? extends T> oclass, Predicate<? super T> predicate) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
         Iterator iterator = this.players.iterator();
 
         while (iterator.hasNext()) {
@@ -2677,7 +2677,7 @@ public abstract class World implements IBlockAccess {
         int j = MathHelper.f((axisalignedbb.d + 2.0D) / 16.0D);
         int k = MathHelper.floor((axisalignedbb.c - 2.0D) / 16.0D);
         int l = MathHelper.f((axisalignedbb.f + 2.0D) / 16.0D);
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
 
         for (int i1 = i; i1 < j; ++i1) {
             for (int j1 = k; j1 < l; ++j1) {
diff --git a/src/main/java/net/minecraft/server/WorldBorder.java b/src/main/java/net/minecraft/server/WorldBorder.java
index f404894d56c89a5a085e48e2b4199edae9a86ddd..6a3d61adeffc8efc44a9242307beb6b999675b1b 100644
--- a/src/main/java/net/minecraft/server/WorldBorder.java
+++ b/src/main/java/net/minecraft/server/WorldBorder.java
@@ -6,7 +6,7 @@ import java.util.List;
 
 public class WorldBorder {
 
-    private final List<IWorldBorderListener> a = Lists.newArrayList();
+    private final List<IWorldBorderListener> a = new ObjectArrayList<>();
     private double b;
     private double c;
     private double d = 6.0E7D;
diff --git a/src/main/java/net/minecraft/server/WorldGenLargeFeature.java b/src/main/java/net/minecraft/server/WorldGenLargeFeature.java
index 7a76544ff8c69f2b33e41b6729dcf769f0d54eff..1c116ed22da75f6f0f7d8fab298b5580549f83ec 100644
--- a/src/main/java/net/minecraft/server/WorldGenLargeFeature.java
+++ b/src/main/java/net/minecraft/server/WorldGenLargeFeature.java
@@ -16,7 +16,7 @@ public class WorldGenLargeFeature extends StructureGenerator {
     private final int h;
 
     public WorldGenLargeFeature() {
-        this.b = Lists.newArrayList();
+        this.b = new ObjectArrayList<>();
         this.d = 32;
         this.h = 8;
         this.b.add(new BiomeBase.BiomeMeta(EntityWitch.class, 1, 1, 1));
diff --git a/src/main/java/net/minecraft/server/WorldGenMonument.java b/src/main/java/net/minecraft/server/WorldGenMonument.java
index 927d9bc6b4efa78684fcb4d2afe555c57ea0e170..2fb195f2046773e6422aade61a943884781273fc 100644
--- a/src/main/java/net/minecraft/server/WorldGenMonument.java
+++ b/src/main/java/net/minecraft/server/WorldGenMonument.java
@@ -16,7 +16,7 @@ public class WorldGenMonument extends StructureGenerator {
     private int h;
     public static final List<BiomeBase> a = Arrays.asList(new BiomeBase[] { Biomes.a, Biomes.z, Biomes.i, Biomes.l, Biomes.m});
     public static final List<BiomeBase> b = Arrays.asList(new BiomeBase[] { Biomes.z});
-    private static final List<BiomeBase.BiomeMeta> i = Lists.newArrayList();
+    private static final List<BiomeBase.BiomeMeta> i = new ObjectArrayList<>();
 
     public WorldGenMonument() {
         this.d = 32;
diff --git a/src/main/java/net/minecraft/server/WorldGenStronghold.java b/src/main/java/net/minecraft/server/WorldGenStronghold.java
index 595ecb9052b8ab62c52f8dbcad6f565660119342..518e8490110fc3b8eb858c0220c7e6fe71c28c6b 100644
--- a/src/main/java/net/minecraft/server/WorldGenStronghold.java
+++ b/src/main/java/net/minecraft/server/WorldGenStronghold.java
@@ -20,7 +20,7 @@ public class WorldGenStronghold extends StructureGenerator {
         this.d = new ChunkCoordIntPair[128];
         this.h = 32.0D;
         this.i = 3;
-        this.a = Lists.newArrayList();
+        this.a = new ObjectArrayList<>();
         Iterator iterator = BiomeBase.REGISTRY_ID.iterator();
 
         while (iterator.hasNext()) {
diff --git a/src/main/java/net/minecraft/server/WorldGenVillagePieces.java b/src/main/java/net/minecraft/server/WorldGenVillagePieces.java
index 9b281b6a9634081e0907b6fc2991cb92389a2a11..e715bbf67d7c0e1ad0aed80c4a95ea98ecaa98ee 100644
--- a/src/main/java/net/minecraft/server/WorldGenVillagePieces.java
+++ b/src/main/java/net/minecraft/server/WorldGenVillagePieces.java
@@ -26,7 +26,7 @@ public class WorldGenVillagePieces {
     }
 
     public static List<WorldGenVillagePieces.WorldGenVillagePieceWeight> a(Random random, int i) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
 
         arraylist.add(new WorldGenVillagePieces.WorldGenVillagePieceWeight(WorldGenVillagePieces.WorldGenVillageHouse.class, 4, MathHelper.nextInt(random, 2 + i, 4 + i * 2)));
         arraylist.add(new WorldGenVillagePieces.WorldGenVillagePieceWeight(WorldGenVillagePieces.WorldGenVillageTemple.class, 20, MathHelper.nextInt(random, 0 + i, 1 + i)));
@@ -1455,8 +1455,8 @@ public class WorldGenVillagePieces {
         public int b;
         public WorldGenVillagePieces.WorldGenVillagePieceWeight c;
         public List<WorldGenVillagePieces.WorldGenVillagePieceWeight> d;
-        public List<StructurePiece> e = Lists.newArrayList();
-        public List<StructurePiece> f = Lists.newArrayList();
+        public List<StructurePiece> e = new ObjectArrayList<>();
+        public List<StructurePiece> f = new ObjectArrayList<>();
 
         public WorldGenVillageStartPiece() {}
 
diff --git a/src/main/java/net/minecraft/server/WorldMap.java b/src/main/java/net/minecraft/server/WorldMap.java
index 6d86d2c1a4a86448dfc0a71e508b39af3fe7085a..29cad0c5fb519a5dc77b24abe33537891a2c0a69 100644
--- a/src/main/java/net/minecraft/server/WorldMap.java
+++ b/src/main/java/net/minecraft/server/WorldMap.java
@@ -29,7 +29,7 @@ public class WorldMap extends PersistentBase {
     public boolean unlimitedTracking;
     public byte scale;
     public byte[] colors = new byte[16384];
-    public List<WorldMap.WorldMapHumanTracker> i = Lists.newArrayList();
+    public List<WorldMap.WorldMapHumanTracker> i = new ObjectArrayList<>();
     public final Map<EntityHuman, WorldMap.WorldMapHumanTracker> k = Maps.newHashMap(); // Spigot private -> public
     public Map<UUID, MapIcon> decorations = Maps.newLinkedHashMap(); // Spigot
     private org.bukkit.craftbukkit.map.RenderData vanillaRender = new org.bukkit.craftbukkit.map.RenderData(); // Paper
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 629b04da5973730468b6d8225df0008c6b578a93..39cdf22f0d4f03c565485a94ad7bc96e234b439b 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -51,7 +51,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
     protected final VillageSiege siegeManager = new VillageSiege(this);
     private final WorldServer.BlockActionDataList[] U = new WorldServer.BlockActionDataList[] { new WorldServer.BlockActionDataList(null), new WorldServer.BlockActionDataList(null)};
     private int V;
-    private final List<NextTickListEntry> W = Lists.newArrayList();
+    private final List<NextTickListEntry> W = new ObjectArrayList<>();
 
     // CraftBukkit start
     private static final boolean DEBUG_ENTITIES = Boolean.getBoolean("debug.entities"); // Paper
@@ -836,7 +836,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                     }
 
                     if (arraylist == null) {
-                        arraylist = Lists.newArrayList();
+                        arraylist = new ObjectArrayList<>();
                     }
 
                     arraylist.add(nextticklistentry);
@@ -890,7 +890,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
     }
 
     public List<TileEntity> getTileEntities(int i, int j, int k, int l, int i1, int j1) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList arraylist = new ObjectArrayList<>();
 
         // CraftBukkit start - Get tile entities from chunks instead of world
         for (int chunkX = (i >> 4); chunkX <= ((l - 1) >> 4); chunkX++) {
